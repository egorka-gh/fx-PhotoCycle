<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:config="com.photodispatcher.view.config.*"
					   xmlns:view="com.photodispatcher.view.*"
					   showStatusBar="false"
					   creationComplete="{initApp()}">
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.BookPgAltPaper;
			import com.photodispatcher.model.mysql.entities.BookPgTemplate;
			import com.photodispatcher.model.mysql.entities.BookSynonym;
			import com.photodispatcher.model.mysql.entities.Lab;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.Roll;
			import com.photodispatcher.model.mysql.services.HalloService;
			import com.photodispatcher.model.mysql.services.LabService;
			import com.photodispatcher.print.LabGeneric;
			import com.photodispatcher.print.PrintQueueManager;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.view.ModalPopUp;
			import com.photodispatcher.view.config.DatabasePopup;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			import org.granite.tide.Tide;
			import org.granite.tide.events.TideFaultEvent;
			import org.granite.tide.events.TideResultEvent;
			import org.granite.tide.spring.Spring;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;

			/*dummy vars*/
			private var dbs:BookSynonym;
			private var dit:BookPgTemplate;
			private var daltp:BookPgAltPaper;

			
			private var bdPopup:DatabasePopup;
			
			[Bindable]
			private var labList:ArrayCollection;
			[Bindable]
			private var labMap:Object;

			private function initApp():void{
				bdPopup= new DatabasePopup();
				bdPopup.addEventListener(PopUpEvent.CLOSE,bdPopClose);
				bdPopup.chekConnect();
			}
			private function bdPopClose(e:PopUpEvent):void{
				if(e.commit){
					//connected
					initApp_ms();
				}else{
					//no connection
					currentState='disconnected';
					bdPopup.open(null);
				}
			}
			
			private function initApp_ms():void{
				fillContext();
			}
			
			private var startPopup:ModalPopUp;

			private function fillContext():void{
				Context.setAttribute('syncInterval',10);//appConf.monitor_interval);
				Context.setAttribute('hideLabInfoButton',true);
				

				var so:SharedObject = SharedObject.getLocal('appProps','/');
				var workFolder:String;
				var prtPath:String;
				if (so.size>0){
					workFolder = so.data.workFolder;
					prtPath = so.data.prtPath;
				}
				Context.setAttribute('workFolder',workFolder);
				if(!prtPath) prtPath=workFolder;
				Context.setAttribute('prtPath',prtPath);

				//lock screen
				startPopup= new ModalPopUp();
				startPopup.label='Инициализация';
				startPopup.open(null);

				labMap=null;
				var initLatch:DbLatch=Context.initLab();

				var svc:LabService=Tide.getInstance().getContext().byType(LabService,true) as LabService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onLoadLab);
				latch.addLatch(svc.loadAll(false));
				latch.start();
				
				initLatch.join(latch);
				initLatch.addEventListener(Event.COMPLETE, onConextInit);
				initLatch.start();
			}
			private function onLoadLab(evt:Event):void{
				var latch:DbLatch= evt.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onLoadLab);
					if(!latch.complite) return;
					labList=latch.lastDataAC;
				}
				if(!labList) return;
				
				//detect lab ids
				var oId:Object;
				var aId:Array;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				oId=so.data.labId;
				if (oId is Array){
					aId=oId as Array;
				}else{
					aId=[int(oId)];
				}
				fillLabMap(aId);
			}
			private function fillLabMap(arrId:Array):void{
				var lId:int;
				var arrlab:Array=[];
				var lab:Lab;
				if(!labList) return;
				for each(lId in arrId){
					lab=ArrayUtil.searchItem('id',lId,labList.source) as Lab;
					if(lab){
						lab.isSelected=true;
						arrlab.push(lab);;
					}
				}
				//init print manager
				PrintQueueManager.instance.init(arrlab);
				labMap=PrintQueueManager.instance.labMap;
			}
			private function onConextInit(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onConextInit);
					if(latch.complite){
						postInit();
						startPopup.close();
						startPopup=null;
					}else{
						startPopup.label='Ошибка инициализации'+'/n'+latch.error;
						//latch.showError();
					}
				}
			}
			private function postInit():void{
				//end init
				if(PrintQueueManager.instance.initCompleted){
					currentState='workplace';
				}else{
					currentState='config';
				}
			}

			
			protected function button3_clickHandler(event:MouseEvent):void{
				FlexGlobals.topLevelApplication.exit();
			}

			protected function lstLbs_clickHandler(event:MouseEvent):void{
				if(event.target.id=='cbox'){
					var lab:Lab;
					var arr:Array=[];
					for each (lab in labList){
						if(lab && lab.isSelected){
							arr.push(lab.id);
						}
					}
					fillLabMap(arr);
					var so:SharedObject = SharedObject.getLocal('appProps','/');
					so.data.labId=arr;  
					so.flush();  
				}
			}
			
			protected function button4_clickHandler(event:MouseEvent):void{
				//fillLabList();
				fillContext();
				//if(labMap) currentState='workplace';
			}
			
		]]>
	</fx:Script>
	

	<s:states>
		<s:State name="disconnected"/>
		<s:State name="config"/>
		<s:State name="workplace"/>
	</s:states>
	
	<s:Rect top="0" left="0" right="0" bottom="0">
		<s:fill>
			<s:SolidColor color="#eeeeee"/>
		</s:fill>
	</s:Rect>

	<s:VGroup gap="10" top="5" left="5" right="5" bottom="30"
			  top.workplace="0" left.workplace="0" right.workplace="0">
		<s:Button label="Выбрать БД" includeIn="disconnected,config" click="{bdPopup.open(null)}"/>
		<s:Label text="Укажите лаборатории для данной рабочей станции" includeIn="config" color="#FF0000" visible="{!labMap}" includeInLayout="{!labMap}"/>
		<s:VGroup gap="5" includeIn="config" paddingLeft="50">
			<s:Label text="Лаборатории"/>
			<s:List id="lstLbs" dataProvider="{labList}" click="lstLbs_clickHandler(event)">
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>
							<s:HGroup gap="0" verticalAlign="baseline" paddingTop="2" paddingBottom="2" paddingLeft="3" paddingRight="3">
								<s:CheckBox id="cbox" selected="@{data.isSelected}"/>
								<s:Label id="lbl" text="{data.name}"/>
							</s:HGroup>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:VGroup>	
		<view:LabWorkplace id="labWorkplace" includeIn="workplace"
						   width="100%" height="100%"/>
	</s:VGroup>
	<s:HGroup bottom="5" horizontalAlign="right" width="100%" gap="10" paddingRight="10">
		<s:Button label="Настройки" includeIn="workplace" click="currentState='config'"/>
		<s:Button label="Лаборатория" includeIn="config" click="button4_clickHandler(event)" enabled="{labMap}"/>
		<s:Button label="Выход" click="button3_clickHandler(event)"/>
	</s:HGroup>
	
</s:WindowedApplication>
