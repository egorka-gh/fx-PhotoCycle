<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:view="com.photodispatcher.view.*"
					   
					   showStatusBar="false"
					   creationComplete="{initApp()}"  
					   >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.messenger.CycleStation;
			import com.photodispatcher.service.messenger.MessengerGeneric;
			import com.photodispatcher.shell.OORuner;
			import com.photodispatcher.view.ModalPopUp;
			import com.photodispatcher.view.config.DatabasePopup;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import spark.events.PopUpEvent;
			import spark.events.TextOperationEvent;
			
			[Bindable]
			private var refreshInterval:int;
			
			
			private var bdPopup:DatabasePopup;
			private function initApp():void{
				bdPopup= new DatabasePopup();
				bdPopup.addEventListener(PopUpEvent.CLOSE,bdPopClose);
				bdPopup.chekConnect();//SQLMode.UPDATE,false);
			}
			private function bdPopClose(e:PopUpEvent):void{
				if(e.commit){
					//connected
					init();
					//if(vMonitor) vMonitor.start();
				}else{
					//no connection
					currentState='disconnected';
					bdPopup.open(null);
				}
			}
			
			private var startPopup:ModalPopUp;
			
			private function init():void{
				//lock screen
				startPopup= new ModalPopUp();
				startPopup.label='Инициализация';
				startPopup.open(null);

				var initLatch:DbLatch=Context.initTechSpy();
				initLatch.addEventListener(Event.COMPLETE, onInit);
				initLatch.start();
				//currentState='monitor';
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				ooPath=so.data.ooPath;
				printer=so.data.printer;
				if(printer) Context.setAttribute('printer',printer);
			}
			private function onInit(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				startPopup.close();
				startPopup=null;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onInit);
					if(!latch.complite){
						Alert.show('Ошибка инициализации'+'/n'+latch.error);
					}else{
						var oo:OORuner= new OORuner();
						ooPathValid=oo.check(ooPath);
						currentState='monitor';
						
						//init messenger
						Context.station.name='Шпион';
						Context.station.setType(CycleStation.TYPE_SPY);
						MessengerGeneric.connect();

					}
				}
			}
			
			//TODO 4 debug
			//private var techMonitor:Object;
			
			protected function state1_enterStateHandler(event:FlexEvent):void{
				techMonitor.start();
			}
			
			protected function btMonitorState_clickHandler(event:MouseEvent):void{
				if(!techMonitor) return;
				if(techMonitor.currentState=='monitor'){
					techMonitor.currentState='report';
				}else{
					techMonitor.currentState='monitor';
				}
			}

			[Bindable]
			private var ooPathValid:Boolean;
			[Bindable]
			private var ooPath:String;
			[Bindable]
			private var printer:String;
			
			protected function btOOFolder_clickHandler(event:MouseEvent):void{
				//browse
				var f:File = File.userDirectory;
				f.addEventListener(Event.SELECT,onOOFolderSet);
				f.browseForDirectory('Выбирите папку OpenOffice');
			}
			protected function onOOFolderSet(event:Event):void{
				ooPathValid=false;
				var f:File = event.target as File;
				if(f){
					f.removeEventListener(Event.SELECT,onOOFolderSet);
					ooPath=f.nativePath;
					var oo:OORuner= new OORuner();
					if(oo.check(ooPath)){
						ooPathValid=true;
						ooPath=oo.ooPath;
						//save last selection
						var so:SharedObject = SharedObject.getLocal('appProps','/');
						so.data.ooPath = ooPath;
						so.flush();  
					}
				}
			}

			protected function tiPrinter_changeHandler(event:TextOperationEvent):void{
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.printer = printer;
				so.flush();
				Context.setAttribute('printer',printer);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="disconnected"/>
		<s:State name="config"/>
		<s:State name="monitor" enterState="state1_enterStateHandler(event)"/>
	</s:states>
	
	<s:Rect top="0" left="0" right="0" bottom="0">
		<s:fill>
			<s:SolidColor color="#cccccc"/>
		</s:fill>
	</s:Rect>
	
	<s:Button label="Выбрать БД" includeIn="disconnected,config" click="{bdPopup.open(null)}" top="5" right="5"/>
	
	<s:VGroup top="50" left="10" right="10" bottom="50" gap="5" includeIn="config">
		<s:Label text="Параметры печати" fontWeight="bold"/>
		<s:HGroup width="100%" gap="5" verticalAlign="baseline">
			<s:Label text="Путь к OpenOffice"/>
			<s:TextInput id="tiOOFolder" text="{ooPath}" editable="false" width="400" color="{ooPathValid?0:0xff0000}" textAlign="left"/>
			<s:Button id="btOOFolder" label="..." click="btOOFolder_clickHandler(event)"/>
		</s:HGroup>
		<s:HGroup width="100%" gap="5" verticalAlign="baseline">
			<s:Label text="Принтер" fontWeight="bold"/>
			<s:Label text="(если не указан, используется принтер по умолчанию)"/>
			<s:TextInput id="tiPrinter" text="@{printer}" width="210" change="tiPrinter_changeHandler(event)" textAlign="left"/>
		</s:HGroup>
	</s:VGroup>
	
	<view:TechSpyMonitor id="techMonitor" includeIn="monitor" top="10" left="10" right="10" bottom="35"/>
	
	<s:HGroup bottom="5" width="100%" gap="10" paddingRight="10" paddingLeft="10" verticalAlign="middle">
		<!--<s:Image source="{BaseDAO.isBusy?'assets/database_green.png':'assets/database_grey.png'}" width="24" height="24" toolTip="Запись в базу данных"/>
		<s:Group width="5">
		<s:Label text="{BaseDAO.lastErrMsg}" color="#cc0000"/>
		</s:Group>-->
		<s:Spacer width="100%"/>
		<s:Button id="btMonitorState" label="{techMonitor.currentState=='monitor'?'Отчеты':'Монитор'}" includeIn="monitor" 
				  click="btMonitorState_clickHandler(event)" />
		<s:Spacer width="10"/>
		<s:Button label="Конфигурация" includeIn="monitor" click="{currentState='config'; techMonitor.stop();}"/>
		<s:Button label="Монитор" includeIn="config" click="{currentState='monitor'}"/>
		<s:Button label="Закрыть" click="{MessengerGeneric.disconnect(); FlexGlobals.topLevelApplication.exit()}" />
	</s:HGroup>
	
</s:WindowedApplication>
