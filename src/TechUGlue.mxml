<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:barcode="com.photodispatcher.service.barcode.*"
					   xmlns:view="com.photodispatcher.view.*" 
					   xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*"
					   xmlns:config="com.photodispatcher.view.config.*"
					   showStatusBar="false"
					   creationComplete="{initApp()}" 
					   closing="windowedapplication1_closingHandler(event)"  
					   >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.event.SerialProxyEvent;
			import com.photodispatcher.service.barcode.ComInfo;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.service.barcode.FeederController;
			import com.photodispatcher.service.barcode.GlueController;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.util.NetUtil;
			import com.photodispatcher.util.StrUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			import org.granite.tide.Tide;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			[Bindable]
			private var comReaders:ArrayCollection= new ArrayCollection;
			
			[Bindable]
			private var comFeederProxy:ComInfo; 
			[Bindable]
			private var comGlueProxy:ComInfo; 
			
			[Bindable]
			private var feedDelay:int=100;
			[Bindable]
			private var pushDelay:int=100;

			[Bindable]
			public var doubleSheetOff:Boolean=false;
			[Bindable]
			public var dataBaseOff:Boolean=true;
			[Bindable]
			public var feedOn:Boolean=false;

			[Bindable]
			public var engineOnStartOn:Boolean=false;
			[Bindable]
			public var vacuumOnStartOn:Boolean=false;
			[Bindable]
			public var engineOnErrOff:Boolean=false;
			[Bindable]
			public var vacuumOnErrOff:Boolean=false;
			[Bindable]
			public var stopOnComplite:Boolean=false;
			[Bindable]
			public var pauseOnComplite:Boolean=false;
			
			protected var _reversOrder:Boolean
			[Bindable]
			public function get reversOrder():Boolean{
				return _reversOrder;
			}
			public function set reversOrder(value:Boolean):void{
				_reversOrder = value;
				Context.setAttribute("reversOrder", value);
			}
			
			protected var _alertSound:String;
			[Bindable]
			public function get alertSound():String{
				return _alertSound;
			}
			public function set alertSound(value:String):void{
				_alertSound = value;
				Context.setAttribute("alertSound", value);
			}

			private function initApp():void{
				init();
			}
			
			
			private function init():void{
				//lock screen
				comReaders= new ArrayCollection();
				var coms:Array=ComInfo.load();
				var ci:ComInfo;
				for each (ci in coms){
					if (ci.type==ComInfo.COM_TYPE_CONTROLLER) comFeederProxy= ci; 
					if (ci.type==ComInfo.COM_TYPE_GLUECONTROLLER) comGlueProxy= ci; 
					if (ci.type==ComInfo.COM_TYPE_BARREADER) comReaders.addItem(ci); 
				}
				if(!comFeederProxy){
					comFeederProxy= new ComInfo(); 
					comFeederProxy.type=ComInfo.COM_TYPE_CONTROLLER;
					comFeederProxy.suffix=FeederController.MSG_SUFIX;
				}
				if(!comGlueProxy){
					comGlueProxy= new ComInfo(); 
					comGlueProxy.type=ComInfo.COM_TYPE_GLUECONTROLLER;
					comGlueProxy.suffix=GlueController.MSG_SUFIX;
				}
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				if (so.size>0){
					reversOrder=so.data.reversOrder; 
					doubleSheetOff=so.data.doubleSheetOff;
					feedOn=so.data.feedOn;
					dataBaseOff=so.data.dataBaseOff;
					feedDelay=so.data.feedDelay;
					if(feedDelay<=0) feedDelay=300;
					pushDelay=so.data.bookDelay;
					if(pushDelay<=0) pushDelay=300;
					engineOnStartOn=so.data.engineOnStartOn;
					vacuumOnStartOn=so.data.vacuumOnStartOn;
					engineOnErrOff=so.data.engineOnErrOff;
					vacuumOnErrOff=so.data.vacuumOnErrOff;
					if(so.data.hasOwnProperty('stopOnComplite')) stopOnComplite=so.data.stopOnComplite;
					pauseOnComplite=so.data.pauseOnComplite;
					alertSound=so.data.alertSound;

					glueType=so.data.glueType;
					glueServerIP=so.data.glueServerIP;
					if(!glueServerIP) glueServerIP=NetUtil.getIP();
					glueServerPort=so.data.glueServerPort;
					if(!glueServerPort) glueServerPort=503;
					glueClientIP=so.data.glueClientIP;
					glueClientPort=so.data.glueClientPort;
					if(!glueClientPort) glueClientPort=502;
					glueSideStopOffDelay=so.data.glueSideStopOffDelay;
					glueSideStopOnDelay=so.data.glueSideStopOnDelay;
					pumpEnable=so.data.pumpEnable;
					pumpSensFilterTime=so.data.pumpSensFilterTime;
					pumpWorkTime=so.data.pumpWorkTime;

				}
				
				currentState='config';
			}
			
			
			private function start():void{
				if(glueType==1){
					Context.setAttribute("glueServerIP", glueServerIP);
					Context.setAttribute("glueServerPort", glueServerPort);
					Context.setAttribute("glueClientIP", glueClientIP);
					Context.setAttribute("glueClientPort", glueClientPort);
					Context.setAttribute("glueSideStopOffDelay", glueSideStopOffDelay);
					Context.setAttribute("glueSideStopOnDelay", glueSideStopOnDelay);
					Context.setAttribute("pumpEnable", pumpEnable);
					Context.setAttribute("pumpSensFilterTime", pumpSensFilterTime);
					Context.setAttribute("pumpWorkTime", pumpWorkTime);
				}

				
				if(!feedOn) comFeederProxy.num='';
				if((feedOn && (!comFeederProxy || !comFeederProxy.num)) 
					|| (glueType==0 && (!comGlueProxy || !comGlueProxy.num)) 
					|| (glueType==1 && (!glueServerIP || !glueServerPort || !glueClientIP || !glueClientPort)) 
					|| comReaders.length==0 ){
					Alert.show('Приложение не настроено');
					currentState='config';
					return;
				}
				var arr:Array=comReaders.source.concat(comFeederProxy,comGlueProxy); 
				serialProxy.start(arr);
				if(!serialProxy.isStarted){
					return;
				}
				
				currentState='monitor';
				if(techPickerView) techPickerView.start();
			}
			
			private function stop():void{
				if(techPickerView) techPickerView.stop();
				if(serialProxy) serialProxy.stop();
				currentState='config';
			}
			
			protected function windowedapplication1_closingHandler(event:Event):void{
				if(serialProxy) serialProxy.stop();
				if(techPickerView) techPickerView.stop();
			}
			
			/*
			protected function barcodeReader_barcodeErrorHandler(event:BarCodeEvent):void{
				var barcodeReader:ComReader= event.target as ComReader;
				if(barcodeReader) barcodeReader.stop();
				//serialProxy.stop();
				var bar:String=event.barcode;
				bar = bar.replace(String.fromCharCode(13),'[LF]');
				bar = bar.replace(String.fromCharCode(10),'[CR]');
				if(barcodeReader) bar=barcodeReader.comCaption+': '+bar;
				Alert.show('Ошибка \n'+event.error+';\n данные com: '+bar,'Ошибка');
				currentState='config';
			}
			*/
			
			protected function btSaveComs_clickHandler(event:MouseEvent):void{
				var arr:Array=comReaders.source.concat(comFeederProxy,comGlueProxy);
				ComInfo.save(arr);
				
				saveGlueEth();
			}
			
			protected function serialProxy_serialProxyErrorHandler(event:SerialProxyEvent):void{
				Alert.show('Ошибка SerialProxy \n '+event.error,'Ошибка');
				//currentState='config';
			}
			
			protected function chbRevers_changeHandler(event:Event):void{
				reversOrder=chbRevers.selected;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.reversOrder = reversOrder;
				so.flush();  
			}
			
			
			protected function setBool(prop:String):void{
				if(!this.hasOwnProperty(prop)) return;
				var checkb:CheckBox= this['tg_'+prop] as CheckBox;
				if (!checkb) return;
				var result:Boolean=checkb.selected;
				this[prop]=checkb.selected; 
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data[prop] = result;
				so.flush();  
			}
			
			protected function btAddCom_clickHandler(event:MouseEvent):void{
				var cp:ComInfo= new ComInfo();
				cp.type=ComInfo.COM_TYPE_BARREADER;
				comReaders.addItem(cp);
				comList.selectedItem=cp;
			}
			
			protected function btDelCom_clickHandler(event:MouseEvent):void{
				if(comList && comList.selectedIndex!=-1){
					comReaders.removeItemAt(comList.selectedIndex);
					comList.selectedIndex=-1
				}
			}
			
			protected function spFeedDelay_changeHandler(event:Event):void{
				feedDelay=spFeedDelay.value;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.feedDelay = feedDelay;
				so.flush();  
			}
			
			protected function nsBookDelay_changeHandler(event:Event):void{
				pushDelay=nsBookDelay.value;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.bookDelay = pushDelay;
				so.flush();  
			}
			
			protected function btSoundFile_clickHandler(event:MouseEvent):void{
				//browse
				var file:File = File.userDirectory;
				file.addEventListener(Event.SELECT,prtFolderSet);
				file.browseForOpen('Выбирите файл звука (mp3)');
			}
			protected function prtFolderSet(event:Event):void{
				var file:File = event.target as File;
				if(file){
					file.removeEventListener(Event.SELECT,prtFolderSet);
					//conf.wrk_path=fl.nativePath;
					alertSound=file.nativePath;;
					//save last selection
					var so:SharedObject = SharedObject.getLocal('appProps','/');
					so.data.alertSound = alertSound;
					so.flush();
				}
			}
			
			protected function btSoundTest_clickHandler(event:MouseEvent):void{
				if(!alertSound) return;
				var file:File= new File(alertSound);
				if(!file.exists) return;
				var sound:Sound= new Sound(new URLRequest(file.url));
				try{
					sound.play();
				}catch(error:Error){}
			}

			private var _glueType:int;
			[Bindable]
			public function get glueType():int{
				return _glueType;
			}
			public function set glueType(value:int):void{
				_glueType = value;
				Context.setAttribute("glueType", value);
			}

			protected function ddGlueType_changeHandler(event:IndexChangeEvent):void{
				glueType=ddGlueType.selectedIndex;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.glueType = glueType;
				so.flush();  
			}

			[Bindable]
			public var glueServerIP:String='';
			[Bindable]
			public var glueServerPort:int=503;
			[Bindable]
			public var glueClientIP:String='';
			[Bindable]
			public var glueClientPort:int=502;
			
			[Bindable]
			public var glueSideStopOffDelay:int=0;
			[Bindable]
			public var glueSideStopOnDelay:int=0;
			[Bindable]
			public var pumpSensFilterTime:int=0;
			[Bindable]
			public var pumpWorkTime:int=0;
			[Bindable]
			public var pumpEnable:Boolean=false;
			
			protected function saveGlueEth():void{
				
				Context.setAttribute("glueServerIP", glueServerIP);
				Context.setAttribute("glueServerPort", glueServerPort);
				Context.setAttribute("glueClientIP", glueClientIP);
				Context.setAttribute("glueClientPort", glueClientPort);
				Context.setAttribute("glueSideStopOffDelay", glueSideStopOffDelay);
				Context.setAttribute("glueSideStopOnDelay", glueSideStopOnDelay);
				Context.setAttribute("pumpEnable", pumpEnable);
				Context.setAttribute("pumpSensFilterTime", pumpSensFilterTime);
				Context.setAttribute("pumpWorkTime", pumpWorkTime);
				
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.glueServerIP = glueServerIP;
				so.data.glueServerPort = glueServerPort;
				so.data.glueClientIP = glueClientIP;
				so.data.glueClientPort = glueClientPort;
				so.data.glueSideStopOffDelay = glueSideStopOffDelay;
				so.data.glueSideStopOnDelay = glueSideStopOnDelay;
				so.data.pumpEnable=pumpEnable;
				so.data.pumpSensFilterTime=pumpSensFilterTime;
				so.data.pumpWorkTime=pumpWorkTime;
				
				so.flush();  
			}


		]]>
	</fx:Script>
	
	<fx:Declarations>
		<barcode:SerialProxy id="serialProxy" serialProxyError="serialProxy_serialProxyErrorHandler(event)"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="disconnected"/>
		<s:State name="config"/>
		<s:State name="monitor"/>
	</s:states>
	
	<s:Rect top="0" left="0" right="0" bottom="0">
		<s:fill>
			<s:SolidColor color="#cccccc"/>
		</s:fill>
	</s:Rect>
	
	<s:VGroup  includeIn="config" gap="10" top="5" left="10" right="5" bottom="50">
		
		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Обратный порядок:"/>
			<s:CheckBox id="chbRevers" selected="{reversOrder}"  change="chbRevers_changeHandler(event)"/>
		</s:HGroup>
		
		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Звук ошибки:"/>
			<s:TextInput id="tiSoundFile" text="{alertSound}" editable="false" width="400"/>
			<s:Button id="btSoundFile" label="..." click="btSoundFile_clickHandler(event)" width="40"/>
			<s:Button id="btSoundTest" label="►" click="btSoundTest_clickHandler(event)" width="40"/>
		</s:HGroup>

		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Подача листа"/>
			<s:CheckBox id="tg_feedOn" selected="{feedOn}" change="{setBool('feedOn')}"/> 
		</s:HGroup>
		<s:VGroup  gap="5" width="100%" paddingLeft="15" enabled="{feedOn}">
			<s:HGroup gap="5" verticalAlign="baseline">
				<s:Label text="Задержка подачи листа (млсек):"/>
				<s:NumericStepper id="spFeedDelay" minimum="100" maximum="5000" snapInterval="10" value="{feedDelay}" change="spFeedDelay_changeHandler(event)"/>
			</s:HGroup>
			<s:HGroup gap="0" verticalAlign="baseline">
				<s:CheckBox id="tg_doubleSheetOff" selected="{doubleSheetOff}" change="{setBool('doubleSheetOff')}"/> 
				<s:Label text="Отключить контроль двойного листа для разворотов"/>
			</s:HGroup>
			<s:HGroup gap="0" verticalAlign="baseline">
				<s:Label text="При старте включать:" width="180"/>
				<s:Spacer width="10"/>
				<s:CheckBox id="tg_engineOnStartOn" selected="{engineOnStartOn}" change="{setBool('engineOnStartOn')}"/> 
				<s:Label text="Привод"/>
				<s:Spacer width="10"/>
				<s:CheckBox id="tg_vacuumOnStartOn" selected="{vacuumOnStartOn}" change="{setBool('vacuumOnStartOn')}"/>
				<s:Label text="Вакуум"/>
			</s:HGroup>
			<s:HGroup gap="0" verticalAlign="baseline">
				<s:Label text="При паузе/ошибке выключать:" width="180"/>
				<s:Spacer width="10"/>
				<s:CheckBox id="tg_engineOnErrOff" selected="{engineOnErrOff}" change="{setBool('engineOnErrOff')}"/> 
				<s:Label text="Привод"/>
				<s:Spacer width="10"/>
				<s:CheckBox id="tg_vacuumOnErrOff" selected="{vacuumOnErrOff}" change="{setBool('vacuumOnErrOff')}"/>
				<s:Label text="Вакуум"/>
			</s:HGroup>
			<s:HGroup gap="0" verticalAlign="baseline">
				<s:Label text="При завершении заказа"  width="180"/>
				<s:Spacer width="10"/>
				<s:CheckBox id="tg_stopOnComplite" selected="{stopOnComplite}"  change="{setBool('stopOnComplite')}"/> 
				<s:Label text="Стоп"/>
				<s:Spacer width="10"/>
				<s:CheckBox id="tg_pauseOnComplite" selected="{pauseOnComplite}"  change="{setBool('pauseOnComplite')}"/>
				<s:Label text="Пауза"/>
			</s:HGroup>
		</s:VGroup>
		
		<s:Spacer height="5"/>
		<s:TabBar id="tbComConfig" dataProvider="{vsComConfig}"/>
		<mx:ViewStack id="vsComConfig" borderStyle="none" backgroundAlpha="0" width="100%" height="250">
			<s:NavigatorContent label="Подача" backgroundAlpha="0" width="100%" enabled="{feedOn}">
				<s:Group width="100%">
					<itemRenderer:ComInfoRenderer  data="{comFeederProxy}" lockType="true" lockSuffix="true"/>
				</s:Group>
			</s:NavigatorContent>
			
			<s:NavigatorContent label="Склейка" backgroundAlpha="0" width="100%">
				<s:VGroup gap="5" width="100%">
					<s:HGroup gap="5" verticalAlign="baseline">
						<s:Label text="Тип:"/>
						<s:DropDownList id="ddGlueType" selectedIndex="{glueType}" change="ddGlueType_changeHandler(event)">
							<s:ArrayCollection>
								<fx:String>COM</fx:String>
								<fx:String>Ethernet</fx:String>
							</s:ArrayCollection>
						</s:DropDownList>
					</s:HGroup>
					
					<s:VGroup gap="0" width="100%" visible="{glueType==0}" includeInLayout="{glueType==0}">
						<itemRenderer:ComInfoRenderer data="{comGlueProxy}" lockType="true" lockSuffix="true"/>
						
						<s:HGroup gap="5" verticalAlign="baseline" paddingLeft="20">
							<s:Label text="Задержка выброса книги (млсек):"/>
							<s:NumericStepper id="nsBookDelay" minimum="100" maximum="5000" snapInterval="10" value="{pushDelay}" change="nsBookDelay_changeHandler(event)"/>
						</s:HGroup>
					</s:VGroup>
					
					<s:VGroup gap="5" width="100%" paddingLeft="20" 
							  visible="{glueType==1}" includeInLayout="{glueType==1}">
						<s:HGroup gap="5" verticalAlign="baseline">
							<s:Label text="Компьютер IP:"/>
							<s:TextInput id="tiPCIP" text="@{glueServerIP}"/>
							<s:Label text="порт:"/>
							<s:NumericStepper id="nsPCPort" minimum="500" maximum="9000" snapInterval="1"
											  value="@{glueServerPort}"/>
						</s:HGroup>
						<s:HGroup gap="5" verticalAlign="baseline">
							<s:Label text="Контролер  IP:"/>
							<s:TextInput id="tiGlueIP" text="@{glueClientIP}"/>
							<s:Label text="порт:"/>
							<s:NumericStepper id="nsGluePort" minimum="500" maximum="9000" snapInterval="1"
											  value="@{glueClientPort}"/>
						</s:HGroup>
						
						<s:HGroup gap="3" verticalAlign="baseline">
							<s:Label text="Таймеры боковых упоров (мсек)."/>
							<s:Spacer width="3"/>
							<s:Label text="Выключения:"/>
							<s:NumericStepper id="nsSide_Stop_Off_delay" minimum="10" maximum="9000" snapInterval="10"
											  value="@{glueSideStopOffDelay}"/>
							<s:Spacer width="3"/>
							<s:Label text="Включения:"/>
							<s:NumericStepper id="nsSide_Stop_On_delay" minimum="10" maximum="10000" snapInterval="10"
											  value="@{glueSideStopOnDelay}"/>
							
						</s:HGroup>
						
						<s:HGroup gap="5" verticalAlign="baseline">
							<s:Label text="Регулирование уровня клея насосом:"/>
							<s:CheckBox selected="@{pumpEnable}"/>
						</s:HGroup>
						<s:HGroup gap="5" verticalAlign="baseline">
							<s:Label text="Время работы насоса (мсек):"/>
							<s:NumericStepper minimum="0" maximum="100000" snapInterval="100"
											  value="@{pumpWorkTime}" />
						</s:HGroup>
						<s:HGroup gap="5" verticalAlign="baseline">
							<s:Label text="Время ожидания 'чистого' сигнала (фильтр) (мсек):"/>
							<s:NumericStepper minimum="0" maximum="100000" snapInterval="100"
											  value="@{pumpSensFilterTime}" />
						</s:HGroup>

						
					</s:VGroup>

				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent label="Сканеры ШК" backgroundAlpha="0" width="100%">
				<s:HGroup gap="0">
					<s:VGroup gap="5" height="92%">
						<s:List id="comList" dataProvider="{comReaders}"  height="100%"/>
						<s:Button id="btAddCom" label="Добавить" click="btAddCom_clickHandler(event)"/>
						<s:Button id="btDelCom" label="Удалить" click="btDelCom_clickHandler(event)"/>
					</s:VGroup> 
					<itemRenderer:ComInfoRenderer data="{comList.selectedItem}" lockType="true"/>
				</s:HGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
		
		<s:Button id="btSaveComs" label="Сохранить" click="btSaveComs_clickHandler(event)"/>
	</s:VGroup>
	
	
	<s:VGroup  includeIn="monitor" gap="10" top="5" left="5" right="5" bottom="50">
		<view:GlueFeederView id="techPickerView" 
							 serialProxy="{serialProxy}"
							 reversOrder="{reversOrder}" 
							 feedDelay="{feedDelay}"
							 pushDelay="{pushDelay}"
							 engineOnStartOn="{engineOnStartOn}"
							 vacuumOnStartOn="{vacuumOnStartOn}"
							 engineOnErrOff="{engineOnErrOff}"
							 vacuumOnErrOff="{vacuumOnErrOff}"
							 stopOnComplite="{stopOnComplite}"
							 doubleSheetOff="{doubleSheetOff}"
							 dataBaseOff="true"
							 feedOn="{feedOn}"
							 pauseOnComplite="{pauseOnComplite}"
							 alertSound="{alertSound}"
							 glueType="{glueType}"
							 width="100%" height="100%"/>
	</s:VGroup>
	
	<s:HGroup bottom="5" width="100%" gap="10" paddingRight="10" paddingLeft="10" verticalAlign="middle">
		<s:Spacer width="100%"/>
		<s:Button label="Настройки" includeIn="monitor" click="{stop()}"/>
		<s:Button label="Старт" includeIn="config" click="{start()}"/>
		<s:Button label="Закрыть" click="{stop(); FlexGlobals.topLevelApplication.exit();}"/>
	</s:HGroup>
	
</s:WindowedApplication>
