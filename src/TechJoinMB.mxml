<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:barcode="com.photodispatcher.service.barcode.*"
					   xmlns:view="com.photodispatcher.view.*" 
					   xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*"
					   showStatusBar="false"
					   creationComplete="{initApp()}" 
					   closing="windowedapplication1_closingHandler(event)" xmlns:tech="com.photodispatcher.view.tech.*" 
					   >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.event.SerialProxyEvent;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.SourceType;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.model.mysql.entities.messenger.CycleStation;
			import com.photodispatcher.model.mysql.services.TechPointService;
			import com.photodispatcher.service.barcode.ComInfo;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.service.barcode.Socket2Com;
			import com.photodispatcher.service.barcode.ValveCom;
			import com.photodispatcher.service.messenger.MessengerGeneric;
			import com.photodispatcher.service.modbus.controller.BookJoinMBController;
			import com.photodispatcher.tech.BookJoinHandler;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.util.NetUtil;
			import com.photodispatcher.util.StrUtil;
			import com.photodispatcher.view.AlertrPopup;
			import com.photodispatcher.view.ModalPopUp;
			import com.photodispatcher.view.config.DatabasePopup;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			import org.granite.tide.Tide;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			[Bindable]
			private var techPionts:ArrayCollection;
			//[Bindable]
			//private var coms:ArrayCollection= new ArrayCollection;
			
			[Bindable]
			private var comInfoCover:ComInfo;
			[Bindable]
			private var comInfoBlock:ComInfo;

			[Bindable]
			private var barcodeReaderCover:ComReader;
			[Bindable]
			private var barcodeReaderBlock:ComReader;

			[Bindable]
			private var alertSize:uint=40;
			[Bindable]
			private var alertTime:uint=7;
			[Bindable]
			private var alertSound:String;
			
			[Bindable]
			public var serverIP:String='';
			[Bindable]
			public var serverPort:int=503;
			[Bindable]
			public var clientIP:String='';
			[Bindable]
			public var clientPort:int=502;
			[Bindable]
			protected var splineMaxRun:int;
			[Bindable]
			protected var splineCalibrationSteps:int;
			[Bindable]
			protected var splineCalibrationMM:int;
			[Bindable]
			protected var splineOffset:int;
			[Bindable]
			protected var timeoutBlockOut:int=0;
			[Bindable]
			protected var timeoutBlockPass:int=0;

			
			[Bindable]
			private var techPointObj:TechPoint;
			
			protected var _reversOrder:Boolean
			[Bindable]
			public function get reversOrder():Boolean{
				return _reversOrder;
			}
			public function set reversOrder(value:Boolean):void{
				_reversOrder = value;
				Context.setAttribute("reversOrder", value);
			}
			
			
			private var _techPoint:int;
			[Bindable]
			protected function get techPointID():int{
				return _techPoint;
			}
			protected function set techPointID(value:int):void{
				_techPoint = value;
				if(_techPoint){
					Context.setAttribute("techPoint", _techPoint);
					setTechPointObj(_techPoint);
				}
			}
			
			private function setTechPointObj(id:int):void{
				if(!techPionts) return;
				techPointObj=ArrayUtil.searchItem('id',id,techPionts.source) as TechPoint;
				Context.setAttribute("tech.object", techPointObj);
			}
			
			private var bdPopup:DatabasePopup;
			private function initApp():void{
				bdPopup= new DatabasePopup();
				bdPopup.addEventListener(PopUpEvent.CLOSE,bdPopClose);
				bdPopup.chekConnect();
			}
			private function bdPopClose(e:PopUpEvent):void{
				var connected:Boolean=e.commit;
				if(connected){
					//connected
					init();
				}else{
					//no connection
					currentState='disconnected';
					bdPopup.open(null);
				}
			}
			
			private var startPopup:ModalPopUp;
			
			private function init():void{
				//lock screen
				startPopup= new ModalPopUp();
				startPopup.label='Инициализация';
				startPopup.open(null);
				
				var initLatch:DbLatch=Context.initPhotoPicker();
				initLatch.addEventListener(Event.COMPLETE, onInit);
				
				var latch:DbLatch= new DbLatch();
				var svc:TechPointService=Tide.getInstance().getContext().byType(TechPointService,true) as TechPointService;
				latch.addEventListener(Event.COMPLETE,onTPLoad);
				latch.addLatch(svc.loadAll(OrderState.TECH_COVER_BLOK_JOIN));
				latch.start();
				
				initLatch.join(latch);
				initLatch.start();
			}
			private function onTPLoad(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onTPLoad);
					if(latch.complite){
						techPionts=latch.lastDataAC;
					}
				}
			}
			private function onInit(event:Event):void{
				startPopup.close();
				startPopup=null;
				
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onInit);
					if(!latch.complite){
						Alert.show('Ошибка инициализации'+'/n'+latch.error);
						currentState='disconnected';
						return;
					}
				}
				
				var comifos:Array=ComInfo.load();
				
				if(comifos.length>0) comInfoCover=comifos[0] as ComInfo;
				if(comInfoCover && comInfoCover.type!=ComInfo.COM_TYPE_BARREADER) comInfoCover=null;
				if(comifos.length>1) comInfoBlock=comifos[1] as ComInfo;
				if(comInfoBlock && comInfoBlock.type!=ComInfo.COM_TYPE_BARREADER) comInfoBlock=null;
				
				if(!comInfoCover){
					comInfoCover = new ComInfo();
					comInfoCover.type=ComInfo.COM_TYPE_BARREADER;
				}
				if(!comInfoBlock){
					comInfoBlock = new ComInfo();
					comInfoBlock.type=ComInfo.COM_TYPE_BARREADER;
				}
				
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				if (so.size>0){
					techPointID=so.data.techPoint;
					//reversOrder=so.data.reversOrder;
					var val:uint =so.data.alertSize;
					if(val) alertSize=val;
					val=so.data.alertTime;
					if(val) alertTime=val;
					useTechBarcode=so.data.useTechBarcode;
					alertSound=so.data.alertSound;
					AlertrPopup.alertSound=alertSound;
					
					serverIP=so.data.serverIP;
					if(!serverIP) serverIP=NetUtil.getIP();
					serverPort=so.data.serverPort;
					if(!serverPort) serverPort=503;
					clientIP=so.data.clientIP;
					clientPort=so.data.clientPort;
					if(!clientPort) clientPort=502;
					
					splineMaxRun=so.data.splineMaxRun;
					if(splineMaxRun<100) splineMaxRun=2000;
					splineCalibrationSteps=so.data.splineCalibrationSteps;
					splineCalibrationMM=so.data.splineCalibrationMM;
					splineOffset=so.data.splineOffset;
					timeoutBlockOut=so.data.timeoutBlockOut;
					timeoutBlockPass=so.data.timeoutBlockPass;
				}
				
				//init messenger
				if(techPointObj) Context.station.name=techPointObj.name;
				Context.station.setType(CycleStation.TYPE_JOIN);
				MessengerGeneric.connect();

				if(techPointObj && comInfoCover.num && comInfoBlock.num){
					start();
				}else{
					currentState='config';
				}
			}
			
			[Bindable]
			protected var cController:BookJoinHandler;
			
			private function calibrate():void{
				if(!serverIP || !serverPort || !clientIP || !clientPort){
					Alert.show('Не настроен контролер склейки');
					return;
				}
				currentState='calibration';
				cController=new BookJoinHandler();
				cController.serverIP=serverIP;
				cController.serverPort=serverPort;
				cController.clientIP=clientIP;
				cController.clientPort=clientPort;
				cController.init();
				if(calibrateView) calibrateView.start();
			}

			private function calibrateEnd():void{
				if(calibrateView){
					splineMaxRun=calibrateView.splineMaxRun;
					splineCalibrationSteps=calibrateView.splineCalibrationSteps;
					splineCalibrationMM=calibrateView.splineCalibrationMM;
					calibrateView.stop();
				}
				currentState='config';
			}

			private function start():void{
				if(!techPointObj){
					Alert.show('Не задана технологическая точка');
					currentState='config';
					return;
				}
				if(!comInfoCover.num || !comInfoBlock.num){
					Alert.show('Не настроены сканеры');
					currentState='config';
					return;
				}
				if(!serverIP || !serverPort || !clientIP || !clientPort){
					Alert.show('Не настроен контролер');
					return;
				}
				if(splineCalibrationMM<=0 || splineCalibrationSteps<=0){
					Alert.show('Нет данных калибровки контролера');
					return;
				}
				
				serialProxy.start([comInfoCover,comInfoBlock]);
				if(!serialProxy.isStarted){
					currentState='config';
					return;
				}
				if(!comInfoCover.proxy || !comInfoBlock.proxy){
					serialProxy.stop();
					currentState='config';
					return;
				}

				//create cover reader
				if(barcodeReaderCover){
					barcodeReaderCover.stop();
					barcodeReaderCover.removeEventListener(BarCodeEvent.BARCODE_ERR,barcodeReader_barcodeErrorHandler);
					barcodeReaderCover=null;
				}
				barcodeReaderCover= new ComReader();
				barcodeReaderCover.cleanNonDigit=true;
				barcodeReaderCover.comPort=comInfoCover.proxy;
				barcodeReaderCover.addEventListener(BarCodeEvent.BARCODE_ERR,barcodeReader_barcodeErrorHandler);
				//create block reader
				if(barcodeReaderBlock){
					barcodeReaderBlock.stop();
					barcodeReaderBlock.removeEventListener(BarCodeEvent.BARCODE_ERR,barcodeReader_barcodeErrorHandler);
					barcodeReaderBlock=null;
				}
				barcodeReaderBlock= new ComReader();
				barcodeReaderBlock.cleanNonDigit=true;
				barcodeReaderBlock.comPort=comInfoBlock.proxy;
				barcodeReaderBlock.addEventListener(BarCodeEvent.BARCODE_ERR,barcodeReader_barcodeErrorHandler);

				
				currentState='monitor';
				if(techMonitor){
					techMonitor.cleanLog();
					techMonitor.start();
					
				}
			}
			
			private function closeApp():void{
				MessengerGeneric.disconnect();
				stop(); 
				FlexGlobals.topLevelApplication.exit();
			}
			
			private function stop():void{
				if(techMonitor) techMonitor.stop();
				if(barcodeReaderCover) barcodeReaderCover.stop();
				if(serialProxy) serialProxy.stop();
				currentState='config';
			}
			
			protected function windowedapplication1_closingHandler(event:Event):void{
				MessengerGeneric.disconnect();
				if(barcodeReaderCover) barcodeReaderCover.stop();
				if(barcodeReaderBlock) barcodeReaderBlock.stop();
				if(serialProxy) serialProxy.stop();
				if(techMonitor) techMonitor.stop();
			}
			
			protected function ddTechPoint_changeHandler(event:IndexChangeEvent):void{
				var tp:TechPoint= ddTechPoint.selectedItem as TechPoint;
				if (!tp) return;
				techPointID=tp.id;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.techPoint = techPointID;
				so.flush();  
			}
			
			protected function barcodeReader_barcodeErrorHandler(event:BarCodeEvent):void{
				/*
				var bar:String=event.barcode;
				bar = bar.replace(String.fromCharCode(13),'[LF]');
				bar = bar.replace(String.fromCharCode(10),'[CR]');
				Alert.show('Ошибка \n'+event.error+';\n данные com: '+bar,'Ошибка');
				currentState='config';
				*/
			}
			
			/* protected function btAddCom_clickHandler(event:MouseEvent):void{
				var cp:ComInfo= new ComInfo();
				coms.addItem(cp);
				comList.selectedItem=cp;
			} */
			
			protected function btSaveComs_clickHandler(event:MouseEvent):void{
				//ComInfo.save(coms.source);
				ComInfo.save([comInfoCover, comInfoBlock]);
				saveGlueEth();
			}
			
			protected function serialProxy_serialProxyErrorHandler(event:SerialProxyEvent):void{
				Alert.show('Ошибка SerialProxy \n '+event.error,'Ошибка');
				currentState='config';
			}
			
			/* protected function chbRevers_changeHandler(event:Event):void{
				reversOrder=chbRevers.selected;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.reversOrder = reversOrder;
				so.flush();  
			} */
			
			protected function nsalertSize_changeHandler(event:Event):void{
				var val:uint=nsalertSize.value;
				if (!val) return;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.alertSize = val;
				so.flush();  
			}
			
			protected function nsalertTime_changeHandler(event:Event):void{
				var val:uint=nsalertTime.value;
				if (!val) return;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.alertTime = val;
				so.flush();  
			}
			
			protected function btSoundFile_clickHandler(event:MouseEvent):void{
				//browse
				var file:File = File.userDirectory;
				file.addEventListener(Event.SELECT,prtFolderSet);
				file.browseForOpen('Выбирите файл звука (mp3)');
			}
			protected function prtFolderSet(event:Event):void{
				var file:File = event.target as File;
				if(file){
					file.removeEventListener(Event.SELECT,prtFolderSet);
					//conf.wrk_path=fl.nativePath;
					alertSound=file.nativePath;;
					//save last selection
					var so:SharedObject = SharedObject.getLocal('appProps','/');
					so.data.alertSound = alertSound;
					so.flush();
					AlertrPopup.alertSound=alertSound;
				}
			}
			
			private var _useTechBarcode:Boolean;
			[Bindable]
			public function get useTechBarcode():Boolean{
				return _useTechBarcode;
			}
			public function set useTechBarcode(value:Boolean):void{
				_useTechBarcode = value;
				Context.setAttribute("useTechBarcode", value);
			}
			protected function chbUseTechBarcode_changeHandler(event:Event):void{
				useTechBarcode=chbUseTechBarcode.selected;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.useTechBarcode = useTechBarcode;
				so.flush();  
			}
			
			
			protected function saveGlueEth():void{
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.serverIP = serverIP;
				so.data.serverPort = serverPort;
				so.data.clientIP = clientIP;
				so.data.clientPort = clientPort;
				so.data.splineOffset = splineOffset;
				so.data.timeoutBlockOut=timeoutBlockOut;
				so.data.timeoutBlockPass=timeoutBlockPass;
				so.flush();  
			}

			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<barcode:SerialProxy id="serialProxy" serialProxyError="serialProxy_serialProxyErrorHandler(event)"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="disconnected"/>
		<s:State name="calibration"/>
		<s:State name="config"/>
		<s:State name="monitor"/>
	</s:states>
	
	<s:Rect top="0" left="0" right="0" bottom="0">
		<s:fill>
			<s:SolidColor color="#cccccc"/>
		</s:fill>
	</s:Rect>
	
	<s:Button label="Выбрать БД" includeIn="disconnected,config" click="{bdPopup.open(null)}"
			  top="5" right="5"/>
	
	<s:VGroup  includeIn="config" gap="5" top="5" left="10" right="5" bottom="50">
		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Технологическая точка:"/>
			<s:DropDownList id="ddTechPoint" dataProvider="{techPionts}" selectedItem="{techPointObj}" 
							width="250"
							labelField="name" change="ddTechPoint_changeHandler(event)"/>
		</s:HGroup>

		<s:Spacer height="5"/>
		<s:Label text="Сообщения об ошибках"/>
		<s:HGroup gap="5" verticalAlign="baseline" paddingLeft="20">
			<s:Label text="Шрифт:"/>
			<s:NumericStepper id="nsalertSize" value="@{alertSize}" minimum="10" maximum="100" change="nsalertSize_changeHandler(event)"/>
		</s:HGroup>
		<s:HGroup gap="5" verticalAlign="baseline" paddingLeft="20">
			<s:Label text="Здержка (сек):"/>
			<s:NumericStepper id="nsalertTime" value="@{alertTime}" minimum="1" maximum="60" change="nsalertTime_changeHandler(event)"/>
		</s:HGroup>
		<s:HGroup gap="5" verticalAlign="baseline" paddingLeft="20">
			<s:Label text="Звук:"/>
			<s:TextInput id="tiSoundFile" text="{alertSound}" editable="false" width="400"/>
			<s:Button id="btSoundFile" label="..." click="btSoundFile_clickHandler(event)"/>
		</s:HGroup>

		<!--<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Обратный порядок:"/>
			<s:CheckBox id="chbRevers" selected="{reversOrder}"  change="chbRevers_changeHandler(event)"/>
		</s:HGroup>-->
		
		<s:Spacer height="5"/>
		<s:HGroup gap="10">
			<s:VGroup gap="5">
				<s:Label text="Сканер обложки" fontWeight="bold"/>
				<itemRenderer:ComInfoRenderer  data="{comInfoCover}" lockType="true"/>
			</s:VGroup>
			
			<s:VGroup gap="5">
				<s:Label text="Сканер блока" fontWeight="bold"/>
				<itemRenderer:ComInfoRenderer  data="{comInfoBlock}" lockType="true"/>
			</s:VGroup>
		</s:HGroup>
		
		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Технологический ШК:"/>
			<s:CheckBox id="chbUseTechBarcode" selected="{useTechBarcode}"  change="chbUseTechBarcode_changeHandler(event)"/>
		</s:HGroup>
		
		<s:Spacer height="5"/>
		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Компьютер IP:"/>
			<s:TextInput id="tiPCIP" text="@{serverIP}"/>
			<s:Label text="порт:"/>
			<s:NumericStepper id="nsPCPort" minimum="500" maximum="9000" snapInterval="1"
							  value="@{serverPort}"/>
		</s:HGroup>
		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Контролер  IP:"/>
			<s:TextInput id="tiGlueIP" text="@{clientIP}"/>
			<s:Label text="порт:"/>
			<s:NumericStepper id="nsGluePort" minimum="500" maximum="9000" snapInterval="1"
							  value="@{clientPort}"/>
		</s:HGroup>
		
		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Смещение рейки(мм):" />
			<s:NumericStepper id="nsSplineOffset" minimum="0" maximum="100" snapInterval="1"
							  value="@{splineOffset}"/>
		</s:HGroup>

		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Таймаут выхода блока после сканирования обложки (сек):" />
			<s:NumericStepper minimum="0" maximum="100" snapInterval="1"
							  value="@{timeoutBlockOut}"/>
		</s:HGroup>
		
		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Таймаут застревания блока (мсек):" />
			<s:NumericStepper minimum="0" maximum="10000" snapInterval="100"
							  value="@{timeoutBlockPass}"/>
		</s:HGroup>

		<s:Button id="btSaveComs" label="Сохранить" click="btSaveComs_clickHandler(event)"/>

	</s:VGroup>
	
	<tech:BookJoinCalibrateView id="calibrateView" includeIn="calibration" top="5" left="5" right="5" bottom="50"
								handler="{cController}"
								splineMaxRun="{splineMaxRun}"
								splineCalibrationSteps="{splineCalibrationSteps}"
								splineCalibrationMM="{splineCalibrationMM}"
								/>
	
	<s:VGroup  includeIn="monitor" gap="10" top="5" left="5" right="5" bottom="50">
		<!--<view:TechJoinView id="techMonitor" techPoint="{techPointObj}" 
						   barcodeReaderCover="{barcodeReaderCover}"  barcodeReaderBlock="{barcodeReaderBlock}"
						   useTechBarcode="{useTechBarcode}"
						   alertSize="{alertSize}" alertTime="{alertTime}"
						   width="100%" height="100%"/>-->
		<tech:BookJoinView id="techMonitor" techPoint="{techPointObj}"
						   alertSize="{alertSize}" alertTime="{alertTime}"
						   
						   useTechBarcode="{useTechBarcode}"
						   barcodeReaderCover="{barcodeReaderCover}"  barcodeReaderBlock="{barcodeReaderBlock}"
						   
						   serverIP="{serverIP}" serverPort="{serverPort}"
						   clientIP="{clientIP}" clientPort="{clientPort}"
						   
						   splineCalibrationSteps="{splineCalibrationSteps}"
						   splineCalibrationMM="{splineCalibrationMM}"
						   timeoutBlockOutAfterCoverBarcode="{timeoutBlockOut}"
						   timeoutBlockPass="{timeoutBlockPass}"

						   width="100%" height="100%"/>
	</s:VGroup>
	
	<s:HGroup bottom="5" width="100%" gap="10" paddingRight="10" paddingLeft="10" verticalAlign="middle">
		<s:Spacer width="100%"/>
		<s:Button label="Стоп" includeIn="monitor" click="{stop()}"/>
		<s:Button label="Калибровка" includeIn="config" click="{calibrate()}"/>
		<s:Button label="Завершить" includeIn="calibration" click="{calibrateEnd()}"/>
		<s:Button label="Старт" includeIn="config" click="{start()}"/>
		<s:Button label="Закрыть" click="{closeApp()}" />
	</s:HGroup>
	
</s:WindowedApplication>
