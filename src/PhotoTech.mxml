<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:barcode="com.photodispatcher.service.barcode.*"
					   showStatusBar="false"
					   creationComplete="{initApp()}" 
					   closing="windowedapplication1_closingHandler(event)" xmlns:view="com.photodispatcher.view.*"
					   >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.Source;
			import com.photodispatcher.model.SourceType;
			import com.photodispatcher.model.dao.BaseDAO;
			import com.photodispatcher.model.dao.OrderStateDAO;
			import com.photodispatcher.model.dao.SourcesDAO;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.util.StrUtil;
			import com.photodispatcher.view.config.DatabasePopup;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			[Bindable]
			private var suffixList:ArrayCollection;
			[Bindable]
			private var baudsList:ArrayCollection;
			[Bindable]
			private var techPionts:ArrayCollection;
			
			[Bindable]
			private var comPort:int=1;
			[Bindable]
			private var comBaud:int=2400;
			[Bindable]
			private var comSuffix:int;
			
			[Bindable]
			private var techPointObj:Source;
			private var _techPoint:int;
			[Bindable]
			protected function get techPoint():int{
				return _techPoint;
			}
			protected function set techPoint(value:int):void{
				_techPoint = value;
				if(_techPoint){
					setTechPointObj(_techPoint);
					Context.setAttribute("techPoint", _techPoint);
				}
			}
			
			private function setTechPointObj(id:int):void{
				if(!techPionts) return;
				techPointObj=ArrayUtil.searchItem('id',id,techPionts.source) as Source;
			}
			
			private var bdPopup:DatabasePopup;
			private function initApp():void{
				bdPopup= new DatabasePopup();
				bdPopup.addEventListener(PopUpEvent.CLOSE,bdPopClose);
				bdPopup.chekConnect(SQLMode.UPDATE,false);
			}
			private function bdPopClose(e:PopUpEvent):void{
				if(e.commit){
					//connected
					init();
					//if(vMonitor) vMonitor.start();
				}else{
					//no connection
					currentState='disconnected';
					bdPopup.open(null);
				}
			}

			private function init():void{
				
				//TODO implement some restart
				//if (!Context.initSourceLists()) close();
				
				//init static maps 
				//LabResizeDAO.initSizeMap();
				OrderStateDAO.initStateMap();

				suffixList=new ArrayCollection([13,10,3]);
				/*
				suffixList.addItem({label:'LF', keyCode:13});
				suffixList.addItem({label:'CR', keyCode:10});
				suffixList.addItem({label:'03', keyCode:3});
				*/
				if(barSuffix){
					barSuffix.selectedIndex=0;
				}
				
				baudsList=new ArrayCollection([2400,4800,7200,9600,14400,19200,38400]);
				if(ddBaud){
					ddBaud.selectedIndex=0;
				}

				var sDao:SourcesDAO= new SourcesDAO(); 
				techPionts=sDao.findAll(Source.LOCATION_TYPE_TECH_POINT);

				//BookSynonymDAO.initSynonymMap();
				//DictionaryDAO.initSynonymMap();
				
				//var serverIP:String;
				//var workFolder:String;
				//var prtPath:String;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				if (so.size>0){
					/*
					serverIP=so.data.serverIP;
					workFolder=so.data.workFolder;
					prtPath = so.data.prtPath;
					if(!prtPath) prtPath=workFolder;
					*/
					techPoint=so.data.techPoint;
					if(so.data.comBaud) comBaud=so.data.comBaud;
					if(so.data.comPort) comPort=so.data.comPort;
					if(so.data.comSuffix) comSuffix=so.data.comSuffix;
				}
				
				//if(!serverIP || !workFolder){
				if(!techPoint){
					//Alert.show('Приложение не настроено');
					currentState='config';
					return;
				}
				
				/*
				var f:File= new File(workFolder);
				if(!f || !f.exists || !f.isDirectory){
					Alert.show('Не настроена рабочая папка');
					currentState='config';
					return;
				}
				f= new File(prtPath);
				if(!f || !f.exists || !f.isDirectory){
					Alert.show('Не настроена папка подготовленных заказов');
					currentState='config';
					return;
				}
				Context.setAttribute('workFolder',workFolder);
				Context.setAttribute('prtPath',prtPath);
				Context.setAttribute('serverIP',serverIP);
				*/
				currentState='config';
			}
			
			private function start():void{
				if(!techPoint){
					Alert.show('Приложение не настроено');
					currentState='config';
					return;
				}
				if(techMonitor) techMonitor.start();
				barcodeReader.sufix=comSuffix;
				barcodeReader.start(comPort,comBaud);
				
				currentState='monitor';
			}

			private function stop():void{
				//TODO implement
				barcodeReader.stop();
				currentState='config';
			}

			protected function windowedapplication1_closingHandler(event:Event):void{
				//TODO flush data
				if(barcodeReader) barcodeReader.stop();
			}
			
			protected function ddTechPoint_changeHandler(event:IndexChangeEvent):void{
				var tp:Source= ddTechPoint.selectedItem as Source;
				if (!tp) return;
				techPoint=tp.id;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.techPoint = techPoint;
				so.flush();  
			}
			
			protected function nsComPort_changeHandler(event:Event):void{
				comPort=int(nsComPort.value);
				if(!comPort) return;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.comPort = comPort;
				so.flush();  
				Context.setAttribute("comPort", comPort);
			}
			
			protected function ddBaud_changeHandler(event:IndexChangeEvent):void{
				comBaud=int(ddBaud.selectedItem);
				if(!comBaud) return;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.comBaud = comBaud;
				so.flush();  
				Context.setAttribute("comBaud", comBaud);
			}
			
			private function sufixLabelFunction(item:Object):String{
				var val:int=int(item);
				var result:String='';
				if(val==13){
					result='LF';
				}else if(val==10){
					result='CR';
				}else{
					result=StrUtil.lPad(val.toString(),2);
				}
				return result;
			}
			
			protected function barSuffix_changeHandler(event:IndexChangeEvent):void{
				comSuffix=int(barSuffix.selectedItem);
				if(!comSuffix) return;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.comSuffix = comSuffix;
				so.flush();  
				Context.setAttribute("comSuffix", comSuffix);
			}
			
			protected function barcodeReader_barcodeErrorHandler(event:BarCodeEvent):void{
				barcodeReader.stop();
				var bar:String=event.barcode;
				bar = bar.replace(String.fromCharCode(13),'[LF]');
				bar = bar.replace(String.fromCharCode(10),'[CR]');
				Alert.show('Ошибка чтения штрих кода \n '+event.error+'; штрих код: '+bar,'Ошибка');
				currentState='config';
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<barcode:BarcodeReaderCom id="barcodeReader" barcodeError="barcodeReader_barcodeErrorHandler(event)"/> <!--barcodeReaded="barcodeReader_barcodeReadedHandler(event)" barcodeError=""/>-->
	</fx:Declarations>

	<s:states>
		<s:State name="disconnected"/>
		<s:State name="config"/>
		<s:State name="monitor"/>
	</s:states>

	<s:Rect top="0" left="0" right="0" bottom="0">
		<s:fill>
			<s:SolidColor color="#cccccc"/>
		</s:fill>
	</s:Rect>
	
	<s:VGroup  includeIn="config" gap="10" top="5" left="5" right="5" bottom="50">
		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Технологическая точка:"/>
			<s:DropDownList id="ddTechPoint" dataProvider="{techPionts}" selectedItem="{techPointObj}" 
							labelField="name" change="ddTechPoint_changeHandler(event)"/>
		</s:HGroup>

		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="COM:"/>
			<s:NumericStepper id="nsComPort" value="{comPort}" minimum="1" maximum="9" change="nsComPort_changeHandler(event)"/>
			
			<s:Spacer width="5"/>
			<s:Label text="COM Baud:"/>
			<s:DropDownList id="ddBaud" dataProvider="{baudsList}" selectedItem="{comBaud}" change="ddBaud_changeHandler(event)"/>
		</s:HGroup>
		
		<s:HGroup gap="5" verticalAlign="baseline">
			<s:Label text="Суфикс:"/>
			<s:DropDownList id="barSuffix" dataProvider="{suffixList}" selectedItem="{comSuffix}" labelFunction="{sufixLabelFunction}" change="barSuffix_changeHandler(event)"/>
		</s:HGroup>
	</s:VGroup>

	<s:VGroup  includeIn="monitor" gap="10" top="5" left="5" right="5" bottom="50">
		<view:TechMonitorView id="techMonitor" techPoint="{techPoint}" barcodeReader="{barcodeReader}" width="100%" height="100%"/>
	</s:VGroup>
	
	<s:HGroup bottom="5" width="100%" gap="10" paddingRight="10" paddingLeft="10" verticalAlign="middle">
		<s:Image source="{BaseDAO.isBusy?'assets/database_green.png':'assets/database_grey.png'}" width="24" height="24" toolTip="Запись в базу данных"/>
		<s:Group width="5">
			<s:Label text="{BaseDAO.lastErrMsg}" color="#cc0000"/>
		</s:Group>
		<s:Spacer width="100%"/>
		<s:Button label="Стоп" includeIn="monitor" click="{stop()}"/>
		<s:Button label="Старт" includeIn="config" click="{start()}"/>
		<s:Button label="Закрыть" click="{FlexGlobals.topLevelApplication.exit()}" />
	</s:HGroup>

</s:WindowedApplication>
