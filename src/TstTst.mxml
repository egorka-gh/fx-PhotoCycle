<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view="com.photodispatcher.view.*"
					   preinitialize="{initApp()}" xmlns:chatclient="com.jxl.chatclient.*"
					   closing="windowedapplication1_closingHandler(event)" xmlns:BarCode="BarCode.*"
					   keyDown="windowedapplication1_keyDownHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSONEncoder;
			import com.photodispatcher.event.WebEvent;
			import com.photodispatcher.factory.OrderBuilder;
			import com.photodispatcher.model.Source;
			import com.photodispatcher.model.dao.BookSynonymDAO;
			import com.photodispatcher.model.dao.DictionaryDAO;
			import com.photodispatcher.model.dao.SourcesDAO;
			import com.photodispatcher.service.barcode.ValveController;
			import com.photodispatcher.service.web.ProfotoWeb;
			import com.photodispatcher.service.web.WebClient;
			import com.photodispatcher.util.Code128;
			import com.photodispatcher.util.JsonUtil;
			import com.photodispatcher.view.config.DatabasePopup;
			
			import mx.controls.Alert;
			import mx.core.BitmapAsset;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.PopUpEvent;
			
			[Embed(source="assets/crop16.png")] 
			[Bindable] 
			public var ico16:Class;
			[Embed(source="assets/crop24.png")] 
			[Bindable] 
			public var ico24:Class;
			[Embed(source="assets/crop32.png")] 
			[Bindable] 
			public var ico32:Class;
			
			private var bdPopup:DatabasePopup;
			private function initApp():void{
				bdPopup= new DatabasePopup();
				bdPopup.addEventListener(PopUpEvent.CLOSE,bdPopClose);
				bdPopup.chekConnect();
			}
			private function bdPopClose(e:PopUpEvent):void{
				if(e.commit){
					//connected
				}else{
					//no connection
					bdPopup.open(null);
				}
				
				if (NativeApplication.supportsSystemTrayIcon) {
					//NativeApplication.nativeApplication.autoExit=false;
					var i16:BitmapAsset = new ico16() as BitmapAsset;
					var i24:BitmapAsset = new ico24() as BitmapAsset;
					var i32:BitmapAsset = new ico32() as BitmapAsset;
					NativeApplication.nativeApplication.icon.bitmaps =[i16.bitmapData,i24.bitmapData,i32.bitmapData];
					
					var iconMenu:NativeMenu = new NativeMenu(); 
					var hideCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Hide")); 
					hideCommand.addEventListener(Event.SELECT, function(event:Event):void { 
						stage.nativeWindow.visible=false;
						//minimize(); // .visible=false; 
					});
					var showCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Show")); 
					showCommand.addEventListener(Event.SELECT, function(event:Event):void { 
						//this.visible=true;
						//restore();
						stage.nativeWindow.visible=true;
						//NativeApplication.nativeApplication.activate();
						stage.nativeWindow.orderToFront();
					});
					var exitCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Exit")); 
					exitCommand.addEventListener(Event.SELECT, function(event:Event):void { 
						//canClose=true;
						//NativeApplication.nativeApplication.icon.bitmaps = []; 
						//NativeApplication.nativeApplication.exit();
						stage.nativeWindow.close();
					});
					
					var systray:SystemTrayIcon =NativeApplication.nativeApplication.icon as SystemTrayIcon; 
					systray.tooltip = "Builder"; 
					systray.menu = iconMenu; 
				}
			}

			
			protected function svc_resultHandler(event:ResultEvent):void{
				lbOk.text='Done';
				var h:*=svc.headers;
			}
			
			protected function svc_faultHandler(event:FaultEvent):void{
				lbErr.text=event.fault.faultString;
			}
			
			protected function btLogin_clickHandler(event:MouseEvent):void{
			}
			
			protected function getOrderHandle(event:Event):void{
				var pw:ProfotoWeb=event.target as ProfotoWeb;
				var ob:OrderBuilder= new OrderBuilder();
				var r:Array=ob.build(pw.source,pw.orderes);
				trace('');
			}
			
			protected function handleLogged(event:Event):void{
				Alert.show('Logged');
				
			}
			protected function handleLoggedErr(event:WebEvent):void{
				Alert.show('Log error. ' + event.error);
				
			}
			
			protected function btLogin2_clickHandler(event:MouseEvent):void{
				var urlLoader:URLLoader = new URLLoader();
				var urlRequest : URLRequest = new URLRequest('http://next.globo.by/'+'api.php');
				var urlVariables:URLVariables = new URLVariables();

				urlVariables['appkey']='sp0oULbDnJfk7AjBNtVG';
				urlVariables['cmd']='orders';
				//urlVariables['cmd']='list';
				
				var parm:Object=new Object(); 
				parm['status']=30;
				var str:String=JsonUtil.encode(parm);
				
				urlVariables['args[status]']=30;
				//urlVariables.decode('args[status]=30');
				
				urlRequest.method = URLRequestMethod.POST
				urlRequest.data = urlVariables;
				urlLoader.addEventListener(Event.COMPLETE, getData);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR,handleErr);
				urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR,handleSecErr);
				//urlLoader.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, parseResponce);
				//urlLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS,handleStatus);
				urlLoader.load(urlRequest);
			}
			
			protected function getData(event:Event):void{
				trace('dsf');
				var o:Object=JsonUtil.decode(event.target.data);
				
			}

			protected function handleErr(e:IOErrorEvent):void{
				trace('IO_ERROR');
			}
			protected function handleSecErr(e:SecurityErrorEvent):void{
				trace('SECURITY_ERROR');
			}
			protected function parseResponce(e:HTTPStatusEvent):void{
				trace('HTTP_RESPONSE_STATUS');
				return;
				var urlLoader:URLLoader=(e.target as URLLoader);
				if(e.responseURL=='http://profoto.by/albom/'){
					if(urlLoader){
						urlLoader.removeEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, parseResponce);
						urlLoader.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, handleDataStatus);
						urlLoader.addEventListener(Event.COMPLETE,handleData);
						//http://profoto.by/albom/
						//attempt to nav zone51
						var urlRequest : URLRequest = new URLRequest('http://profoto.by/'+'zone51/storage/orders/');
						var urlVariables:URLVariables = new URLVariables();
						urlVariables['dir']='DESC';
						urlVariables['limit']='20';
						urlVariables['op']='list';
						urlVariables['orderstatus']='2';
						urlVariables['orderstatus_match']='equal_int';
						urlVariables['sort']='orderdate';
						urlRequest.method = URLRequestMethod.POST
						urlRequest.data = urlVariables;
						urlLoader.load(urlRequest);
					}
				}
				/*
				var urlLoader:URLLoader = new URLLoader();
				var urlRequest : URLRequest = new URLRequest('http://profoto.by/'+'zone51/');
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR,handleErr);
				urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR,handleSecErr);
				urlLoader.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, parseResponce);
				urlLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS,handleStatus);
				urlLoader.load(urlRequest);
				*/
			}

			protected function handleDataStatus(e:HTTPStatusEvent):void{
				var url:String=e.responseURL;
			}
			protected function handleData(e:Event):void{
				var o:*=e.currentTarget.data;
			}
			
			protected function handleStatus(e:HTTPStatusEvent):void{
				trace('HTTP_STATUS');
			}
			
			protected function btRegE_clickHandler(event:MouseEvent):void{
				var value:String=tiIn.text;
				if(value){
					/*
					var re:RegExp=/(http)|(www)|([!@#$%^&*(){}+'":|,[\]\\\/\n\r\t])/gi;
					var s:String=value.replace(re,'_');
					//remove more then 2 _
					re=/__+/g;
					s=value.replace(re,'_');
					//remove starting/ending . and _
					re=/(^_*\.*_*)|(_*\.*_*$)/g;
					s=s.replace(re,'');
					*/
					/*
					var re:RegExp=/[^a-z0-9\-_.,]/gi;
					var s:String=value.replace(re,'x');
					lbOut.text=s;
					*/
					lbOut.text=Code128.codeIt(value);
				}
			}
			
			protected function btTrans_clickHandler(event:MouseEvent):void{
				var vc:ValveController= new ValveController();
				lbOut.text= vc.calcLRC(tiIn.text).toString(16);
				return;
				var str:String='dfgsdfgsdfg fdg';
				var str2:String='';
				var b:Boolean=Boolean(str);
				b=Boolean(str2);
				b=str;
				b=str2;
				
				/*
				var tr:DictionaryDAO=new DictionaryDAO();
				var ar:Array=tr.translatePath(1,'15_21_gljanec');
				*/
				//var fl1:File= new File('c:'+File.separator+'tmp');
				var fl1:File= File.documentsDirectory;
				fl1=fl1.resolvePath('FFOutput');
				trace(fl1.nativePath + ' exists:' +fl1.exists);
				var fl2:File= File.documentsDirectory;
				//fl2=fl2.resolvePath('conf.xml');//'FFOutput');
				//fl2=fl2.resolvePath('FFOutput');
				fl2=fl2.resolvePath('FFOutput\\MVI_6921.flv');
				var s:String=fl2.nativePath;
				trace(fl2.nativePath + ' exists:' +fl2.exists);

				trace('f1-name: '+fl1.name);
				trace('f2-name: '+fl2.name+ ' parent '+ fl2.parent.name);

				trace('f1-f2: '+fl1.getRelativePath(fl2,false));
				trace('f2-f1: '+fl2.getRelativePath(fl1,false));
				/*
				Alert.show(fl1.getRelativePath(fl2,false)+' : ' +fl1.nativePath);
				var fl3:File= new File('c:'+File.separator+'img.jpg');
				Alert.show(fl1.getRelativePath(fl2,false)+' : ' +fl3.nativePath);
				*/
			}
			
			private var i:int=0;
			protected function btLoader_clickHandler(event:MouseEvent):void{
				var loader:Loader= new Loader();
				var path:String='D:\\Egorka\\Folders\\flex\\Dropbox\\Public\\13217\\1CY_000'+i.toString()+'.jpg';
				loader.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onLoaderErr);
				loader.addEventListener(IOErrorEvent.IO_ERROR, onLoaderErr);
				loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onLoaderErr);
				//loader.contentLoaderInfo.addEventListener(Event.INIT,onContentLoaderInfo);
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE,onContentLoaderInfo);
				loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onLoaderErr);
				//loader.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onLoaderErr2);
				loader.load(new URLRequest(path));
			}
			private function onLoaderErr2(event:UncaughtErrorEvent):void{
				if(event.error is Error){
					var error:Error = event.error as Error;
					trace(error.errorID+ ' '+error.message);
				}else if(event.error is ErrorEvent){
					var errorEvent:ErrorEvent = event.error as ErrorEvent;
					trace(errorEvent.errorID+ ' '+errorEvent.text);
				}else{
					trace('?????');
				}
					
			}

			private function onLoaderErr(e:ErrorEvent):void{
				var loader:Loader= e.target as Loader;
				if(loader){
					loader.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, onLoaderErr);
					loader.removeEventListener(IOErrorEvent.IO_ERROR, onLoaderErr);
					loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onLoaderErr);
					loader.contentLoaderInfo.removeEventListener(Event.INIT,onContentLoaderInfo);
					loader.contentLoaderInfo.removeEventListener(Event.COMPLETE,onContentLoaderInfo);
					loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onLoaderErr);
				}
				trace('ResizeTask. Ошибка определения размера: '+e.type+'; '+e.text);
				loader=null;
				if(i==4) {
					i++;
					btLoader_clickHandler(null);
				}
			}

			private function onContentLoaderInfo(e:Event):void{
				var loader:LoaderInfo= e.target as LoaderInfo;
				trace('good')
				if(loader){
					var x:int=Math.min(loader.width,loader.height);
					var y:int=Math.max(loader.width,loader.height);
					/*
					loader.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, onLoaderErr);
					loader.removeEventListener(IOErrorEvent.IO_ERROR, onLoaderErr);
					loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onLoaderErr);
					loader.contentLoaderInfo.removeEventListener(Event.INIT,onContentLoaderInfo);
					loader.contentLoaderInfo.removeEventListener(Event.COMPLETE,onContentLoaderInfo);
					loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onLoaderErr);
					try{
						loader.unload();
					}catch(err:Error){}
					loader=null;
					*/
				}
				trace(x+' '+y);
				i++;
				btLoader_clickHandler(null);
			}
			
			protected function btTranslate_clickHandler(event:MouseEvent):void{
				//var bs:Object= BookSynonymDAO.translatePath('20x20_kogzam_alum_60x25_shelk-fuji-silk');
				//var f:Object=DictionaryDAO.translatePath(4,'20x30_matovaja');
				var f:Object=DictionaryDAO.translateWord(0,'W','cutting');
			}
			
			//private var canClose:Boolean=false;
			protected function windowedapplication1_closingHandler(event:Event):void{
				//if(!canClose){
					event.preventDefault();
					//visible=false;
					stage.nativeWindow.visible=false;
				//}
			}
			
			protected function windowedapplication1_keyDownHandler(event:KeyboardEvent):void{
				trace('key :'+String.fromCharCode( event.charCode));
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="svc" 
					   method="POST" resultFormat="text"
					   result="svc_resultHandler(event)"
					   fault="svc_faultHandler(event)"
					   />
	</fx:Declarations>
	<s:HGroup gap="10" width="100%" height="100%">
		<chatclient:UnusedChatClientView width="300" height="300"/>
		<s:VGroup gap="10" top="10" left="10">
			<s:Button id="btLoader" label="Loader" click="btLoader_clickHandler(event)"/>

			<s:Button id="btLogin" label="Login" click="btLogin_clickHandler(event)"/>
			<s:Button id="btLogin2" label="Login2" click="btLogin2_clickHandler(event)"/>
			<s:Label id="lbOk" width="300"/>
			<s:Label id="lbErr" width="300"/>
			<s:Spacer height="10"/>
			<s:TextInput id="tiIn" width="300" />
			<s:TextInput id="lbOut" width="300"/>
			<s:Button id="btRegE" label="btRegE" click="btRegE_clickHandler(event)"/>

			<s:Button id="btTranslate" label="translate" click="btTranslate_clickHandler(event)"/>
			
			<s:Button id="btDB" label="Open db" click="{bdPopup.open(null)}"/>
			<s:Button id="btTrans" label="Trans" click="btTrans_clickHandler(event)"/>
			
		</s:VGroup>
		<view:GridsView width="100%" height="100%"/>
	</s:HGroup>
	
	<!--http://profoto.by/zone51/storage/orders/-->
<!-- post params	
	dir=DESC
	limit=20
	op=list
	orderstatus=2
	orderstatus_match=equal_int
	sort=orderdate
	
-->
<!--	json
	items (array)
	totalCount (items#, set 2 post param limit)
	-->
</s:WindowedApplication>
 