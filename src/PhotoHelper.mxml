<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:config="com.photodispatcher.view.config.*"
					   xmlns:remote="com.photodispatcher.view.remote.*" 
					   xmlns:services="com.jxl.chatclient.mvcs.services.*" 
					   xmlns:remote1="com.photodispatcher.provider.preprocess.remote.*"
					   xmlns:remote2="com.photodispatcher.provider.ftp.remote.*" 
					   xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*" 
					   showStatusBar="false"
					   creationComplete="{initApp()}"
					   closing="windowedapplication1_closingHandler(event)" xmlns:config1="com.akmeful.fotokniga.config.*" xmlns:config2="com.akmeful.fotocalendar.config.*" xmlns:download="com.photodispatcher.provider.fbook.download.*"
					   >
	
	<fx:Script>
		<![CDATA[
			import com.jxl.chat.vo.InstructionConstants;
			import com.jxl.chat.vo.messages.ChatMessageVO;
			import com.jxl.chatclient.events.ServiceEvent;
			import com.jxl.chatclient.mvcs.services.ChatService;
			import com.jxl.chatserver.vo.ClientVO;
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.IMRunerEvent;
			import com.photodispatcher.model.AppConfig;
			import com.photodispatcher.model.dao.AppConfigDAO;
			import com.photodispatcher.model.dao.BaseDAO;
			import com.photodispatcher.model.dao.BookSynonymDAO;
			import com.photodispatcher.model.dao.DictionaryDAO;
			//import com.photodispatcher.model.dao.LabResizeDAO;
			//import com.photodispatcher.model.dao.OrderStateDAO;
			import com.photodispatcher.shell.IMRuner;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.view.config.DatabasePopup;
			
			import flash.utils.flash_proxy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.BitmapAsset;
			import mx.core.FlexGlobals;
			
			import spark.effects.interpolation.RGBInterpolator;
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			[Embed(source="assets/crop16.png")] 
			[Bindable] 
			public var ico16:Class;
			[Embed(source="assets/crop24.png")] 
			[Bindable] 
			public var ico24:Class;
			[Embed(source="assets/crop32.png")] 
			[Bindable] 
			public var ico32:Class;

			
			private var bdPopup:DatabasePopup;
			private function initApp():void{
				bdPopup= new DatabasePopup();
				bdPopup.addEventListener(PopUpEvent.CLOSE,bdPopClose);
				bdPopup.chekConnect(SQLMode.READ,false);
			}
			private function bdPopClose(e:PopUpEvent):void{
				if(e.commit){
					//connected
					start();
					//if(vMonitor) vMonitor.start();
				}else{
					//no connection
					currentState='disconnected';
					bdPopup.open(null);
				}
			}
			
			private var _helpMode:int;
			protected function get helpMode():int{
				return _helpMode;
			}
			protected function set helpMode(value:int):void{
				_helpMode = value;
				if(!_helpMode) _helpMode=ClientVO.TYPE_BUILDER;
				Context.setAttribute("helpMode", _helpMode);
				helpModeIdx=ArrayUtil.searchItemIdx('id',_helpMode,ClientVO.HELPER_MODES);
			}

			[Bindable]
			private var helpModeIdx:int;

			private function start():void{
				//var appConfDAO:AppConfigDAO=new AppConfigDAO();
				//var appConf:AppConfig=appConfDAO.getItem();
				
				//TODO implement some restart
				if (!Context.initSourceLists()) close();
				Context.fillFromConfig();
				//init static maps  
				
				//TODO REFACTOR
				//LabResizeDAO.initSizeMap(); !!
				//OrderStateDAO.initStateMap(); !!
				BookSynonymDAO.initSynonymMap();
				DictionaryDAO.initSynonymMap();

				//detect IM props
				
				var imPath:String;
				var imThreads:int;
				var serverIP:String;
				var workFolder:String;
				var prtPath:String;
				var pdfPageLimit:int=100;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				if (so.size>0){
					imPath = so.data.imPath;
					imThreads=so.data.imThreads;
					serverIP=so.data.serverIP;
					workFolder=so.data.workFolder;
					prtPath = so.data.prtPath;
					if(!prtPath) prtPath=workFolder;
					//get pdf pages limit
					pdfPageLimit=so.data.pdfPageLimit;
					if(!pdfPageLimit) pdfPageLimit=100;
					helpMode=so.data.helpMode;
				}

				if(!imPath || !imThreads || !serverIP || !workFolder){
					Alert.show('Приложение не настроено');
					currentState='config';
					return;
				}
				
				var f:File= new File(workFolder);
				if(!f || !f.exists || !f.isDirectory){
					Alert.show('Не настроена рабочая папка');
					currentState='config';
					return;
				}
				f= new File(prtPath);
				if(!f || !f.exists || !f.isDirectory){
					Alert.show('Не настроена папка подготовленных заказов');
					currentState='config';
					return;
				}
				
				Context.setAttribute('workFolder',workFolder);
				Context.setAttribute('prtPath',prtPath);
				Context.setAttribute('imPath',imPath);
				Context.setAttribute('imThreads',imThreads);
				Context.setAttribute('serverIP',serverIP);
				Context.setAttribute("pdfPageLimit", pdfPageLimit);

				initTray();

				f=File.applicationStorageDirectory;
				//var im:IMRuner= new IMRuner(imPath,workFolder);
				var im:IMRuner= new IMRuner(imPath,f.nativePath);
				im.addEventListener(IMRunerEvent.IM_COMPLETED, onImPing);
				imOk=false;
				im.ping(imPath);
				currentState='initialization';
			}

			private var trayMode:Boolean=false;
			private function initTray():void{
				if(trayMode) return;
				if (NativeApplication.supportsSystemTrayIcon) {
					//NativeApplication.nativeApplication.autoExit=false;
					var i16:BitmapAsset = new ico16() as BitmapAsset;
					var i24:BitmapAsset = new ico24() as BitmapAsset;
					var i32:BitmapAsset = new ico32() as BitmapAsset;
					NativeApplication.nativeApplication.icon.bitmaps =[i16.bitmapData,i24.bitmapData,i32.bitmapData];
					
					var iconMenu:NativeMenu = new NativeMenu(); 
					/*
					var hideCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Скрыть")); 
					hideCommand.addEventListener(Event.SELECT, dock);
					*/
					var showCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Открыть")); 
					showCommand.addEventListener(Event.SELECT, unDock);
					
					var exitCommand:NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Выход")); 
					exitCommand.addEventListener(Event.SELECT,closeApp);
					
					SystemTrayIcon(NativeApplication.nativeApplication.icon).addEventListener(MouseEvent.CLICK, unDock);
					
					stage.nativeWindow.addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, onMinimized);
					
					var systray:SystemTrayIcon =NativeApplication.nativeApplication.icon as SystemTrayIcon; 
					systray.tooltip = "PhotoHelper"; 
					systray.menu = iconMenu;
					trayMode=true;
				}
			}
			
			private function closeApp(event:Event):void{
				stop();
				stage.nativeWindow.close();
			}
			
			private function dock(event:Event):void{
				stage.nativeWindow.visible=false;
			}
			
			private function unDock(event:Event):void{
				stage.nativeWindow.visible=true;
				stage.nativeWindow.orderToFront();
			}
			
			private function onMinimized(displayStateEvent:NativeWindowDisplayStateEvent):void{
				if(displayStateEvent.afterDisplayState == NativeWindowDisplayState.MINIMIZED){
					displayStateEvent.preventDefault();
					dock(null);
				}
			}
			
			[Bindable]
			private var imOk:Boolean=false;
			
			private function onImPing(e:IMRunerEvent):void{
				var im:IMRuner=e.target as IMRuner;
				im.removeEventListener(IMRunerEvent.IM_COMPLETED, onImPing);
				
				if(e.hasError){
					Alert.show('ImageMagick не доступен: '+e.error);
					currentState='config';
					return;
				}
				imOk=true;
				connectChatService();
				/*
				if(chatService && chatService.isConnected){
					currentState='process';
				}
				*/
			}
			
			private function stop():void{
				//TODO implement ?
				//notify server
				//close chat
				chatService.close();
				IMRuner.stopAll();
			}

			protected function button1_clickHandler(event:MouseEvent):void{
				if(trayMode){
					dock(null);
				}else{
					stop();
					FlexGlobals.topLevelApplication.exit();
				}
			}
			
			protected function button2_clickHandler(event:MouseEvent):void{
				stop();
				if(vConfig) vConfig.refresh();
				currentState='config';
			}
			
			protected function chatService_joinedChatHandler(event:ServiceEvent):void{
				if(currentState=='initialization' && imOk){
					currentState='process';
				}
			}
			
			private function connectChatService():void{
				var serverIP:String=Context.getAttribute('serverIP');
				if(!serverIP) return;
				if(!chatService.isConnected) chatService.connect(serverIP, ChatService.DEFAULT_PORT, '',helpMode);
			}
			
			private var timer:Timer;
			
			private function reconnectChatService():void{
				if(!timer){
					timer= new Timer(15000,1);
					timer.addEventListener(TimerEvent.TIMER,onTimer);
				}else{
					timer.reset();
				}
				timer.start()
			}
			private function onTimer(e:TimerEvent):void{
				connectChatService();
			}
			
			protected function chatService_chatMessageHandler(event:ServiceEvent):void{
				var msg:ChatMessageVO= event.chatMessage;
				if(!msg) return;
				if(msg.instructions==InstructionConstants.SERVER_SET_USERTYPE ){
					var mode:int=msg.userType;
					if(mode){ 
						if(chatService && chatService.isConnected) chatService.setUserType(mode);
						helpMode=mode;
					}
				}
				/*
				if(msg.instructions==InstructionConstants.CLIENT_SET_USERTYPE){
					helpMode=msg.userType;
				}
				*/
			}
			
			protected function ddHelpMode_changeHandler(event:IndexChangeEvent):void{
				var mode:int=0;
				if(ddHelpMode.selectedItem) mode=ddHelpMode.selectedItem.id;
				if(mode && chatService && chatService.isConnected) chatService.setUserType(mode);
			}
			
			protected function windowedapplication1_closingHandler(event:Event):void{
				if(trayMode){
					event.preventDefault();
					stage.nativeWindow.visible=false;
				}else{
					stop();
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<services:ChatService id="chatService" 
							  joinedChat="chatService_joinedChatHandler(event)" 
							  disconnected="{reconnectChatService()}" 
							  error="{reconnectChatService()}"
							  chatMessage="chatService_chatMessageHandler(event)"/>
		<remote1:RemotePreprocessManager id="preprocessManager" chatService="{chatService}" canBuild="{imOk}"/>
		<remote2:RemoteFtpManager id="ftpManager" chatService="{chatService}" />
		<config1:PathAlias/>
		<config2:PathAlias/>
		<download:FontDownloadManager/>
	</fx:Declarations>

	<s:states>
		<s:State name="disconnected"/>
		<s:State name="config"/>
		<s:State name="initialization"/>
		<s:State name="process"/>
	</s:states>

	<s:Rect top="0" left="0" right="0" bottom="0">
		<s:fill>
			<s:SolidColor color="#cccccc"/>
		</s:fill>
	</s:Rect>

	<s:VGroup  gap="10" top="5" left="5" right="5" bottom="50">
		<s:Button label="Выбрать БД" includeIn="disconnected,config" click="{bdPopup.open(null)}"/>
		<config:ProcessorConfig id="vConfig" includeIn="config" width="100%" height="100%"/>
		<s:Label text="Инициализация" includeIn="initialization"/>
		<s:HGroup width="100%" gap="5" includeIn="process" verticalAlign="baseline">
			<s:Label text="Режим"/>
			<s:DropDownList id="ddHelpMode" dataProvider="{new ArrayCollection(ClientVO.HELPER_MODES)}" 
							selectedIndex="{helpModeIdx}" change="ddHelpMode_changeHandler(event)" />
		</s:HGroup>
		<remote:ChatClientView includeIn="initialization,process" chatService="{chatService}" width="100%" height="100%"/>
		<s:VGroup includeIn="process" gap="5" width="100%">
			<itemRenderer:QueueManagerRenderer  data="{ftpManager.loader}" width="100%"/>
		</s:VGroup>
		<s:Group  includeIn="process" width="100%">
			<s:Rect radiusX="3" top="1" left="0" right="0" bottom="1">
				<s:stroke>
					<s:SolidColorStroke color="0" weight="1"/>
				</s:stroke>
			</s:Rect>
			<s:VGroup id="vPrepocess" gap="5" top="10" left="10" right="10" bottom="10">
				<s:Label includeIn="process"
						 text="{preprocessManager.isRunning?('Обработка заказ: '+preprocessManager.lastOrder.id):'Обработка ожидание'}"
						 fontWeight="bold"
						 />
				<mx:ProgressBar mode="event" source="{preprocessManager}" labelPlacement="top" width="{vPrepocess.width-10}"
								fontWeight="normal" labelWidth="{vPrepocess.width-30}"
								label="{preprocessManager.progressCaption} %1 из %2"/>
			</s:VGroup>
		</s:Group>
	</s:VGroup>
	<s:HGroup bottom="5" width="100%" gap="10" paddingRight="10" paddingLeft="10" verticalAlign="middle">
		<s:Image source="{BaseDAO.isBusy?'assets/database_green.png':'assets/database_grey.png'}" width="24" height="24" toolTip="Запись в базу данных"/>
		<s:Image source="{IMRuner.isRunning?'assets/imgProcRun.png':'assets/imgProc.png'}" width="24" height="24" toolTip="Обработка в IM"/>
		<s:Group width="5">
			<s:Label text="{BaseDAO.lastErrMsg}" color="#cc0000"/>
		</s:Group>
		<s:Spacer width="100%"/>
		<s:Button label="Настройки" includeIn="initialization,process" click="button2_clickHandler(event)"/>
		<s:Button label="Закрыть настройки" includeIn="config" click="{start()}"/>
		<s:Button label="Закрыть" click="button1_clickHandler(event)" />
	</s:HGroup>
</s:WindowedApplication>
