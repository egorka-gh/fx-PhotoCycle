/**
 * Generated by Gas3 v2.3.2 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (OrderStateService.as).
 */

package com.photodispatcher.model.mysql.services {

    import flash.utils.flash_proxy;
    import mx.rpc.AsyncToken;
    import org.granite.tide.BaseContext;
    import org.granite.tide.Component;
    import org.granite.tide.ITideResponder;
    
    use namespace flash_proxy;

    public class OrderStateServiceBase extends Component {    
        
        public function loadAll(resultHandler:Object = null, faultHandler:Function = null):AsyncToken {
            if (faultHandler != null)
                return callProperty("loadAll", resultHandler, faultHandler) as AsyncToken;
            else if (resultHandler is Function || resultHandler is ITideResponder)
                return callProperty("loadAll", resultHandler) as AsyncToken;
            else if (resultHandler == null)
                return callProperty("loadAll") as AsyncToken;
            else
                throw new Error("Illegal argument to remote call (last argument should be Function or ITideResponder): " + resultHandler);
        }    
        
        public function extraStateProlong(arg0:String, arg1:String, arg2:int, arg3:String, resultHandler:Object = null, faultHandler:Function = null):AsyncToken {
            if (faultHandler != null)
                return callProperty("extraStateProlong", arg0, arg1, arg2, arg3, resultHandler, faultHandler) as AsyncToken;
            else if (resultHandler is Function || resultHandler is ITideResponder)
                return callProperty("extraStateProlong", arg0, arg1, arg2, arg3, resultHandler) as AsyncToken;
            else if (resultHandler == null)
                return callProperty("extraStateProlong", arg0, arg1, arg2, arg3) as AsyncToken;
            else
                throw new Error("Illegal argument to remote call (last argument should be Function or ITideResponder): " + resultHandler);
        }    
        
        public function extraStateStart(arg0:String, arg1:String, arg2:int, resultHandler:Object = null, faultHandler:Function = null):AsyncToken {
            if (faultHandler != null)
                return callProperty("extraStateStart", arg0, arg1, arg2, resultHandler, faultHandler) as AsyncToken;
            else if (resultHandler is Function || resultHandler is ITideResponder)
                return callProperty("extraStateStart", arg0, arg1, arg2, resultHandler) as AsyncToken;
            else if (resultHandler == null)
                return callProperty("extraStateStart", arg0, arg1, arg2) as AsyncToken;
            else
                throw new Error("Illegal argument to remote call (last argument should be Function or ITideResponder): " + resultHandler);
        }    
        
        public function extraStateSet(arg0:String, arg1:String, arg2:int, resultHandler:Object = null, faultHandler:Function = null):AsyncToken {
            if (faultHandler != null)
                return callProperty("extraStateSet", arg0, arg1, arg2, resultHandler, faultHandler) as AsyncToken;
            else if (resultHandler is Function || resultHandler is ITideResponder)
                return callProperty("extraStateSet", arg0, arg1, arg2, resultHandler) as AsyncToken;
            else if (resultHandler == null)
                return callProperty("extraStateSet", arg0, arg1, arg2) as AsyncToken;
            else
                throw new Error("Illegal argument to remote call (last argument should be Function or ITideResponder): " + resultHandler);
        }    
        
        public function extraStateReset(arg0:String, arg1:String, arg2:int, resultHandler:Object = null, faultHandler:Function = null):AsyncToken {
            if (faultHandler != null)
                return callProperty("extraStateReset", arg0, arg1, arg2, resultHandler, faultHandler) as AsyncToken;
            else if (resultHandler is Function || resultHandler is ITideResponder)
                return callProperty("extraStateReset", arg0, arg1, arg2, resultHandler) as AsyncToken;
            else if (resultHandler == null)
                return callProperty("extraStateReset", arg0, arg1, arg2) as AsyncToken;
            else
                throw new Error("Illegal argument to remote call (last argument should be Function or ITideResponder): " + resultHandler);
        }
    }
}
