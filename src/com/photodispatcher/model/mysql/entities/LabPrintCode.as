/**
 * Generated by Gas3 v2.3.2 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.photodispatcher.model.mysql.entities {
	import com.photodispatcher.model.mysql.DbLatch;
	import com.photodispatcher.model.mysql.services.LabService;
	import com.photodispatcher.util.GridUtil;
	import com.photodispatcher.view.itemRenderer.BooleanGridItemEditor;
	import com.photodispatcher.view.itemRenderer.CBoxGridItemEditor;
	
	import flash.events.Event;
	
	import mx.collections.ArrayList;
	import mx.core.ClassFactory;
	
	import org.granite.tide.Tide;
	
	import spark.components.gridClasses.GridColumn;
	
	[Bindable]
	[RemoteClass(alias="com.photodispatcher.model.mysql.entities.LabPrintCode")]
	public class LabPrintCode extends LabPrintCodeBase {
		
		private static var chanelMap:Object;
		
		public static function initChanelMap():DbLatch{
			var service:LabService=Tide.getInstance().getContext().byType(LabService,true) as LabService;
			var latch:DbLatch= new DbLatch();
			latch.debugName='LabPrintCode.initChanelMap';
			latch.addEventListener(Event.COMPLETE, onLoad);
			latch.addLatch(service.loadPrintCode(-1));
			latch.start();
			return latch;
		}
		private static function onLoad(event:Event):void{
			var latch:DbLatch= event.target as DbLatch;
			if(latch){
				latch.removeEventListener(Event.COMPLETE,onLoad);
				if(latch.complite){
					var a:Array=latch.lastDataArr;
					if(!a) return;
					
					var newMap:Object=new Object();
					var chanels:Array;
					var item:LabPrintCode;
					for each(item in a){
						if(item){
							chanels=newMap[item.src_type.toString()] as Array;
							if(!chanels){
								chanels=[];
								newMap[item.src_type.toString()]=chanels;
							}
							chanels.push(item);
						}
					}
					chanelMap=newMap;
				}
			}
		}
		
		public static function getChanels(src_type:int):Array{
			if(!chanelMap){
				throw new Error('Ошибка инициализации LabPrintCode.initChanelMap',OrderState.ERR_APP_INIT);
				return;
			}
			return chanelMap[src_type.toString()] as Array;
		}
		
		
		public static function gridColumns(labType:int=3):ArrayList{
			var result:ArrayList= new ArrayList();
			var col:GridColumn;
			var visible:Boolean=labType!=SourceType.LAB_NORITSU_NHF;
			col= new GridColumn('prt_code'); col.headerText='Канал'; col.visible=visible && labType!=SourceType.LAB_PLOTTER; result.addItem(col);
			//var fmt:DateTimeFormatter=new DateTimeFormatter(); fmt.dateStyle=fmt.timeStyle=DateTimeStyle.SHORT; 
			col= new GridColumn('width'); col.headerText='Ширина'; result.addItem(col);
			col= new GridColumn('height'); col.headerText='Длина'; result.addItem(col);
			
			col= new GridColumn('roll'); col.headerText='Рулон'; col.itemEditor=new ClassFactory(CBoxGridItemEditor); col.visible=labType!=SourceType.LAB_PLOTTER && labType!=SourceType.LAB_XEROX && labType!=SourceType.LAB_XEROX_LONG; result.addItem(col);
			col= new GridColumn('paper'); col.headerText='Бумага'; col.labelFunction=GridUtil.idToLabel; col.itemEditor=new ClassFactory(CBoxGridItemEditor); col.visible=visible; result.addItem(col);
			
			visible= visible && labType!=SourceType.LAB_PLOTTER;
			col= new GridColumn('is_duplex'); col.headerText='Duplex'; col.labelFunction=GridUtil.booleanToLabel; col.itemEditor=new ClassFactory(BooleanGridItemEditor); col.visible= visible && (labType==SourceType.LAB_XEROX || labType==SourceType.LAB_XEROX_LONG); result.addItem(col);
			
			visible= visible && labType!=SourceType.LAB_XEROX && labType!=SourceType.LAB_XEROX_LONG;
			col= new GridColumn('frame'); col.headerText='Рамка'; col.labelFunction=GridUtil.idToLabel; col.itemEditor=new ClassFactory(CBoxGridItemEditor); col.visible=visible; result.addItem(col);
			
			visible= visible && labType!=SourceType.LAB_FUJI;
			col= new GridColumn('correction'); col.headerText='Коррекция'; col.labelFunction=GridUtil.idToLabel; col.itemEditor=new ClassFactory(CBoxGridItemEditor); col.visible=visible; result.addItem(col);
			col= new GridColumn('cutting'); col.headerText='Обрезка'; col.labelFunction=GridUtil.idToLabel; col.itemEditor=new ClassFactory(CBoxGridItemEditor); col.visible=visible; result.addItem(col);
			return result;
		}
		
		
		public function key(srcType:int=3,fullness:int=0):String{
			var sizeKey:String;
			switch(fullness){
				case 1:
					//no height 
					sizeKey=width.toString()+'_h'; 
					break;
				case 2:
					//no size at all 
					sizeKey='w_h'; 
					break;
				default:
					//full
					sizeKey=width.toString()+'_'+height.toString(); 
			}
			var result:String;
			switch(srcType){
				case SourceType.LAB_FUJI:
					//SourceType.LAB_FUJI - short key, exlude correction & cutting 
					result=sizeKey+'_'+paper.toString()+'_'+frame.toString(); 
					break;
				case SourceType.LAB_PLOTTER:
					//SourceType.LAB_PLOTTER - short key, exlude correction, cutting & frame 
					result=sizeKey+'_'+paper.toString(); 
					break;
				case SourceType.LAB_XEROX_LONG:
				case SourceType.LAB_XEROX:
					//SourceType.LAB_XEROX - short key, include w/h/pape/duplex
					result=sizeKey+'_'+paper.toString()+'_'+is_duplex.toString(); 
					break;
				case SourceType.LAB_NORITSU_NHF:
					//include w/h
					result=sizeKey; 
					break;
				default:
					//full key (SourceType.LAB_NORITSU or any)
					result=sizeKey+'_'+paper.toString()+'_'+frame.toString()+'_'+correction.toString()+'_'+cutting.toString(); 
					break;
			}
			return result;
		}
		
		public function clone():LabPrintCode{
			var result:LabPrintCode= new LabPrintCode();
			result.src_type=src_type;
			result.src_id=src_id;
			result.prt_code=prt_code;
			result.width=width;
			result.height=height;
			result.paper=paper;
			result.frame=frame;
			result.correction=correction;
			result.cutting=cutting;
			result.is_duplex=is_duplex;
			result.is_pdf=is_pdf;
			result.roll=roll;
			result.paper_name=paper_name;
			result.frame_name=frame_name;
			result.correction_name=correction_name;
			result.cutting_name=cutting_name;
			return result; 
		}
		
	}
}