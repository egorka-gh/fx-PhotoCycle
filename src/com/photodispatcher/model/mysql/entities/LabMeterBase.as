/**
 * Generated by Gas3 v3.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (LabMeter.as).
 */

package com.photodispatcher.model.mysql.entities {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import org.granite.tide.IPropertyHolder;

    [Bindable]
    public class LabMeterBase extends AbstractEntity {

        public function LabMeterBase() {
            super();
        }

        private var _amt:int;
        private var _lab:int;
        private var _lab_device:int;
        private var _last_time:Date;
        private var _meter_type:int;
        private var _print_group:String;
        private var _server_time:Date;
        private var _start_time:Date;
        private var _state:int;

        public function set amt(value:int):void {
            _amt = value;
        }
        public function get amt():int {
            return _amt;
        }

        public function set lab(value:int):void {
            _lab = value;
        }
        public function get lab():int {
            return _lab;
        }

        public function set lab_device(value:int):void {
            _lab_device = value;
        }
        public function get lab_device():int {
            return _lab_device;
        }

        public function set last_time(value:Date):void {
            _last_time = value;
        }
        public function get last_time():Date {
            return _last_time;
        }

        public function set meter_type(value:int):void {
            _meter_type = value;
        }
        public function get meter_type():int {
            return _meter_type;
        }

        public function set print_group(value:String):void {
            _print_group = value;
        }
        public function get print_group():String {
            return _print_group;
        }

        public function set server_time(value:Date):void {
            _server_time = value;
        }
        public function get server_time():Date {
            return _server_time;
        }

        public function set start_time(value:Date):void {
            _start_time = value;
        }
        public function get start_time():Date {
            return _start_time;
        }

        public function set state(value:int):void {
            _state = value;
        }
        public function get state():int {
            return _state;
        }

        public override function readExternal(input:IDataInput):void {
            super.readExternal(input);
            _amt = input.readObject() as int;
            _lab = input.readObject() as int;
            _lab_device = input.readObject() as int;
            _last_time = input.readObject() as Date;
            _meter_type = input.readObject() as int;
            _print_group = input.readObject() as String;
            _server_time = input.readObject() as Date;
            _start_time = input.readObject() as Date;
            _state = input.readObject() as int;
        }

        public override function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            output.writeObject((_amt is IPropertyHolder) ? IPropertyHolder(_amt).object : _amt);
            output.writeObject((_lab is IPropertyHolder) ? IPropertyHolder(_lab).object : _lab);
            output.writeObject((_lab_device is IPropertyHolder) ? IPropertyHolder(_lab_device).object : _lab_device);
            output.writeObject((_last_time is IPropertyHolder) ? IPropertyHolder(_last_time).object : _last_time);
            output.writeObject((_meter_type is IPropertyHolder) ? IPropertyHolder(_meter_type).object : _meter_type);
            output.writeObject((_print_group is IPropertyHolder) ? IPropertyHolder(_print_group).object : _print_group);
            output.writeObject((_server_time is IPropertyHolder) ? IPropertyHolder(_server_time).object : _server_time);
            output.writeObject((_start_time is IPropertyHolder) ? IPropertyHolder(_start_time).object : _start_time);
            output.writeObject((_state is IPropertyHolder) ? IPropertyHolder(_state).object : _state);
        }
    }
}