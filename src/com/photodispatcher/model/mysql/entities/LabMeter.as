/**
 * Generated by Gas3 v3.1.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.photodispatcher.model.mysql.entities {
	
	import flash.globalization.DateTimeStyle;
	
	import mx.utils.StringUtil;
	
	import org.granite.reflect.Field;
	import org.granite.reflect.Type;
	
	import spark.formatters.DateTimeFormatter;

    [Bindable]
    [RemoteClass(alias="com.photodispatcher.model.mysql.entities.LabMeter")]
    public class LabMeter extends LabMeterBase {
		public static const TYPE_POST:int = 0;
		public static const TYPE_PRINT:int = 1;
		public static const TYPE_STOP:int = 10;

        public function LabMeter() {
            super();
        }
		
		public var isInLocalTime:Boolean;
		public var timeOffset:Number=0;
		
		public function toLocalTime(localTime:Date):void{
			if(isInLocalTime || !server_time || !localTime) return;
			timeOffset= localTime.time-server_time.time;
			if(start_time) start_time=new Date(start_time.time+timeOffset); 
			if(last_time) last_time=new Date(last_time.time+timeOffset);
			isInLocalTime=true;
		}

		public function toServerTime():void{
			if(!isInLocalTime || !timeOffset) return;
			if(start_time) start_time=new Date(start_time.time-timeOffset); 
			if(last_time) last_time=new Date(last_time.time-timeOffset);
			isInLocalTime=false;
		}

		public function toString():String {
			var fmt:DateTimeFormatter = new DateTimeFormatter(); 
			fmt.dateStyle=fmt.timeStyle=DateTimeStyle.SHORT;
			fmt.setStyle('locale', 'ru_RU');
			var stateName:String;
			if(meter_type==10){
				stateName=LabStopType.getStopTypeName(this.state);
			}else{
				stateName=OrderState.getStateName(this.state);
			}
			return StringUtil.substitute("{0} c {1}",  stateName, fmt.format(this.getLastTime()));
		}

		
		/*
		* true if this is older or than is null
		*/
		public function isOlder(than:LabMeter):Boolean{
			if(!than) return true;
			var thisTime:Date=getLastTime();
			var compTime:Date=than.getLastTime();
			if(!thisTime) return false;
			if(!compTime) return true;
			return thisTime.time<compTime.time;
		}

		/*
		* true if this is newer or than is null
		*/
		public function isNewer(than:LabMeter):Boolean{
			if(!than) return true;
			var thisTime:Date=getLastTime();
			var compTime:Date=than.getLastTime();
			if(!thisTime) return false;
			if(!compTime) return true;
			return thisTime.time>compTime.time;
		}

		/*
		* true if this is older or = time or this time =null (device never run)
		*/
		public function isBefore(time:Date):Boolean{
			if(!time) return false;
			var thisTime:Date=getLastTime();
			if(!thisTime) return true;
			return thisTime.time<=time.time;
		}
		/*
		* true if this is newer or = time or time==null  
		*/
		public function isAfter(time:Date):Boolean{
			if(!time) return true;
			var thisTime:Date=getLastTime();
			if(!thisTime) return false;
			return thisTime.time>=time.time;
		}
		
		public function getLastTime():Date{
			return last_time?last_time:start_time;
		}

		public function clone():LabMeter{
			var res:LabMeter=new LabMeter();
			var type:Type=Type.forClass(LabMeter);
			var props:Array=type.properties;
			if(!props || props.length==0) return res;
			var prop:Field;
			for each(prop in props){
				res[prop.name]=this[prop.name];
			}
			//reset
			if(res.last_time){
				res.start_time=res.last_time;
				res.last_time=null;
			}
			res.amt=0;
			
			return res;
		}

	}
}