/**
 * Generated by Gas3 v3.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (LabStopLog.as).
 */

package com.photodispatcher.model.mysql.entities {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import org.granite.tide.IPropertyHolder;

    [Bindable]
    public class LabStopLogBase extends AbstractEntity {

        public function LabStopLogBase() {
            super();
        }

        private var _id:int;
        private var _lab:int;
        private var _lab_device:int;
        private var _lab_stop_type:int;
        private var _lab_stop_type_name:String;
        private var _log_comment:String;
        private var _time_created:Date;
        private var _time_from:Date;
        private var _time_to:Date;
        private var _time_updated:Date;

        public function set id(value:int):void {
            _id = value;
        }
        public function get id():int {
            return _id;
        }

        public function set lab(value:int):void {
            _lab = value;
        }
        public function get lab():int {
            return _lab;
        }

        public function set lab_device(value:int):void {
            _lab_device = value;
        }
        public function get lab_device():int {
            return _lab_device;
        }

        public function set lab_stop_type(value:int):void {
            _lab_stop_type = value;
        }
        public function get lab_stop_type():int {
            return _lab_stop_type;
        }

        public function set lab_stop_type_name(value:String):void {
            _lab_stop_type_name = value;
        }
        public function get lab_stop_type_name():String {
            return _lab_stop_type_name;
        }

        public function set log_comment(value:String):void {
            _log_comment = value;
        }
        public function get log_comment():String {
            return _log_comment;
        }

        public function set time_created(value:Date):void {
            _time_created = value;
        }
        public function get time_created():Date {
            return _time_created;
        }

        public function set time_from(value:Date):void {
            _time_from = value;
        }
        public function get time_from():Date {
            return _time_from;
        }

        public function set time_to(value:Date):void {
            _time_to = value;
        }
        public function get time_to():Date {
            return _time_to;
        }

        public function set time_updated(value:Date):void {
            _time_updated = value;
        }
        public function get time_updated():Date {
            return _time_updated;
        }

        public override function readExternal(input:IDataInput):void {
            super.readExternal(input);
            _id = input.readObject() as int;
            _lab = input.readObject() as int;
            _lab_device = input.readObject() as int;
            _lab_stop_type = input.readObject() as int;
            _lab_stop_type_name = input.readObject() as String;
            _log_comment = input.readObject() as String;
            _time_created = input.readObject() as Date;
            _time_from = input.readObject() as Date;
            _time_to = input.readObject() as Date;
            _time_updated = input.readObject() as Date;
        }

        public override function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id);
            output.writeObject((_lab is IPropertyHolder) ? IPropertyHolder(_lab).object : _lab);
            output.writeObject((_lab_device is IPropertyHolder) ? IPropertyHolder(_lab_device).object : _lab_device);
            output.writeObject((_lab_stop_type is IPropertyHolder) ? IPropertyHolder(_lab_stop_type).object : _lab_stop_type);
            output.writeObject((_lab_stop_type_name is IPropertyHolder) ? IPropertyHolder(_lab_stop_type_name).object : _lab_stop_type_name);
            output.writeObject((_log_comment is IPropertyHolder) ? IPropertyHolder(_log_comment).object : _log_comment);
            output.writeObject((_time_created is IPropertyHolder) ? IPropertyHolder(_time_created).object : _time_created);
            output.writeObject((_time_from is IPropertyHolder) ? IPropertyHolder(_time_from).object : _time_from);
            output.writeObject((_time_to is IPropertyHolder) ? IPropertyHolder(_time_to).object : _time_to);
            output.writeObject((_time_updated is IPropertyHolder) ? IPropertyHolder(_time_updated).object : _time_updated);
        }
    }
}