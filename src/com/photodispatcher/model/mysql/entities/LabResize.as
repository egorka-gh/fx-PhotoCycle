/**
 * Generated by Gas3 v2.3.2 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.photodispatcher.model.mysql.entities {
	import com.photodispatcher.model.mysql.DbLatch;
	import com.photodispatcher.model.mysql.services.LabResizeService;
	
	import flash.events.Event;
	
	import mx.collections.ArrayList;
	
	import org.granite.tide.Tide;
	
	import spark.components.gridClasses.GridColumn;

    [Bindable]
    [RemoteClass(alias="com.photodispatcher.model.mysql.entities.LabResize")]
    public class LabResize extends LabResizeBase {

		private static var sizeMap:Object;

		public static function gridColumns():ArrayList{
			var result:ArrayList= new ArrayList();
			var col:GridColumn;
			col= new GridColumn('width'); col.headerText='Размер (мм)'; col.width=100; result.addItem(col);
			col= new GridColumn('pixels'); col.headerText='Ресайз (pcx)'; result.addItem(col);
			return result;
		}
		
		public static function getSizeLimit(size:int):int{
			var sl:LabResize;
			if(!sizeMap) initSizeMap();
			if(sizeMap) sl=sizeMap[size.toString()] as LabResize;
			return sl?sl.pixels:0;
		}
		
		public static function initSizeMap():DbLatch{
			var svc:LabResizeService=Tide.getInstance().getContext().byType(LabResizeService,true) as LabResizeService;
			var latch:DbLatch= new DbLatch();
			latch.addEventListener(Event.COMPLETE, onLoad);
			latch.addLatch(svc.loadAll());
			latch.start();
			return latch;
		}
		
		private static function onLoad(event:Event):void{
			var latch:DbLatch= event.target as DbLatch;
			if(latch){
				latch.removeEventListener(Event.COMPLETE,onLoad);
				if(latch.complite){
					var a:Array=latch.lastDataArr;
					if(!a) return;
					sizeMap=new Object();
					for each(var o:Object in a){
						var s:LabResize= o as LabResize;
						if(s){
							sizeMap[s.width.toString()]=s;
						}
					}
				}
			}
		}

    }
}