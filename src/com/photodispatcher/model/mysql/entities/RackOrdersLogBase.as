/**
 * Generated by Gas3 v3.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (RackOrdersLog.as).
 */

package com.photodispatcher.model.mysql.entities {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import org.granite.tide.IPropertyHolder;

    [Bindable]
    public class RackOrdersLogBase extends AbstractEntity {

        public function RackOrdersLogBase() {
            super();
        }

        private var _event_time:Date;
        private var _name:String;
        private var _order_id:String;
        private var _rack_name:String;
        private var _rowId:int;

        public function set event_time(value:Date):void {
            _event_time = value;
        }
        public function get event_time():Date {
            return _event_time;
        }

        public function set name(value:String):void {
            _name = value;
        }
        public function get name():String {
            return _name;
        }

        public function set order_id(value:String):void {
            _order_id = value;
        }
        public function get order_id():String {
            return _order_id;
        }

        public function set rack_name(value:String):void {
            _rack_name = value;
        }
        public function get rack_name():String {
            return _rack_name;
        }

        public function set rowId(value:int):void {
            _rowId = value;
        }
        public function get rowId():int {
            return _rowId;
        }

        public override function readExternal(input:IDataInput):void {
            super.readExternal(input);
            _event_time = input.readObject() as Date;
            _name = input.readObject() as String;
            _order_id = input.readObject() as String;
            _rack_name = input.readObject() as String;
            _rowId = input.readObject() as int;
        }

        public override function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            output.writeObject((_event_time is IPropertyHolder) ? IPropertyHolder(_event_time).object : _event_time);
            output.writeObject((_name is IPropertyHolder) ? IPropertyHolder(_name).object : _name);
            output.writeObject((_order_id is IPropertyHolder) ? IPropertyHolder(_order_id).object : _order_id);
            output.writeObject((_rack_name is IPropertyHolder) ? IPropertyHolder(_rack_name).object : _rack_name);
            output.writeObject((_rowId is IPropertyHolder) ? IPropertyHolder(_rowId).object : _rowId);
        }
    }
}