/**
 * Generated by Gas3 v3.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (Lab.as).
 */

package com.photodispatcher.model.mysql.entities {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import mx.collections.ListCollectionView;
    import org.granite.tide.IPropertyHolder;

    [Bindable]
    public class LabBase extends AbstractEntity {

        public function LabBase() {
            super();
        }

        private var _devices:ListCollectionView;
        private var _hot:String;
        private var _hot_nfs:String;
        private var _id:int;
        private var _isSelected:Boolean;
        private var _is_active:Boolean;
        private var _is_managed:Boolean;
        private var _name:String;
        private var _profiles:ListCollectionView;
        private var _queue_limit:int;
        private var _soft_speed:int;
        private var _src_type:int;
        private var _src_type_name:String;

        public function set devices(value:ListCollectionView):void {
            _devices = value;
        }
        public function get devices():ListCollectionView {
            return _devices;
        }

        public function set hot(value:String):void {
            _hot = value;
        }
        public function get hot():String {
            return _hot;
        }

        public function set hot_nfs(value:String):void {
            _hot_nfs = value;
        }
        public function get hot_nfs():String {
            return _hot_nfs;
        }

        public function set id(value:int):void {
            _id = value;
        }
        public function get id():int {
            return _id;
        }

        public function set is_active(value:Boolean):void {
            _is_active = value;
        }
        public function get is_active():Boolean {
            return _is_active;
        }

        public function set is_managed(value:Boolean):void {
            _is_managed = value;
        }
        public function get is_managed():Boolean {
            return _is_managed;
        }

        public function set name(value:String):void {
            _name = value;
        }
        public function get name():String {
            return _name;
        }

        public function set profiles(value:ListCollectionView):void {
            _profiles = value;
        }
        public function get profiles():ListCollectionView {
            return _profiles;
        }

        public function set queue_limit(value:int):void {
            _queue_limit = value;
        }
        public function get queue_limit():int {
            return _queue_limit;
        }

        public function set soft_speed(value:int):void {
            _soft_speed = value;
        }
        public function get soft_speed():int {
            return _soft_speed;
        }

        public function set src_type(value:int):void {
            _src_type = value;
        }
        public function get src_type():int {
            return _src_type;
        }

        public function set src_type_name(value:String):void {
            _src_type_name = value;
        }
        public function get src_type_name():String {
            return _src_type_name;
        }

        public override function readExternal(input:IDataInput):void {
            super.readExternal(input);
            _devices = input.readObject() as ListCollectionView;
            _hot = input.readObject() as String;
            _hot_nfs = input.readObject() as String;
            _id = input.readObject() as int;
            _isSelected = input.readObject() as Boolean;
            _is_active = input.readObject() as Boolean;
            _is_managed = input.readObject() as Boolean;
            _name = input.readObject() as String;
            _profiles = input.readObject() as ListCollectionView;
            _queue_limit = input.readObject() as int;
            _soft_speed = input.readObject() as int;
            _src_type = input.readObject() as int;
            _src_type_name = input.readObject() as String;
        }

        public override function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            output.writeObject((_devices is IPropertyHolder) ? IPropertyHolder(_devices).object : _devices);
            output.writeObject((_hot is IPropertyHolder) ? IPropertyHolder(_hot).object : _hot);
            output.writeObject((_hot_nfs is IPropertyHolder) ? IPropertyHolder(_hot_nfs).object : _hot_nfs);
            output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id);
            output.writeObject((_isSelected is IPropertyHolder) ? IPropertyHolder(_isSelected).object : _isSelected);
            output.writeObject((_is_active is IPropertyHolder) ? IPropertyHolder(_is_active).object : _is_active);
            output.writeObject((_is_managed is IPropertyHolder) ? IPropertyHolder(_is_managed).object : _is_managed);
            output.writeObject((_name is IPropertyHolder) ? IPropertyHolder(_name).object : _name);
            output.writeObject((_profiles is IPropertyHolder) ? IPropertyHolder(_profiles).object : _profiles);
            output.writeObject((_queue_limit is IPropertyHolder) ? IPropertyHolder(_queue_limit).object : _queue_limit);
            output.writeObject((_soft_speed is IPropertyHolder) ? IPropertyHolder(_soft_speed).object : _soft_speed);
            output.writeObject((_src_type is IPropertyHolder) ? IPropertyHolder(_src_type).object : _src_type);
            output.writeObject((_src_type_name is IPropertyHolder) ? IPropertyHolder(_src_type_name).object : _src_type_name);
        }
    }
}