/**
 * Generated by Gas3 v3.1.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.photodispatcher.model.mysql.entities.messenger {
	import com.photodispatcher.service.messenger.MessengerGeneric;
	import com.photodispatcher.view.itemRenderer.StationStateGridIR;
	
	import flash.events.TimerEvent;
	import flash.globalization.DateTimeStyle;
	import flash.utils.Timer;
	
	import mx.collections.ArrayList;
	import mx.core.ClassFactory;
	
	import spark.components.gridClasses.GridColumn;
	import spark.formatters.DateTimeFormatter;

    [Bindable]
    [RemoteClass(alias="com.photodispatcher.model.mysql.entities.messenger.CycleStation")]
    public class CycleStation extends CycleStationBase {
		
		public static const SATE_OFF:int=0;
		public static const SATE_PAUSE:int=50;
		public static const SATE_ON:int=100;
		
		public static const TYPE_CYCLE:int=10;
		public static const TYPE_HELPER:int=15;
		public static const TYPE_LAB:int=20;
		public static const TYPE_OTK:int=30;
		public static const TYPE_REPRINT:int=40;
		public static const TYPE_TECH:int=50;
		public static const TYPE_GLUE:int=60;

		public static function getTypeName(type:int):String{
			var result:String;
			switch(type){
				case TYPE_CYCLE:
					result='Cycle'; break;
				case TYPE_HELPER:
					result='CycleP'; break;
				case TYPE_LAB:
					result='Лаба'; break;
				case TYPE_OTK:
					result='ОТК'; break;
				case TYPE_REPRINT:
					result='Перепечатка'; break;
				case TYPE_TECH:
					result='Теч'; break;
				case TYPE_GLUE:
					result='Склейка'; break;
				default:
					result=type.toString(); break;
					break;
			}
			return result;
		}
		
		public static function gridColumns():ArrayList{
			var result:ArrayList= new ArrayList();
			var col:GridColumn;

			col= new GridColumn('state'); col.headerText=''; col.width=30; col.itemRenderer=new ClassFactory(StationStateGridIR); result.addItem(col);
			col= new GridColumn('type_name'); col.headerText='Тип'; result.addItem(col);
			col= new GridColumn('id'); col.headerText='ID'; result.addItem(col);
			col= new GridColumn('name'); col.headerText='Наименование'; result.addItem(col); 
			var fmt:DateTimeFormatter=new DateTimeFormatter(); fmt.dateTimePattern='dd HH:mm:ss'; //fmt.dateStyle=fmt.timeStyle=DateTimeStyle.SHORT;  
			col= new GridColumn('lastPing'); col.headerText='Ping'; col.formatter=fmt;  result.addItem(col);
			col= new GridColumn('stateComment'); col.headerText='Коментарий'; result.addItem(col); 
			return result;
		}

		
        public function CycleStation() {
            super();
        }
		
		public var isOnLine:Boolean;

		public var stateComment:String;
		
		private var _lastPing:Date;
		public function get lastPing():Date{
			return _lastPing;
		}
		public function set lastPing(value:Date):void{
			_lastPing = value;
			isOnLine=true;
			if(state==SATE_OFF){
				state=SATE_ON;
				stateComment='';
			}
			startIdleTimer();
		}
		
		private var timer:Timer;
		private function startIdleTimer():void{
			if(timer){
				timer.reset();
			}else{
				timer=new Timer(MessengerGeneric.PING_INTERVAL+1*60*1000,1);
				timer.addEventListener(TimerEvent.TIMER,onIdleTimer);
			}
			timer.start();
		}
		private function onIdleTimer(e:TimerEvent):void{
			isOnLine=false;
			state=SATE_OFF;
		}

		public function setType(value:int, subvalue:int=0):void{
			//adds type to id
			if(!this.type && value){
				id=id+':t'+value;
			}
			this.type=value;
			if(value) type_name=getTypeName(value);
			subtype=subvalue;
		}
    }
}