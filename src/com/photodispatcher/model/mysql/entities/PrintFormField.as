/**
 * Generated by Gas3 v3.1.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.photodispatcher.model.mysql.entities {
	import com.photodispatcher.model.mysql.DbLatch;
	import com.photodispatcher.model.mysql.services.XReportService;
	
	import flash.events.Event;
	
	import flashx.textLayout.elements.BreakElement;
	
	import org.granite.tide.Tide;

    [Bindable]
    [RemoteClass(alias="com.photodispatcher.model.mysql.entities.PrintFormField")]
    public class PrintFormField extends PrintFormFieldBase {

		public static const FIELD_FIO:int=1;
		public static const FIELD_PASS_NUM:int=2;
		public static const FIELD_PASS_INFO:int=3;
		public static const FIELD_CITY:int=4;
		public static const FIELD_PHONE:int=5;

		public static const FIELD_CLIENT_ID:int=6;
		public static const FIELD_DELIVERY_NAME:int=7;
		public static const FIELD_EXECUTION_DATE:int=8;
		public static const FIELD_ID:int=9;
		public static const FIELD_ID_NAME:int=10;
		public static const FIELD_SOURCE_NAME:int=11;
		public static const FIELD_SOURCE_CODE:int=12;
		public static const FIELD_ORDERS_NUM:int=13;
		public static const FIELD_AT_TO_DOOR:int=17;
		public static const FIELD_FULL_ADR:int=18;
		public static const FIELD_DEBET_SUM:int=19;
		public static const FIELD_COMMENT:int=20;
		
		private static var fieldItemsMap:Object;
		
		public static function initFieldItemsMap():DbLatch{
			var service:XReportService=Tide.getInstance().getContext().byType(XReportService,true) as XReportService;
			var latch:DbLatch= new DbLatch();
			latch.addEventListener(Event.COMPLETE, onLoad);
			latch.addLatch(service.getPrintFormFieldItems());
			latch.start();
			return latch;
		}
		private static function onLoad(event:Event):void{
			var latch:DbLatch= event.target as DbLatch;
			if(latch){
				latch.removeEventListener(Event.COMPLETE,onLoad);
				if(latch.complite){
					var a:Array=latch.lastDataArr;
					if(!a) return;
					var newMap:Object=new Object();
					var items:Array;
					var it:PrintFormFieldItem;
					for each(it in a){
						if(it){
							//add to synonym map
							items=newMap[it.form_field] as Array;
							if(!items){
								items=[];
								newMap[it.form_field]=items;
							}
							items.push(it);
						}
					}
					fieldItemsMap=newMap;
				}
			}
		}

		public static function buildField(fieldId:int, params:Array):String{
			var result:String='';
			if(!fieldItemsMap){
				throw new Error('Ошибка инициализации PrintFormField.fieldItemsMap',OrderState.ERR_APP_INIT);
				return result;
			}
			if(fieldId==0 || !params || params.length==0) return result;
			var items:Array=fieldItemsMap[fieldId] as Array;
			if(!items) return result;
			var item:PrintFormFieldItem;
			//var delemiter:String='';
			var itemValue:String='';
			for each(item in items){
				if(item){
					itemValue='';
					if(item.is_field){
						itemValue=buildField(item.child_field,params);
					}else{
						var param:MailPackageProperty;
						if(item.property){
							for each(param in params){
								if(param && param.property && param.property==item.property){
									itemValue=param.value;
									break;
								}
							}
						}
					}
					if(itemValue){
						if(item.delemiter && result) result+=item.delemiter;
						if(item.prefix) result+=item.prefix;
						result+=itemValue;
						if(item.sufix) result+=item.sufix;
					}
				}
			}

			return result;
		}


        public function PrintFormField() {
            super();
        }
    }
}