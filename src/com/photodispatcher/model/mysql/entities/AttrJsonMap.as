/**
 * Generated by Gas3 v2.3.2 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.photodispatcher.model.mysql.entities {
	import com.photodispatcher.model.mysql.DbLatch;
	import com.photodispatcher.model.mysql.services.DictionaryService;
	
	import flash.events.Event;
	
	import org.granite.tide.Tide;

    [Bindable]
    [RemoteClass(alias="com.photodispatcher.model.mysql.entities.AttrJsonMap")]
    public class AttrJsonMap extends AttrJsonMapBase {
		

		
		private static var baseJsonMap:Object;
		private static var extraJsonMap:Object;
		private static var soMap:Object; 
		
		public static function initJsonMap():DbLatch{
			var service:DictionaryService=Tide.getInstance().getContext().byType(DictionaryService,true) as DictionaryService;
			var latch:DbLatch= new DbLatch();
			
			var baseLatch:DbLatch= new DbLatch();
			baseLatch.addEventListener(Event.COMPLETE, onLoad);
			baseLatch.addLatch(service.getOrderJsonAttr(AttrType.FAMILY_ORDER),'base');
			baseLatch.start();
			latch.join(baseLatch);

			var extraLatch:DbLatch= new DbLatch();
			extraLatch.addEventListener(Event.COMPLETE, onLoad);
			extraLatch.addLatch(service.getOrderJsonAttr(AttrType.FAMILY_ORDER_EXTRA),'extra');
			extraLatch.start();
			latch.join(extraLatch);

			var soLatch:DbLatch= new DbLatch();
			soLatch.addEventListener(Event.COMPLETE, onLoad);
			soLatch.addLatch(service.getOrderJsonAttr(AttrType.FAMILY_SUBORDER),'suborder');
			soLatch.start();
			latch.join(soLatch);

			
			latch.start();
			return latch;
		}
		private static function onLoad(event:Event):void{
			var latch:DbLatch= event.target as DbLatch;
			if(latch){
				latch.removeEventListener(Event.COMPLETE,onLoad);
				if(latch.complite){
					var a:Array=latch.lastDataArr;
					if(!a) return;
					
					var newMap:Object=new Object();
					var attrs:Array;
					var item:AttrJsonMap;
					for each(item in a){
						attrs=newMap[item.src_type.toString()] as Array;
						if(!attrs){
							attrs=[];
							newMap[item.src_type.toString()]=attrs;
						}
						attrs.push(item);
					}
					if(latch.lastToken.tag=='base'){
						baseJsonMap=newMap;
					}else if(latch.lastToken.tag=='extra'){
						extraJsonMap=newMap;
					}else if(latch.lastToken.tag=='suborder'){
						soMap=newMap;
					}
				}
			}
		}

		public static function getOrderJson(sourceType:int):Array{
			if(!baseJsonMap){
				throw new Error('Ошибка инициализации AttrJsonMap.initJsonMap',OrderState.ERR_APP_INIT);
				return;
			}
			return baseJsonMap[sourceType.toString()] as Array;
		}

		public static function getSubOrderJson(sourceType:int):Array{
			if(!soMap){
				throw new Error('Ошибка инициализации AttrJsonMap.initJsonMap',OrderState.ERR_APP_INIT);
				return;
			}
			return soMap[sourceType.toString()] as Array;
		}

		public static function getOrderExtraJson(sourceType:int):Array{
			if(!extraJsonMap){
				throw new Error('Ошибка инициализации AttrJsonMap.initJsonMap',OrderState.ERR_APP_INIT);
				return;
			}
			return extraJsonMap[sourceType.toString()] as Array;
		}

    }
}