/**
 * Generated by Gas3 v3.1.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.photodispatcher.model.mysql.entities {
	import flash.globalization.DateTimeStyle;
	
	import mx.collections.ArrayCollection;
	import mx.collections.ArrayList;
	
	import org.granite.reflect.Field;
	import org.granite.reflect.Type;
	
	import spark.components.gridClasses.GridColumn;
	import spark.formatters.DateTimeFormatter;

    [Bindable]
    [RemoteClass(alias="com.photodispatcher.model.mysql.entities.OrderLoad")]
    public class OrderLoad extends OrderLoadBase {

		public static const REMOTE_STATE_NONE:int=0;
		public static const REMOTE_STATE_READY:int=10;
		public static const REMOTE_STATE_COPY:int=20;
		public static const REMOTE_STATE_ERROR:int=25;
		public static const REMOTE_STATE_DONE:int=30;

		
		public static function gridColumns():ArrayList{
			var result:ArrayList= new ArrayList();
			
			var col:GridColumn= new GridColumn('source_name');
			col.headerText='Источник'; result.addItem(col);
			col= new GridColumn('id'); result.addItem(col);
			col= new GridColumn('state_name'); col.headerText='Статус'; result.addItem(col); 
			var fmt:DateTimeFormatter; 
			fmt=new DateTimeFormatter(); fmt.dateStyle=fmt.timeStyle=DateTimeStyle.SHORT; 
			col= new GridColumn('state_date'); col.headerText='Дата статуса'; col.formatter=fmt;  result.addItem(col);
			col= new GridColumn('ftp_folder'); col.headerText='Папка'; result.addItem(col);
			col= new GridColumn('fotos_num'); col.headerText='Файлов'; result.addItem(col);
			return result;
		}

		public static function toOrder(srcObj:OrderLoad):Order{
			var res:Order=new Order();
			var type:Type=Type.forClass(OrderLoad);
			var props:Array=type.properties;
			if(!props || props.length==0) return res;
			var prop:Field;
			for each(prop in props){
				if(res.hasOwnProperty(prop.name)) res[prop.name]=srcObj[prop.name];
			}
			return res;
		}

		public static function fromOrder(srcObj:Order):OrderLoad{
			var res:OrderLoad=new OrderLoad();
			var type:Type=Type.forClass(OrderLoad);
			var props:Array=type.properties;
			if(!props || props.length==0) return res;
			var prop:Field;
			for each(prop in props){
				if(srcObj.hasOwnProperty(prop.name)) res[prop.name]=srcObj[prop.name];
			}
			return res;
		}

        public function OrderLoad() {
            super();
			state=OrderState.FTP_WAITE;
        }
		
		//remote source fields runtime
		//public var src_state:String;
		public var filled:Boolean;
		public var canChangeRemoteState:Boolean;
		
		public function addFile(file:OrderFile):void{
			if(!files) files= new ArrayCollection;
			files.addItem(file);
		}

		override public function set state(value:int):void{
			if(super.state != value) state_name= OrderState.getStateName(value);
			super.state = value;
			state_date= new Date();
		}
		override public function get state():int{
			return super.state;
		}

    }
}