/**
 * Generated by Gas3 v3.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (RackShelf.as).
 */

package com.photodispatcher.model.mysql.entities {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import org.granite.tide.IPropertyHolder;

    [Bindable]
    public class RackShelfBase extends AbstractEntity {

        public function RackShelfBase() {
            super();
        }

        private var _id:int;
        private var _name:String;
        private var _rack:int;
        private var _rack_name:String;

        public function set id(value:int):void {
            _id = value;
        }
        public function get id():int {
            return _id;
        }

        public function set name(value:String):void {
            _name = value;
        }
        public function get name():String {
            return _name;
        }

        public function set rack(value:int):void {
            _rack = value;
        }
        public function get rack():int {
            return _rack;
        }

        public function set rack_name(value:String):void {
            _rack_name = value;
        }
        public function get rack_name():String {
            return _rack_name;
        }

        public override function readExternal(input:IDataInput):void {
            super.readExternal(input);
            _id = input.readObject() as int;
            _name = input.readObject() as String;
            _rack = input.readObject() as int;
            _rack_name = input.readObject() as String;
        }

        public override function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id);
            output.writeObject((_name is IPropertyHolder) ? IPropertyHolder(_name).object : _name);
            output.writeObject((_rack is IPropertyHolder) ? IPropertyHolder(_rack).object : _rack);
            output.writeObject((_rack_name is IPropertyHolder) ? IPropertyHolder(_rack_name).object : _rack_name);
        }
    }
}