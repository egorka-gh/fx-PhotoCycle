/**
 * Generated by Gas3 v3.1.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.photodispatcher.model.mysql.entities {
	import com.photodispatcher.model.mysql.DbLatch;
	import com.photodispatcher.model.mysql.services.MailPackageService;
	import com.photodispatcher.util.GridUtil;
	import com.photodispatcher.view.itemRenderer.BooleanGridItemEditor;
	
	import flash.events.Event;
	
	import mx.collections.ArrayList;
	import mx.core.ClassFactory;
	
	import org.granite.tide.Tide;
	
	import spark.components.gridClasses.GridColumn;
	
    [Bindable]
    [RemoteClass(alias="com.photodispatcher.model.mysql.entities.DeliveryTypeDictionary")]
    public class DeliveryTypeDictionary extends DeliveryTypeDictionaryBase {

		private static var deliveryTypeMap:Object;

		public static function initDeliveryTypeMap():DbLatch{
			var service:MailPackageService=Tide.getInstance().getContext().byType(MailPackageService,true) as MailPackageService;
			var latch:DbLatch= new DbLatch();
			latch.addEventListener(Event.COMPLETE, onLoad);
			latch.addLatch(service.loadDeliveryTypeDictionary());
			latch.start();
			return latch;
		}
		private static function onLoad(event:Event):void{
			var latch:DbLatch= event.target as DbLatch;
			if(latch){
				latch.removeEventListener(Event.COMPLETE,onLoad);
				if(latch.complite){
					var a:Array=latch.lastDataArr;
					if(!a) return;
					var newMap:Object=new Object();
					var subMap:Object;
					var dt:DeliveryTypeDictionary;
					for each(dt in a){
						if(dt){
							//add to synonym map
							subMap=newMap[dt.source];
							if(!subMap){
								subMap= new Object();
								newMap[dt.source]=subMap;
							}
							subMap[dt.site_id]=dt;
						}
					}
					deliveryTypeMap=newMap;
				}
			}
		}
		
		public static function translateDeliveryType(source:int, siteId:int):int{
			var dt:DeliveryTypeDictionary=getDeliveryTypeDictionary(source, siteId);
			if(!dt) return 0;
			return dt.delivery_type;
		}

		public static function getDeliveryTypeDictionary(source:int, siteId:int):DeliveryTypeDictionary{
			if(!deliveryTypeMap){
				throw new Error('Ошибка инициализации DeliveryTypeDictionary.initDeliveryTypeMap',OrderState.ERR_APP_INIT);
				return null;
			}
			if(source==0 || siteId==0) return null;
			var map:Object=deliveryTypeMap[source];
			if(!map) return null;
			var dt:DeliveryTypeDictionary=map[siteId] as DeliveryTypeDictionary;
			return dt;
		}

		public static function gridColumns():ArrayList{
			var result:ArrayList= new ArrayList();
			var col:GridColumn;
			col= new GridColumn('source'); col.headerText='source'; col.visible=false;  result.addItem(col);
			col= new GridColumn('delivery_type'); col.headerText='delivery_type'; col.visible=false;  result.addItem(col);
			col= new GridColumn('delivery_type_name'); col.headerText='Наименование'; col.editable=false;  result.addItem(col);
			col= new GridColumn('site_id'); col.headerText='Id сайта'; result.addItem(col);
			col= new GridColumn('setSend'); col.headerText='"Отправлен" на сайте'; col.labelFunction=GridUtil.booleanToLabel; col.itemEditor=new ClassFactory(BooleanGridItemEditor); result.addItem(col);
			return result;
		}

        public function DeliveryTypeDictionary() {
            super();
        }
    }
}