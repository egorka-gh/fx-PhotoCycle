/**
 * Generated by Gas3 v3.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (AppConfig.as).
 */

package com.photodispatcher.model.mysql.entities {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;

    [Bindable]
    public class AppConfigBase extends AbstractEntity {

        public function AppConfigBase() {
            super();
        }

        private var _cfg_pwd:String;
        private var _clean_fs:Boolean;
        private var _clean_fs_days:int;
        private var _clean_fs_hour:int;
        private var _clean_fs_limit:int;
        private var _clean_fs_state:int;
        private var _clean_nr_days:int;
        private var _id:int;
        private var _pdf_quality:int;
        private var _pqSheetLimit:int;
        private var _print_revers:Boolean;
        private var _print_rotate:Boolean;
        private var _production:int;
        private var _production_name:String;

        public function set cfg_pwd(value:String):void {
            _cfg_pwd = value;
        }
        public function get cfg_pwd():String {
            return _cfg_pwd;
        }

        public function set clean_fs(value:Boolean):void {
            _clean_fs = value;
        }
        public function get clean_fs():Boolean {
            return _clean_fs;
        }

        public function set clean_fs_days(value:int):void {
            _clean_fs_days = value;
        }
        public function get clean_fs_days():int {
            return _clean_fs_days;
        }

        public function set clean_fs_hour(value:int):void {
            _clean_fs_hour = value;
        }
        public function get clean_fs_hour():int {
            return _clean_fs_hour;
        }

        public function set clean_fs_limit(value:int):void {
            _clean_fs_limit = value;
        }
        public function get clean_fs_limit():int {
            return _clean_fs_limit;
        }

        public function set clean_fs_state(value:int):void {
            _clean_fs_state = value;
        }
        public function get clean_fs_state():int {
            return _clean_fs_state;
        }

        public function set clean_nr_days(value:int):void {
            _clean_nr_days = value;
        }
        public function get clean_nr_days():int {
            return _clean_nr_days;
        }

        public function set id(value:int):void {
            _id = value;
        }
        public function get id():int {
            return _id;
        }

        public function set pdf_quality(value:int):void {
            _pdf_quality = value;
        }
        public function get pdf_quality():int {
            return _pdf_quality;
        }

        public function set pqSheetLimit(value:int):void {
            _pqSheetLimit = value;
        }
        public function get pqSheetLimit():int {
            return _pqSheetLimit;
        }

        public function set print_revers(value:Boolean):void {
            _print_revers = value;
        }
        public function get print_revers():Boolean {
            return _print_revers;
        }

        public function set print_rotate(value:Boolean):void {
            _print_rotate = value;
        }
        public function get print_rotate():Boolean {
            return _print_rotate;
        }

        public function set production(value:int):void {
            _production = value;
        }
        public function get production():int {
            return _production;
        }

        public function set production_name(value:String):void {
            _production_name = value;
        }
        public function get production_name():String {
            return _production_name;
        }

        public override function readExternal(input:IDataInput):void {
            super.readExternal(input);
            _cfg_pwd = input.readObject() as String;
            _clean_fs = input.readObject() as Boolean;
            _clean_fs_days = input.readObject() as int;
            _clean_fs_hour = input.readObject() as int;
            _clean_fs_limit = input.readObject() as int;
            _clean_fs_state = input.readObject() as int;
            _clean_nr_days = input.readObject() as int;
            _id = input.readObject() as int;
            _pdf_quality = input.readObject() as int;
            _pqSheetLimit = input.readObject() as int;
            _print_revers = input.readObject() as Boolean;
            _print_rotate = input.readObject() as Boolean;
            _production = input.readObject() as int;
            _production_name = input.readObject() as String;
        }

        public override function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            output.writeObject(_cfg_pwd);
            output.writeObject(_clean_fs);
            output.writeObject(_clean_fs_days);
            output.writeObject(_clean_fs_hour);
            output.writeObject(_clean_fs_limit);
            output.writeObject(_clean_fs_state);
            output.writeObject(_clean_nr_days);
            output.writeObject(_id);
            output.writeObject(_pdf_quality);
            output.writeObject(_pqSheetLimit);
            output.writeObject(_print_revers);
            output.writeObject(_print_rotate);
            output.writeObject(_production);
            output.writeObject(_production_name);
        }
    }
}