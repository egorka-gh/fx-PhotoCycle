/**
 * Generated by Gas3 v2.3.2 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.photodispatcher.model.mysql.entities {
	import com.photodispatcher.model.mysql.DbLatch;
	import com.photodispatcher.model.mysql.services.DictionaryService;
	
	import flash.events.Event;
	
	import org.granite.tide.Tide;

    [Bindable]
    [RemoteClass(alias="com.photodispatcher.model.mysql.entities.SourceProperty")]
    public class SourceProperty extends SourcePropertyBase {
		public static const HF_PREFIX:String='hotFolderPrefix';
		public static const HF_IMG_FOLDER:String='imageSubFolder';
		public static const HF_SUFIX_NOREADY:String='hotFolderSufixNotReady';
		public static const HF_SUFIX_READY:String='hotFolderSufixtReady';
		public static const PRN_SCRIPT_FILE:String='printScriptFileName';
		public static const PRN_SCRIPT_END_FILE:String='printEndFileName';
		public static const PRN_SCRIPT_HEADER:String='printScriptHeader';
		public static const PRN_SCRIPT_BODY1:String='printScriptBody01';
		public static const PRN_SCRIPT_BODY2:String='printScriptBody02';
		public static const LAB_ICON:String='labLogo';
		
		private static var srcTypeMap:Object;
		
		public static function initMap():DbLatch{
			var service:DictionaryService=Tide.getInstance().getContext().byType(DictionaryService,true) as DictionaryService;
			var latch:DbLatch= new DbLatch();
			latch.debugName='SourceProperty.initMap';
			latch.addEventListener(Event.COMPLETE, onLoad);
			latch.addLatch(service.loadSourceProperties());
			latch.start();
			return latch;
		}
		private static function onLoad(event:Event):void{
			var latch:DbLatch= event.target as DbLatch;
			if(latch){
				latch.removeEventListener(Event.COMPLETE,onLoad);
				if(latch.complite){
					var a:Array=latch.lastDataArr;
					if(!a) return;
					
					var newMap:Object=new Object();
					var propMap:Object;
					var item:SourceProperty;
					for each(item in a){
						propMap=newMap[item.src_type.toString()];
						if(!propMap){
							propMap= new Object();
							newMap[item.src_type.toString()]=propMap;
						}
						propMap[item.name]=item.value;
					}
					srcTypeMap=newMap;
				}
			}
		}

		public static function getProperty(sourceType:int,name:String):String{
			if(!srcTypeMap){
				throw new Error('Ошибка инициализации SourceProperty.initMap',OrderState.ERR_APP_INIT);
				return;
			}
			var propMap:Object=srcTypeMap[sourceType.toString()];
			var result:String;
			if(propMap) result=propMap[name];	
			return result?result:''; 	
		}

    }
}