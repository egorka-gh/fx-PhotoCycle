<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%" 
		 creationComplete="{init()}">
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.factory.LabBuilder;
			import com.photodispatcher.model.OrderState;
			import com.photodispatcher.model.PrintGroup;
			import com.photodispatcher.model.Source;
			import com.photodispatcher.model.dao.BaseDAO;
			import com.photodispatcher.model.dao.OrderStateDAO;
			import com.photodispatcher.model.dao.PrintGroupDAO;
			import com.photodispatcher.model.dao.SourcesDAO;
			import com.photodispatcher.print.LabBase;
			import com.photodispatcher.print.PrintManager;
			import com.photodispatcher.view.menu.GridContexMenu;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			[Bindable]
			private var ordTotal:int;
			[Bindable]
			private var pgTotal:int;
			[Bindable]
			private var phTotal:int;
			
			[Bindable]
			private var pgList:ArrayCollection=new ArrayCollection();
			[Bindable]
			private var labList:ArrayCollection;
			[Bindable]
			private var printManager:PrintManager= new PrintManager();

			//filters
			[Bindable]
			private var sizesList:ArrayCollection= new ArrayCollection();
			[Bindable]
			private var sourceFilterList:ArrayCollection= new ArrayCollection();
			[Bindable]
			private var sizesFilterList:ArrayCollection= new ArrayCollection();
			[Bindable]
			private var paperFilterList:ArrayCollection= new ArrayCollection();
			[Bindable]
			private var statesFilterList:ArrayCollection= new ArrayCollection();
			[Bindable]
			private var booleanFilterList:ArrayCollection= new ArrayCollection();

			private var gridMenu:GridContexMenu;

			private function init():void{
				refresh();
				
				var a:Array=Context.getSources();
				if(!a) a=[];
				var s:Source=new Source(); s.id=0; s.name='-';
				a.unshift(s);
				sourceFilterList.source=a;
				
				a=OrderStateDAO.getStateArray(OrderState.PRN_WAITE,OrderState.PRN_CANCEL+1,true);
				var os:OrderState=new OrderState(); os.id=0; os.name='-';
				a.unshift(os);
				statesFilterList.source=a;

				pgList.filterFunction=filterPGList;
				pgList.refresh();
				Context.initAttributeLists();
				booleanFilterList=Context.getAttribute('booleanList');

			}
			
			public function refresh(afterDistribute:Boolean=false):void{
				refreshPgList();
				//refresh lab list
				if(afterDistribute) return;
				var lDao:SourcesDAO= new SourcesDAO();
				labList=LabBuilder.buildList(lDao.findAll(2).source);
			}
			
			private function refreshPgList():void{
				var pgDao:PrintGroupDAO=new PrintGroupDAO();
				var a:Array=pgDao.findAllArray(OrderState.PRN_WAITE,OrderState.PRN_PRINT); 
				if(printManager) printManager.reSync(a); 
				pgList.source=a;
				calcTotals(a);
			}
			
			private function calcTotals(pgArray:Array):void{
				ordTotal=0;
				pgTotal=0;
				phTotal=0;
				if(!pgArray){
					sizesList.source=[];
					return;
				}
				var pg:PrintGroup; 
				var orderMap:Object=new Object();
				var o:Object;
				var sizeMap:Object= new Object();
				var sizeFilterMap:Object= new Object();
				var paperFilterMap:Object= new Object();
				var key:String;
				var size:PhotoSizeAccum;
				for each(o in pgArray){
					pg= o as PrintGroup;
					orderMap[pg.order_id]=pg.order_id;
					//total printgroups
					pgTotal++;
					//total files
					phTotal+=pg.file_num;
					//fill sizesList 
					key=pg.width.toString()+'~'+pg.paper.toString();
					size=sizeMap[key] as PhotoSizeAccum;
					if(!size){
						size= new PhotoSizeAccum();
						size.size=pg.width;
						size.paper_id=pg.paper;
						size.paper=pg.paper_name;
						sizeMap[key]=size;
					}
					size.pg_num++;
					size.file_num+=pg.file_num;
					size.len+=pg.file_num*pg.height;
					//fill size filter list
					sizeFilterMap[size.size.toString()]={id:size.size, name:size.size.toString()};
					//fill paper filter list
					paperFilterMap[size.paper_id.toString()]={id:size.paper_id, name:size.paper};
					if(pg.width!=pg.height){
						/*by height
						key=pg.height.toString()+'~'+pg.paper.toString();
						size=sizeMap[key] as PhotoSizeAccum;
						if(!size){
							size= new PhotoSizeAccum();
							size.size=pg.height;
							size.paper_id=pg.paper;
							size.paper=pg.paper_name;
							sizeMap[key]=size;
						}
						size.pg_num++;
						size.file_num+=pg.file_num;
						size.len+=pg.file_num*pg.width;
						*/
						//fill size filter list
						//sizeFilterMap[size.size.toString()]={id:size.size, name:size.size.toString()};
						sizeFilterMap[pg.height.toString()]={id:pg.height, name:pg.height.toString()};
					}
				}
				//total orders
				for (o in orderMap) ordTotal++;
				//sizesList
				var a:Array=[];
				for each (o in sizeMap) a.push(o);
				a.sortOn('file_num',Array.DESCENDING | Array.NUMERIC);
				size=new PhotoSizeAccum(); size.size=-1;
				a.unshift(size);
				sizesList.source=a;
				//sizesFilterList
				a=[];
				for each (o in sizeFilterMap) a.push(o);
				a.sortOn('id',Array.NUMERIC);
				a.unshift({id:-1,name:'-'});
				sizesFilterList.source=a;
				//paper FilterList
				a=[];
				for each (o in paperFilterMap){
					if(o.id) a.push(o);
				}
				a.sortOn('id',Array.NUMERIC);
				a.unshift({id:-1,name:'-'});
				paperFilterList.source=a;
			}
			
			private function sizesListLabel(item:Object):String{
				//return item.size+' '+item.paper+' (групп: '+item.pg_num+' фото: '+item.file_num+' длина: '+item.len+')';
				if(item.size!=-1){
					return item.size+' '+item.paper+' (фото: '+item.file_num+'; длина: '+ Math.round(item.len/1000).toString()+'м)';
				}else{
					return '-';
				}
			}
			
			protected function btPost_clickHandler(event:MouseEvent):void{
				if(!dgPGroups.selectedItem || !lstLabs.selectedItem) return;
				var l:LabBase=lstLabs.selectedItem as LabBase;
				//var pm:PrintManager= new PrintManager();
				printManager.post(dgPGroups.selectedItems,l);
				//if(l) l.post(dgPGroups.selectedItems);
				//printManager.post(dgPGroups.selectedItems,lstLabs.selectedItem as LabBase);
				/*
				var pt:PrintTask=new PrintTask(dgPGroups.selectedItem as PrintGroup,lstLabs.selectedItem as LabBase);
				pt.post();
				*/
			}
			
			private function filterPGList(item:Object):Boolean {
				var pg:PrintGroup=item as PrintGroup;
				if(!pg) return false;
				if(ddSourceFilter && ddSourceFilter.selectedIndex>0 && pg.source_id!=ddSourceFilter.selectedItem.id){
					return false;
				}
				//if(tiOrderFilter && tiOrderFilter.text && pg.id.substr(0,tiOrderFilter.text.length)!=tiOrderFilter.text) return false;
				if(tiOrderFilter && tiOrderFilter.text && pg.id.indexOf(tiOrderFilter.text)==-1) return false;
				if(lstSizes && lstSizes.selectedIndex>0){
					var ps:PhotoSizeAccum=lstSizes.selectedItem as PhotoSizeAccum;
					//if((pg.width!=ps.size && pg.height!=ps.size) ||(pg.paper!=ps.paper_id)) return false; 
					if((pg.width!=ps.size) ||(pg.paper!=ps.paper_id)) return false;
				}else{
					if(ddStateFilter && ddStateFilter.selectedIndex>0 && pg.state!=ddStateFilter.selectedItem.id) return false;
					if(ddSizeFilter && ddSizeFilter.selectedIndex>0){
						if(pg.width!=ddSizeFilter.selectedItem.id && pg.height!=ddSizeFilter.selectedItem.id) return false;
					}
					if(ddPaperFilter && ddPaperFilter.selectedIndex>0 && pg.paper!=ddPaperFilter.selectedItem.id) return false;
					if(ddIsBookFilter && ddIsBookFilter.selectedIndex>0){
						if(ddIsBookFilter.selectedItem.value && pg.book_type==0) return false;
						if(!ddIsBookFilter.selectedItem.value && pg.book_type!=0) return false;
					}
					if(ddIsPdfFilter && ddIsPdfFilter.selectedIndex>0 && ddIsPdfFilter.selectedItem.value != pg.is_pdf) return false;
				}
				return true;
			}
			
			private function applyFilter():void{
				pgList.refresh();
				if(dgPGroups){
					dgPGroups.clearSelection();
					dgPGroups.dispatchEvent(new FlexEvent(FlexEvent.VALUE_COMMIT));
				}
			}
			
			protected function lstSizes_changeHandler(event:IndexChangeEvent):void{
				var enabled:Boolean=lstSizes.selectedIndex<1;
				ddStateFilter.enabled=enabled;
				ddSizeFilter.enabled=enabled;
				ddPaperFilter.enabled=enabled;
				
				applyFilter();				
			}

			protected function dgPGroups_creationCompleteHandler(event:FlexEvent):void{
				gridMenu= new GridContexMenu(dgPGroups,[GridContexMenu.CANCEL_ORDER,GridContexMenu.SEPARATOR,GridContexMenu.SHOW_ORDER]);
			}
			
		]]>
	</fx:Script>
	<s:HGroup gap="10" width="100%" height="100%">
		<s:VGroup gap="5" width="230" height="100%">
			<s:Label text="Заказов - {ordTotal}" left="0" verticalCenter="0"/>
			<s:Label text="Групп печати - {pgTotal}"/>
			<s:Label text="Фото - {phTotal}"/>
			<s:Spacer height="5"/>
			<s:Label text="Варианты ширины"/>
			<s:List id="lstSizes" width="100%" height="100%"
					labelFunction="sizesListLabel" dataProvider="{sizesList}"
					change="lstSizes_changeHandler(event)"/>
		</s:VGroup>
		<s:VGroup gap="5" width="100%" height="100%">
			<s:HGroup id="gFilters" width="100%" gap="5" horizontalAlign="left" verticalAlign="baseline">
				<s:Label text="Фильтрация" fontWeight="bold"/>
				
				<s:Spacer width="5"/>
				<s:Label text="Источник"/>
				<s:DropDownList id="ddSourceFilter" dataProvider="{sourceFilterList}" labelField="name" change="{applyFilter()}" width="100"/>
				
				<s:Spacer width="5"/>
				<s:Label text="ID"/>
				<s:TextInput id="tiOrderFilter" width="80" change="{applyFilter()}"/>
				
				<s:Spacer width="5"/>
				<s:Label text="Статус"/>
				<s:DropDownList id="ddStateFilter" dataProvider="{statesFilterList}" width="150" labelField="name" change="{applyFilter()}"/>
				
				<s:Spacer width="5"/>
				<s:Label text="Размер"/>
				<s:DropDownList id="ddSizeFilter" dataProvider="{sizesFilterList}" labelField="name" change="{applyFilter()}"  width="60"/>
				
				<s:Spacer width="5"/>
				<s:Label text="Бумага"/>
				<s:DropDownList id="ddPaperFilter" dataProvider="{paperFilterList}" labelField="name" change="{applyFilter()}" width="100"/>

				<s:Spacer width="5"/>
				<s:Label text="Книга"/>
				<s:DropDownList id="ddIsBookFilter" dataProvider="{booleanFilterList}" change="{applyFilter()}" width="60"/>

				<s:Spacer width="5"/>
				<s:Label text="PDF"/>
				<s:DropDownList id="ddIsPdfFilter" dataProvider="{booleanFilterList}" change="{applyFilter()}" width="60"/>
				
				<s:Spacer width="100%"/>
				<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refreshPgList()}"
						  cornerRadius="4" width="22" height="22" baseline="4"/>
			</s:HGroup>
			<s:DataGrid id="dgPGroups" selectionMode="multipleRows"
						width="100%" height="100%" creationComplete="dgPGroups_creationCompleteHandler(event)"
						dataProvider="{pgList}" locale="ru_RU" columns="{PrintGroupDAO.gridColumns()}"/>
		</s:VGroup>
		<s:Group height="100%">
			<s:Button id="btPost" label="{printManager.isWriting?'!':'>'}" width="30" fontWeight="bold" verticalCenter="0" 
					  enabled="{printManager.isWriting?false:true}" click="btPost_clickHandler(event)"/>
		</s:Group>
		<s:VGroup gap="5" width="200" height="100%">
			<s:Label text="Лаборатории"/>
			<s:List id="lstLabs" width="100%" height="100%"
					dataProvider="{labList}" useVirtualLayout="false"
					itemRenderer="com.photodispatcher.view.itemRenderer.LabItemRenderer"/>
		</s:VGroup>
	</s:HGroup>
</s:Group>
