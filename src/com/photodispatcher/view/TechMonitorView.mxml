<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.SourceType;
			import com.photodispatcher.model.TechLog;
			import com.photodispatcher.model.TechPoint;
			import com.photodispatcher.model.dao.PrintGroupDAO;
			import com.photodispatcher.model.dao.TechLogDAO;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.service.barcode.ValveCom;
			import com.photodispatcher.tech.TechRegisterBase;
			import com.photodispatcher.tech.TechRegisterCommon;
			import com.photodispatcher.tech.TechRegisterFolding;
			import com.photodispatcher.tech.TechRegisterPrint;
			
			import spark.formatters.DateTimeFormatter;
			import spark.utils.TextFlowUtil;
		
			public var techPoint:TechPoint;
			private var _barcodeReader:ComReader;
			public function get barcodeReader():ComReader{
				return _barcodeReader;
			}
			public function set barcodeReader(value:ComReader):void{
				if(_barcodeReader){
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
				_barcodeReader = value;
				if(_barcodeReader){
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
			}

			private var _flap:ValveCom;
			[Bindable]
			public function get flap():ValveCom{
				return _flap;
			}

			public function set flap(value:ValveCom):void{
				if(_flap){
					_flap.removeEventListener(BarCodeEvent.BARCODE_READED,onFlapMsg);
					_flap.removeEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
				_flap = value;
				if(_flap){
					_flap.addEventListener(BarCodeEvent.BARCODE_READED,onFlapMsg);
					_flap.addEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
			}

			
			private var logText:String = '';

			private var _barText:String='';
			[Bindable]
			public function get barText():String{
				return _barText;
			}
			public function set barText(value:String):void{
				if(!value){
					_barText='';
					return;
				}
				var fmt:DateTimeFormatter=new DateTimeFormatter();
				fmt.dateTimePattern='HH:mm:ss';
				_barText += fmt.format(new Date())+': '+ value;
			}


			private function onError(event:BarCodeEvent):void{
				barText=event.barcode+'\n';
				logToScreen('Ошибка: '+event.error,true);
				
			}

			private function onFlapMsg(event:BarCodeEvent):void{
				logToScreen('Защелка: '+event.barcode,true);
			}
			
			private function createRegister(printGroup:String,books:int,sheets:int):void{
				var result:TechRegisterBase;
				if(!techPoint){
					if(currRegister){
						currRegister.removeEventListener(ErrorEvent.ERROR,onRegisterMsg);
						currRegister.removeEventListener(Event.COMPLETE,onRegisterComplite);
					}
					currRegister=null;
					return;
				}
				switch(techPoint.tech_type){
					case SourceType.TECH_PRINT:
						result= new TechRegisterPrint(printGroup,books,sheets);
						var dao:PrintGroupDAO= new PrintGroupDAO();
						dao.setState(printGroup,OrderState.PRN_INPRINT);
						break;
					case SourceType.TECH_FOLDING:
						result= new TechRegisterFolding(printGroup,books,sheets);
						break;
					default:
						result= new TechRegisterCommon(printGroup,books,sheets);
						break;
				}
				if(result){
					result.techPoint=techPoint;
					result.flap=flap;
					result.revers=Boolean(Context.getAttribute("reversOrder"));
				}
				//stop listen old one
				if(currRegister){
					currRegister.removeEventListener(ErrorEvent.ERROR,onRegisterMsg);
					currRegister.removeEventListener(Event.COMPLETE,onRegisterComplite);
				}
				currRegister=result;
				if(currRegister){
					//listen
					currRegister.addEventListener(ErrorEvent.ERROR,onRegisterMsg);
					currRegister.addEventListener(Event.COMPLETE,onRegisterComplite);
				}
			}
			
			private function onRegisterMsg(event:ErrorEvent):void{
				logToScreen(event.text,event.errorID>0);
			}

			private function onRegisterComplite(event:Event):void{
			}

			private var currRegister:TechRegisterBase;
			
			private function onBarCode(event:BarCodeEvent):void{
				var barcode:String=event.barcode;
				//parce barcode
				var pgId:String;
				barText=barcode+'\n';
				if(barcode.length>10) pgId=PrintGroup.idFromDigitId(barcode.substr(10));
				if(!pgId){
					//TODO rise err
					logToScreen('---------- Не верный штрих код: '+barcode+' ----------',true);
					if(flap) flap.setOff();
					return;
				}
				
				var bookNum:int=int(barcode.substr(0,3));
				var pageNum:int=int(barcode.substr(6,2));
				
				if(currRegister && currRegister.printGroupId==pgId){
					currRegister.register(bookNum,pageNum);
					if (currRegister.isComplete) logToScreen('Группа печати "'+currRegister.printGroupId+'" завершена',false);
				}else{
					if(currRegister && !currRegister.finalise()) return;
					//create new
					var bookTot:int=int(barcode.substr(3,3));
					var pageTot:int=int(barcode.substr(8,2));
					createRegister(pgId,bookTot,pageTot);
					if(!currRegister){
						logToScreen('---------- Не поддерживаемый режим регистрации ШК ----------',true);
						return;
					}
					//start new
					barText='';
					barText=barcode+'\n';
					currRegister.register(bookNum,pageNum);
				}
			}

			private function logToScreen(msg:String, isError:Boolean=false):void{
				var color:String=isError?"'#990000'":"'#006600'";
				var bold:String=isError?"fontWeight='bold'":'';
				var fmt:DateTimeFormatter=new DateTimeFormatter();
				fmt.dateTimePattern='HH:mm:ss';
				logText += "<span>" + fmt.format(new Date()) + " </span>";
				logText += "<span color="+color+" "+bold+">" + msg + "</span> <br />";
				try{
					logTextArea.textFlow=TextFlowUtil.importFromString(logText);
				}catch(error:Error){
					trace('TextFlow err, txt: '+logText);
					trace(error.message);
				}
				logTextArea.scroller.verticalScrollBar.value = logTextArea.scroller.verticalScrollBar.maximum;
			}

			public function start():void{
				cleanLog();
				barText='';
				if(!techPoint){
					//TODO rise err or log in screen
					logToScreen('---------- Не задана технологическая точка ----------',true);
				}
			}

			public function stop():void{
				cleanLog();
				if(currRegister){
					currRegister.finalise();
					currRegister.removeEventListener(ErrorEvent.ERROR,onRegisterMsg);
					currRegister.removeEventListener(Event.COMPLETE,onRegisterComplite);
				}
				currRegister=null;
			}
			
			private function cleanLog():void{
				logText='';
				logTextArea.text='';
			}
			
			protected function btFlapOn_clickHandler(event:MouseEvent):void{
				if(flap) flap.setOn();
			}
			
			protected function btFlapOff_clickHandler(event:MouseEvent):void{
				if(flap) flap.setOff();
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup gap="5" width="100%" height="100%" horizontalAlign="right" 
			  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<s:HGroup gap="5" width="100%" height="100%">
			<s:TextArea id="logTextArea" width="100%" height="100%" editable="false"/>
			<s:TextArea id="barTextArea" text="{barText}" fontSize="10" width="170" height="100%" editable="false"/>
		</s:HGroup>
		<s:HGroup gap="5" width="100%">
			<s:Button label="Очистить" click="{cleanLog()}"/>
			<s:Spacer width="100%"/>
			<s:Button id="btFlapOn" label="Зщелка Вкл" click="btFlapOn_clickHandler(event)" enabled="{flap!=null}"/>
			<s:Button id="btFlapOff" label="Зщелка Выкл" click="btFlapOff_clickHandler(event)" enabled="{flap!=null}"/>
		</s:HGroup> 
	</s:VGroup>
	
</s:Group>
