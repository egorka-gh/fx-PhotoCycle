<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="com.photodispatcher.interfaces.ISimpleLogger"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.PrnQueueLink;
			import com.photodispatcher.model.mysql.entities.SourceType;
			import com.photodispatcher.model.mysql.entities.TechLog;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.model.mysql.services.OrderStateService;
			import com.photodispatcher.model.mysql.services.PrnStrategyService;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.service.barcode.EBS6kController;
			import com.photodispatcher.service.barcode.ValveCom;
			import com.photodispatcher.tech.GlueHandler;
			import com.photodispatcher.tech.plain_register.TechRegisterBase;
			import com.photodispatcher.tech.plain_register.TechRegisterCommon;
			import com.photodispatcher.tech.plain_register.TechRegisterFolding;
			import com.photodispatcher.tech.plain_register.TechRegisterPrint;
			import com.photodispatcher.tech.register.TechBook;
			import com.photodispatcher.util.StrUtil;
			
			import flash.globalization.DateTimeStyle;
			
			import mx.collections.ArrayCollection;
			
			import org.granite.tide.Tide;
			
			import spark.components.gridClasses.GridColumn;
			import spark.formatters.DateTimeFormatter;
			import spark.utils.TextFlowUtil;
		
			public static const LOG_LEN_LIMIT:int=6000;
			public static const BAR_LEN_LIMIT:int=6000;
			public static const REGLISTLIMIT:int=200;
			
			public var extendedPrint:Boolean;
			public var soundOffOnReprint:Boolean;
			
			public var hasGlue:Boolean;
			[Bindable]
			public var glueType:int;
			
			public var techPoint:TechPoint;
			
			private var _barcodeReaders:Array;
			public function get barcodeReaders():Array{
				return _barcodeReaders;
			}
			public function set barcodeReaders(value:Array):void{
				var reader:ComReader;
				//stop old
				if(_barcodeReaders){
					for each(reader in _barcodeReaders){
						if(reader){
							reader.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
							reader.removeEventListener(BarCodeEvent.BARCODE_ERR, onError);
							reader.removeEventListener(BarCodeEvent.BARCODE_CONNECTED, onReaderConnect);
							reader.removeEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onBarDisconnect);
						}
					}
				}
				//start new
				_barcodeReaders = value;
				if(_barcodeReaders){
					for each(reader in _barcodeReaders){
						if(reader){
							reader.addEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
							reader.addEventListener(BarCodeEvent.BARCODE_ERR, onError);
							reader.addEventListener(BarCodeEvent.BARCODE_CONNECTED, onReaderConnect);
							reader.addEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onBarDisconnect);
						}
					}
				}
			}

			/*
			private var _barcodeReader:ComReader;
			public function get barcodeReader():ComReader{
				return _barcodeReader;
			}
			public function set barcodeReader(value:ComReader):void{
				if(_barcodeReader){
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_ERR, onError);
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_CONNECTED, onReaderConnect);
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onBarDisconnect);
				}
				_barcodeReader = value;
				if(_barcodeReader){
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_ERR, onError);
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_CONNECTED, onReaderConnect);
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onBarDisconnect);
				}
			}
			*/

			private var _flap:ValveCom;
			[Bindable]
			public function get flap():ValveCom{
				return _flap;
			}

			public function set flap(value:ValveCom):void{
				if(_flap){
					_flap.removeEventListener(BarCodeEvent.BARCODE_READED,onFlapMsg);
					_flap.removeEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
				_flap = value;
				if(_flap){
					_flap.addEventListener(BarCodeEvent.BARCODE_READED,onFlapMsg);
					_flap.addEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
			}

			private var _printer:EBS6kController;
			[Bindable]
			public function get printer():EBS6kController{
				return _printer;
			}
			public function set printer(value:EBS6kController):void{
				if(_printer){
					_printer.removeEventListener(BarCodeEvent.BARCODE_ERR, onError);
					_printer.removeEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onPrinterDisconnect);
					_printer.removeEventListener(BarCodeEvent.BARCODE_CONNECTED, onPrinterConnect);
				}
				_printer = value;
				if(_printer){
					//_printer.logger=this;
					_printer.addEventListener(BarCodeEvent.BARCODE_ERR, onError);
					_printer.addEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onPrinterDisconnect);
					_printer.addEventListener(BarCodeEvent.BARCODE_CONNECTED, onPrinterConnect);
				}
			}

			private var _glueHandler:GlueHandler;  
			[Bindable]
			public function get glueHandler():GlueHandler{
				return _glueHandler;
			}
			public function set glueHandler(value:GlueHandler):void{
				if(_glueHandler){
					_glueHandler.removeEventListener(ErrorEvent.ERROR,onGlueHandlerErr);
				}
				_glueHandler = value;
				if(_glueHandler){
					_glueHandler.logger=this;
					_glueHandler.addEventListener(ErrorEvent.ERROR,onGlueHandlerErr);
				}
			}
			protected function onGlueHandlerErr(event:ErrorEvent):void{
				logToScreen('Cклейка: '+event.text, true);
				log(event.text);
			}
			
			private var logText:String = '';

			private var _barText:String='';
			[Bindable]
			public function get barText():String{
				return _barText;
			}
			public function set barText(value:String):void{
				if(!value){
					_barText='';
					return;
				}
				var fmt:DateTimeFormatter=new DateTimeFormatter();
				fmt.dateTimePattern='HH:mm:ss';
				var txt:String=fmt.format(new Date())+': '+ value+_barText; 
				if(txt.length>BAR_LEN_LIMIT) txt=txt.substr(0,BAR_LEN_LIMIT);
				_barText=txt;
			}


			private function onError(event:BarCodeEvent):void{
				barText=event.barcode+'\n';
				logToScreen('Ошибка: '+event.error,true);
				
			}

			private function onFlapMsg(event:BarCodeEvent):void{
				logToScreen('Защелка: '+event.barcode,true);
			}
			
			private function onPrinterDisconnect(event:BarCodeEvent):void{
				logToScreen('!Принтер отключен '+event.barcode);
				//pause('Отключен сканер ШК '+event.barcode); busy bug
			}
			private function onPrinterConnect(event:BarCodeEvent):void{
				logToScreen('Принтер подключен '+event.barcode);
				//pause('Отключен сканер ШК '+event.barcode); busy bug
			}

			private function onBarDisconnect(event:BarCodeEvent):void{
				logToScreen('Отключен '+event.barcode);
				//pause('Отключен сканер ШК '+event.barcode); busy bug
			}
			private function onReaderConnect(event:BarCodeEvent):void{
				logToScreen('Сканер ШК подключен '+event.barcode);
				//pause('Отключен сканер ШК '+event.barcode); busy bug
			}

			
			private var markQueueLink:PrnQueueLink;
			private function onLoadLink(evt:Event):void{
				var latch:DbLatch= evt.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onLoadLink);
					if(latch.complite) markQueueLink=latch.lastDataItem as PrnQueueLink;
				}
			}

			private function createRegister(printGroup:String,books:int,sheets:int):void{
				//load  queue links
				markQueueLink=null;
				var svcPs:PrnStrategyService=Tide.getInstance().getContext().byType(PrnStrategyService,true) as PrnStrategyService;
				var slatch:DbLatch=new DbLatch();
				slatch.addEventListener(Event.COMPLETE,onLoadLink);
				slatch.addLatch(svcPs.getLinkByPG(printGroup));
				slatch.start();

				//create register
				var result:TechRegisterBase;
				if(!techPoint){
					if(currRegister){
						currRegister.removeEventListener(ErrorEvent.ERROR,onRegisterMsg);
						currRegister.removeEventListener(Event.COMPLETE,onRegisterComplite);
					}
					currRegister=null;
					return;
				}
				switch(techPoint.tech_type){
					case SourceType.TECH_PRINT:
						result= new TechRegisterPrint(printGroup,books,sheets);
						var latch:DbLatch= new DbLatch();
						var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
						//latch.addEventListener(Event.COMPLETE,onTPLoad);
						latch.addLatch(svc.printGroupMarkInPrint(printGroup));
						latch.start();
						break;
					case SourceType.TECH_FOLDING:
						result= new TechRegisterFolding(printGroup,books,sheets);
						break;
					default:
						result= new TechRegisterCommon(printGroup,books,sheets);
						break;
				}
				if(result){
					result.techPoint=techPoint;
					result.flap=flap;
					result.revers=Boolean(Context.getAttribute("reversOrder"));
				}
				//stop listen old one
				if(currRegister){
					currRegister.removeEventListener(ErrorEvent.ERROR,onRegisterMsg);
					currRegister.removeEventListener(Event.COMPLETE,onRegisterComplite);
				}
				currRegister=result;
				if(currRegister){
					//listen
					currRegister.addEventListener(ErrorEvent.ERROR,onRegisterMsg);
					currRegister.addEventListener(Event.COMPLETE,onRegisterComplite);
				}
			}
			
			private function onRegisterMsg(event:ErrorEvent):void{
				logToScreen(event.text,event.errorID>0);
			}

			private function onRegisterComplite(event:Event):void{
			}

			[Bindable]
			private var currRegister:TechRegisterBase;
			private var currBarcode:String='';
			
			private function onBarCode(event:BarCodeEvent):void{
				var barcode:String=event.barcode;
				barText=barcode+'\n';
				if(barcode==currBarcode) return; //doublescan or more then 1 barreader
				currBarcode=barcode;
				print(barcode);
				//parce barcode
				if(!PrintGroup.isTechBarcode(barcode)){
					logToScreen('---------- Не верный штрих код: '+barcode+' ----------',true);
					return;
				}
				var pgId:String;
				if(barcode.length>10) pgId=PrintGroup.idFromDigitId(barcode.substr(10));
				if(!pgId){
					//TODO rise err
					logToScreen('---------- Не верный штрих код: '+barcode+' ----------',true);
					if(flap) flap.setOff();
					return;
				}
				
				var bookNum:int=int(barcode.substr(0,3));
				var pageNum:int=int(barcode.substr(6,2));
				if(hasGlue && glueHandler) glueHandler.await(pgId,bookNum,pageNum,int(barcode.substr(8,2)),barcode);
				
				if(currRegister && currRegister.checkPrintGroup(pgId)){
					currRegister.printGroupId=pgId;
					currRegister.register(bookNum,pageNum);
					if (currRegister.isComplete){
						currRegister.flushData();
						logToScreen('Группа печати "'+currRegister.printGroupId+'" завершена',false);
					}
				}else{
					//if(currRegister && !currRegister.finalise()) return;
					if(currRegister) currRegister.finalise();
					//create new
					var bookTot:int=int(barcode.substr(3,3));
					var pageTot:int=int(barcode.substr(8,2));
					createRegister(pgId,bookTot,pageTot);
					if(!currRegister){
						logToScreen('---------- Не поддерживаемый режим регистрации ШК ----------',true);
						return;
					}
					if(hasGlue && glueHandler && !glueHandler.isPrepared){
						logToScreen('Не инициализирован контролер склейки',true);
					}
					//start new
					barText='';
					barText=barcode+'\n';
					regList= new ArrayCollection();
					currRegister.register(bookNum,pageNum);
				}
				regList.addItemAt({log_date:new Date(), page: StrUtil.sheetName(bookNum,pageNum)},0);
				if(regList.length> REGLISTLIMIT){
					regList.source.length=REGLISTLIMIT;
					regList.refresh();
				}
			}
			
			private function print(barcode:String):void{
				if(!printer || !barcode) return;
				var printBar:String=PrintGroup.tech2BookBarcode(barcode);
				if(!extendedPrint){
					if(printBar){
						logToScreen('Печать ШК '+printBar);
						if(printer) printer.sendMessage(printBar);
					}else{
						logToScreen('!! Не верный ШК. Ошибка преобразования ШК.');
					}
					return;
				}
				var printCaption:String=PrintGroup.tech2BookBarcodeCaption(barcode);
				
				if(markQueueLink){
					printCaption=printCaption+' '+markQueueLink.prn_queue.toString()+'-'+markQueueLink.prn_queue_link.toString();
				}else if(currRegister  && currRegister.getPrintGroup() && currRegister.getPrintGroup().prn_queue){
					printCaption=printCaption+' '+currRegister.getPrintGroup().prn_queue.toString();
				}

				
				if(printBar && printCaption){
					logToScreen('Печать ШК '+printBar+' '+printCaption);
					if(printer) printer.sendMessages([printBar, printCaption]);
				}else{
					logToScreen('!! Не верный ШК. Ошибка преобразования ШК.');
				}
			}


			public function clear():void{
				cleanLog();
			}
			
			[Bindable]
			private var controllerlogText:String = '';
			private var dtFmt:DateTimeFormatter;
			
			public function log(mesage:String, level:int=0):void{
				var str:String;
				if(!dtFmt){
					dtFmt=new DateTimeFormatter();
					dtFmt.timeStyle=DateTimeStyle.LONG;
					dtFmt.dateTimePattern='HH:mm:ss';
				}
				str=dtFmt.format(new Date())+' '+ mesage+'\n'+controllerlogText;
				if(str.length>5000){
					str=str.substr(0,4000)+'\n';
				}
				controllerlogText=str;
			}
			
			
			private var sound:Sound;
			public function set alertSound(filepath:String):void{
				if(!filepath) return;
				var file:File= new File(filepath);
				if(!file.exists) return;
				sound= new Sound(new URLRequest(file.url));
			}

			
			private function logToScreen(msg:String, isError:Boolean=false):void{
				var color:String=isError?"'#990000'":"'#006600'";
				var bold:String=isError?"fontWeight='bold'":'';
				var fmt:DateTimeFormatter=new DateTimeFormatter();
				msg= msg.replace('<','◄');
				msg= msg.replace('>','►');
				msg= msg.replace('"','');
				msg= msg.replace('&','&amp;');
				fmt.dateTimePattern='HH:mm:ss';
				logText ="<span>"+fmt.format(new Date())+"</span>"+"<span color="+color+" "+bold+"> "+msg+"</span><br/>"+logText ;

				//cut
				if(logText.length> LOG_LEN_LIMIT){
					var idx:int=logText.indexOf('<br/>',LOG_LEN_LIMIT);
					if(idx!=-1){
						logText=logText.substr(0,idx+5);
					}
				}

				try{
					if(logTextArea) logTextArea.textFlow=TextFlowUtil.importFromString(logText);
				}catch(error:Error){
					trace('TextFlow err, txt: '+logText);
					trace(error.message);
				}
				
				if(isError && sound){
					//TODO
					if(!currRegister || !soundOffOnReprint || !currRegister.isReprint(currRegister.printGroupId)){  //PrintGroup.getIdxFromId(currRegister.printGroupId)<3){
						try{
							sound.play();
						}catch(error:Error){}
					}
				}

				//logTextArea.scroller.verticalScrollBar.value = logTextArea.scroller.verticalScrollBar.maximum;
			}

			[Bindable]
			private var regList:ArrayCollection;
			[Bindable]
			private var regListColumnth:ArrayCollection;
			
			public function start():void{
				//cleanLog();
				if(!techPoint){
					//TODO rise err or log in screen
					logToScreen('---------- Не задана технологическая точка ----------',true);
				}
				regList=new ArrayCollection();
				createGridColumns();
				
				var reader:ComReader;
				if(barcodeReaders){
					for each(reader in barcodeReaders){
						if(reader) reader.start();
					}
				}
				//if(barcodeReader) barcodeReader.start();
				
				if(printer) printer.start();
				if(flap) flap.start();
				if(hasGlue && glueHandler) glueHandler.start(3000); //glueHandler.start();
			}

			public function createGridColumns():void{
				var result:Array= [];
				var col:GridColumn;
				var fmt:DateTimeFormatter=new DateTimeFormatter(); fmt.dateTimePattern='HH:mm:ss';
				col= new GridColumn('log_date'); col.headerText='Время'; col.formatter=fmt;  col.width=70; result.push(col);
				//col= new GridColumn('book'); col.headerText='Книга'; col.width=45; result.push(col);
				col= new GridColumn('page'); col.headerText='Лист'; col.width=70; result.push(col);
				regListColumnth=new ArrayCollection(result);
			}

			public function stop():void{
				//cleanLog();
				if(currRegister){
					currRegister.finalise();
					currRegister.removeEventListener(ErrorEvent.ERROR,onRegisterMsg);
					currRegister.removeEventListener(Event.COMPLETE,onRegisterComplite);
				}
				currRegister=null;

				var reader:ComReader;
				if(barcodeReaders){
					for each(reader in barcodeReaders){
						if(reader) reader.stop();
					}
				}
				//if(barcodeReader) barcodeReader.stop();
				
				if(printer) printer.stop();
				if(flap) flap.stop();
				if(glueHandler){
					glueHandler.stop('');
					glueHandler.isRunning=false;
				}
			}
			
			private function cleanLog():void{
				controllerlogText='';
				logText='';
				if(logTextArea) logTextArea.text='';
				barText='';
				regList= new ArrayCollection();
			}
			
			protected function btFlapOn_clickHandler(event:MouseEvent):void{
				if(flap) flap.setOn();
			}
			
			protected function btFlapOff_clickHandler(event:MouseEvent):void{
				if(flap) flap.setOff();
			}
			
			protected function btPushBook_clickHandler(event:MouseEvent):void{
				if(glueHandler) glueHandler.removeBook();
			}
			
			public function blockLabelFunc(item:Object):String {
				var block:TechBook= item as TechBook;
				if(!block) return '';
				return block.printGroupId+': '+StrUtil.sheetName(block.book,block.sheetsTotal);
			}

		]]>
	</fx:Script>
	
	<s:VGroup gap="5" width="100%" height="100%" horizontalAlign="right" 
			  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<s:HGroup gap="5" width="100%" >
			<s:Label text="Порядок: {currRegister.revers?'Обратный':'Прямой'}"/>
			<s:Spacer width="100%"/>
			<s:Label text="Заказ: {currRegister.printGroupId}"/>
			<s:Label text="Книг: {currRegister.books}"/>
			<s:Label text="Листов: {currRegister.sheets}"/>
			<s:Label text="Выполнено: {currRegister.registred.toString()}"/>
		</s:HGroup>
		<s:HGroup gap="5" width="100%" height="100%">

			<s:VGroup gap="2" width="100%" height="100%">
				<s:TabBar id="tbLogView"  dataProvider="{vsLogViews}"/>
				<mx:ViewStack id="vsLogViews" borderStyle="none" backgroundAlpha="0" width="100%" height="100%">
					<s:NavigatorContent label="Tech" backgroundAlpha="0" width="100%" height="100%">
						<s:TextArea id="logTextArea" width="100%" height="100%" editable="false"/>
					</s:NavigatorContent>
					<s:NavigatorContent label="Склейка" backgroundAlpha="0" width="100%" height="100%">
						<s:TextArea id="taControllerlog" text="{controllerlogText}" width="100%" height="100%"/>
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:VGroup>
			
			<s:VGroup width="330" height="100%" gap="5">
				<s:Label text="Склейка" fontWeight="bold"/>
				<s:HGroup gap="5" width="100%">
					<s:VGroup gap="5">
						<s:Label text="Заказ: {glueHandler.currentBookView.printGroupId}"/>
						<s:Label text="Книга: {glueHandler.currentBookView.book}"/>
					</s:VGroup>
					<s:VGroup gap="5">
						<s:Label text="Листов всего: {glueHandler.currentBookView.sheetsTotal}"/>
						<s:Label text="подано: {glueHandler.currentBookView.sheetsFeeded} склеено: {glueHandler.currentBookView.sheetsDone}"/>
					</s:VGroup>
				</s:HGroup>
				<s:Label text="ШК: {glueHandler.currentBookView.barcode}"/>
				<s:Button id="btPushBook" label="Убрать книгу" click="btPushBook_clickHandler(event)"  enabled="{glueType==0}"/>
				
				<s:Spacer height="5"/>
				<s:VGroup gap="2" width="100%" height="100%">
					<s:TabBar id="tbInfoView"  dataProvider="{vsInfoViews}"/>
					<mx:ViewStack id="vsInfoViews" borderStyle="none" backgroundAlpha="0" width="100%" height="100%">
						<s:NavigatorContent label="Сканер" backgroundAlpha="0" width="100%" height="100%">
							<s:HGroup gap="5" width="100%" height="100%">
								<s:DataGrid width="100%" height="100%" fontSize="10" skinClass="spark.skins.spark.DataGridSkin"
											dataProvider="{regList}" locale="ru_RU" columns="{regListColumnth}"/>
								<s:TextArea id="barTextArea" text="{barText}" fontSize="9" width="100%" height="100%" editable="false"/>
							</s:HGroup>
						</s:NavigatorContent>
						<s:NavigatorContent label="Склейка" backgroundAlpha="0" width="100%" height="100%">
							<s:List
								dataProvider="{glueHandler.bookQueue}"
								labelFunction="blockLabelFunc"
								width="100%" height="100%"/>
						</s:NavigatorContent>
					</mx:ViewStack>
				</s:VGroup>
			</s:VGroup>
		</s:HGroup>
		<!--<s:HGroup gap="5" width="100%">
			<s:Button label="Очистить" click="{cleanLog()}"/>
			<s:Spacer width="100%"/>
			<s:Button id="btFlapOn" label="Зщелка Вкл" click="btFlapOn_clickHandler(event)" enabled="{flap!=null}"/>
			<s:Button id="btFlapOff" label="Зщелка Выкл" click="btFlapOff_clickHandler(event)" enabled="{flap!=null}"/>
		</s:HGroup>--> 
	</s:VGroup>
	
</s:Group>
