<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:view="com.photodispatcher.view.*" xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*">
	
	<fx:Metadata>
		[Event(name="close", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.BookKit;
			import com.photodispatcher.model.mysql.entities.BookSynonym;
			import com.photodispatcher.model.mysql.entities.MailPackage;
			import com.photodispatcher.model.mysql.entities.MailPackageBox;
			import com.photodispatcher.model.mysql.entities.MailPackageBoxItem;
			import com.photodispatcher.model.mysql.entities.Order;
			import com.photodispatcher.model.mysql.entities.OrderBook;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.RackSpace;
			import com.photodispatcher.model.mysql.entities.SubOrder;
			import com.photodispatcher.model.mysql.entities.TechLog;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.model.mysql.services.MailPackageService;
			import com.photodispatcher.model.mysql.services.OrderService;
			import com.photodispatcher.model.mysql.services.OrderStateService;
			import com.photodispatcher.model.mysql.services.TechService;
			import com.photodispatcher.util.ArrayUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			[Bindable]
			public var techPoint:TechPoint;
			
			private var _box:MailPackage;
			[Bindable]
			public function get currBox():MailPackage{
				return _box;
			}
			public function set currBox(b:MailPackage):void{
				_box = b;
				currPGID='';
				currBook=0;
				currBookKit = null;
				currBoxItem=null;
				order=null;
				pgCover=null;
				pgBlok=null;
				bookTotal=0;
				bookComplited=0;
				canPack = false;
			}

			[Bindable]
			public var mode:int;
			public function setMode(newMode:int):void{
				
				canPack = false;
				mode = newMode;
			}
			
			[Bindable]
			private var currPGID:String;
			[Bindable]
			private var currBook:int;
			[Bindable]
			private var currBookKit:BookKit;
			[Bindable]
			private var currBoxItem:MailPackageBoxItem;
			
			private function get mpService(): MailPackageService{
				return Tide.getInstance().getContext().byType(MailPackageService,true) as MailPackageService;
			}
			
			[Bindable]
			private var order:Order;
			[Bindable]
			private var pgCover:PrintGroup;
			[Bindable]
			private var pgBlok:PrintGroup;
			[Bindable]
			private var bookTotal:int;
			[Bindable]
			private var bookComplited:int;
			
			public function show(pgId:String, book:int, checkClose:Boolean=false):void{
				currPGID='';
				
				if(!checkClose){
					//open new box
					//reset bookkits
					for each(var o:Order  in currBox.orders){
						///reset
						o.otkBookKits=null;
					}
					if(mode == OrderState.TECH_OTK){
						//reset box states for check
						var sn:String = OrderState.getStateName(OrderState.TECH_OTK_PICKING);
						currBox.box.state =  OrderState.TECH_OTK_PICKING;
						currBox.box.state_name=sn;
						for each (var bit:MailPackageBoxItem in currBox.box.items){
							bit.state = OrderState.TECH_OTK_PICKING;
							bit.state_name = sn; 
						}
						for each (var b:OrderBook in currBox.box.books){
							b.state = OrderState.TECH_OTK_PICKING;
						}
					}
				}
				
				if (pgId){
					//look4item
					var oldBoxItem:MailPackageBoxItem=currBoxItem;
					currBoxItem = null;
					var newPG:PrintGroup; 
					for each(var it:MailPackageBoxItem in currBox.box.items){
						if (it && it.printGroups){
							for each(var pg:PrintGroup in it.printGroups){
								if(pg.id==pgId){
									newPG = pg;
									currPGID=pgId;
									currBoxItem=it;
									break;
								}
							}
						}
						if (currBoxItem) break;
					}
				}

				//same box item?
				if(currBoxItem && oldBoxItem && oldBoxItem.orderID==currBoxItem.orderID && oldBoxItem.alias==newPG.alias ){
					if(checkClose){
						if(book!=0 && currBook==book){
							//complite book
							btComplite_clickHandler(null);
							return;
						}
						if(currBoxItem.bookType ==0 ){
							//complite photo printgroup
							setCompletePhoto(false);
							return;
						}
					}
					currBook=book;
					if(currBoxItem.bookType!=0) refreshBooks();
					return;
				}
				//load order info
				currBook=book;
				refresh();
			}
			
			private function refresh():void{
				pgCover=null;
				pgBlok=null;
				order=null;
				bookTotal=0;
				bookComplited=0;
				if(!currBoxItem || !currBoxItem.printGroups || currBoxItem.printGroups.length==0 ) return;
				bookTotal = currBoxItem.itemTo-currBoxItem.itemFrom+1;
				//lookup order
				for each(var o:Order  in currBox.orders){
					if (o.id==currBoxItem.orderID){
						order = o;
						break;
					}
				}
				if(!order) return;
				order.printGroups =  currBoxItem.printGroups;
				order.otkSubid='';
				
				var pg:PrintGroup;
				for each(pg in order.printGroups){
					if(currBoxItem.bookType!=0){
						if (!pg.is_reprint && pg.book_type!=0){
							if(pg.book_part==BookSynonym.BOOK_PART_COVER || pg.book_part==BookSynonym.BOOK_PART_INSERT) pgCover=pg;
							if(pg.book_part==BookSynonym.BOOK_PART_BLOCK || pg.book_part==BookSynonym.BOOK_PART_BLOCKCOVER) pgBlok=pg;
						}
					}else{
						if(pg.alias == currBoxItem.alias){
							pgBlok=pg;
							break;
						}
					}
				}
				order.printGroups=new ArrayCollection;
				if(pgCover) order.printGroups.addItem(pgCover);
				if(pgBlok) order.printGroups.addItem(pgBlok);
				//fill bokkits
				var a:Array = currBox.box.books.toArray();
				if (pgCover) pgCover.setBooks(a);
				if (pgBlok) pgBlok.setBooks(a);
				order.fillBookKits( ((pgCover && pgCover.books)?pgCover.books.toArray():null), ((pgBlok && pgBlok.books)?pgBlok.books.toArray():null));
				if(currBoxItem.bookType !=0) refreshBooks();
				detectState();
			}
			
			private function detectState():void{
				if(!currBoxItem || currBoxItem.bookType!=0){
					currentState='book';
				}else{
					currentState='photo';
				}
			}
			
			private function refreshBooks():void{
				bookComplited=0;
				currBookKit = null;
				if(!order || !order.id){
					return;
				}
				
				var bk:BookKit;
				if(order.otkBookKits){
					for each (bk in order.otkBookKits){
						bk.disabled = bk.book< currBoxItem.itemFrom || bk.book> currBoxItem.itemTo;
						if(!bk.disabled && bk.state>=OrderState.TECH_OTK) bookComplited++;
						if(bk.book == currBook) currBookKit = bk;
					}
				}
				
				if (lstBookList && currBookKit) lstBookList.selectedItem=currBookKit;
			}

			protected function btClose_clickHandler(event:MouseEvent):void{
				closeView();
			}
			
			private function closeView():void{
				canPack = false;
				dispatchEvent( new Event(Event.CLOSE));
			}
			
			protected function btComplite_clickHandler(event:MouseEvent):void{
				//check book
				var bk:BookKit=lstBookList.selectedItem as BookKit;
				if(!bk || bk.state>=OrderState.TECH_OTK){
					//checkComplited();
					checkBoxItem();
					return;
				}
				if (bk && mode == OrderState.TECH_OTK){
					bk.state=OrderState.TECH_OTK;
					checkBoxItem();
					return;
				}
				
				//log 
				var tl:TechLog= new TechLog()
				tl.order_id=order.id;
				tl.sub_id=order.otkSubid;
				tl.print_group='';
				tl.src_id=techPoint.id;
				tl.log_date= new Date();
				tl.setSheet(bk.book,0);
				//tl.sheet=tll.sheet;
				var svc:TechService=Tide.getInstance().getContext().byType(TechService,true) as TechService;
				var latch:DbLatch= new DbLatch(true);
				//latch.addEventListener(Event.COMPLETE,onBookLog);
				latch.addLatch(svc.log(tl));
				latch.start();
				
				//set book state
				var oss:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
				bk.state=OrderState.TECH_OTK;
				latch= new DbLatch();
				latch.addEventListener(Event.COMPLETE,onBookLog);
				latch.addLatch(oss.setEntireBookState(bk.toOrderBook()));
				latch.start();
			}
			private function onBookLog(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onBookLog);
					//if(latch.complite) checkComplited();
					checkBoxItem();
				}
			}
			
			private function checkBoxItem():void{
				if (!currBoxItem || !order || !order.otkBookKits) return;
				var bk:BookKit;
				bookComplited=0;
				for each (bk in order.otkBookKits){
					if(bk.book >= currBoxItem.itemFrom && bk.book <= currBoxItem.itemTo
						&& bk.state>=OrderState.TECH_OTK) bookComplited++;
				}
				if (bookComplited == bookTotal){
					if (mode == OrderState.TECH_OTK){
						// set box state
						currBoxItem.state = OrderState.TECH_OTK;
						currBoxItem.state_name = OrderState.getStateName(OrderState.TECH_OTK);
						checkBox();
						return;
					}
					// check/set item state
					var latch:DbLatch = new DbLatch();
					latch.addEventListener(Event.COMPLETE,onSetBoxItemOTK); 
					latch.addLatch(mpService.setBoxItemOTK(currBoxItem));
					latch.start();
				}
			}
			private function onSetBoxItemOTK(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onSetBoxItemOTK);
					if (latch.complite && latch.resultCode >= OrderState.TECH_OTK){
						// set box state
						currBoxItem.state = OrderState.TECH_OTK;
						currBoxItem.state_name = OrderState.getStateName(OrderState.TECH_OTK);
						checkBox();
					}
				}
			}
			
			[Bindable]
			private var canPack:Boolean;
			
			private function checkBox():void{
				// check all box items complited
				for each( var bi:MailPackageBoxItem in currBox.box.items){
					if (bi.state < OrderState.TECH_OTK) return;
				}
				//complete
				if (mode == OrderState.TECH_OTK){
					currBox.box.state = OrderState.TECH_OTK;
					currBox.box.state_name = OrderState.getStateName(OrderState.TECH_OTK);
					canPack = true;
					return;
				}
				//check/set box state
				var latch:DbLatch = new DbLatch();
				latch.addEventListener(Event.COMPLETE,onSetBoxOTK); 
				latch.addLatch(mpService.setBoxOTK(currBox.box));
				latch.start();
			}
			private function onSetBoxOTK(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onSetBoxOTK);
					if (latch.complite && latch.resultCode >= OrderState.TECH_OTK){
						currBox.state = OrderState.TECH_OTK;
						currBox.box.state = OrderState.TECH_OTK;
						currBox.state_name = OrderState.getStateName(OrderState.TECH_OTK);
						Alert.show('Все заказы коробки '+ order.groupId.toString()+' прошли ОТК. Открыть группу?','',Alert.YES|Alert.NO, this); //, onAlertOpenPackage);
					}				
				}
			}

			private function onCompleteAlert(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					setComplete();
				}
			}
			private function setComplete():void{
				//TODO refactor
				/*
				var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
				var latch:DbLatch= new DbLatch();
				latch.addEventListener(Event.COMPLETE,onCompliteSet);
				latch.addLatch(svc.extraStateSetOTK(currBoxItem.orderID, '', new Date()));
				latch.start();
				*/
			}

			private function setCompletePhoto(all:Boolean):void{
				if(!currPGID && !all) return;
				var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
				var latch:DbLatch= new DbLatch();
				latch.addEventListener(Event.COMPLETE,onCompliteSet);
				if(all){
					latch.addLatch(svc.extraStateSetOTKbyPG(order.id, new Date()));
				}else{
					latch.addLatch(svc.extraStateSetOTKbyPG(currPGID, new Date()));
				}
				latch.start();
			}

			private function onCompliteSet(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onCompliteSet);
					if(latch.complite){
						//closeView();
						if(order.groupId !=0 && currBox.box.boxID==''){
							//check package
							latch= new DbLatch();
							latch.addEventListener(Event.COMPLETE,onPackageState);
							latch.addLatch(mpService.getStateByOrders(order.source, order.groupId));
							latch.start();
						}else{
							closeView();
						}
					}
				}
			}
			private function onPackageState(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onPackageState);
					if(latch.complite){
						if(latch.resultCode>=OrderState.TECH_OTK){
							Alert.show('Все заказы группы '+ order.groupId.toString()+' прошли ОТК. Упаковка?','',Alert.YES|Alert.NO, this, onAlertSwitchToPack);
						}else{
							closeView();
						}
					}
				}
			}
			private function onAlertSwitchToPack(evt:CloseEvent):void {
				if (evt.detail == Alert.NO) {
					closeView();
					return;
				}
				mode=OrderState.TECH_OTK;
				show(currPGID, currBook);
			}
			
			private function onAlertOpenPackage(evt:CloseEvent):void {
				if (evt.detail == Alert.YES){
					var pop:MailPackagePopUp= new MailPackagePopUp();
					pop.addEventListener(PopUpEvent.CLOSE,onMailPackagePopUpClose);
					pop.loadFromWeb(order.source, order.groupId, true);

				}
				closeView();
			}

			private function onMailPackagePopUpClose(event:PopUpEvent):void{
				var pop:MailPackagePopUp=event.target as MailPackagePopUp;
				pop.removeEventListener(PopUpEvent.CLOSE,onMailPackagePopUpClose);

				//recheck real package state (need to call choiseSpace?)
				var latch:DbLatch = new DbLatch();
				latch.addLatch(mpService.getStateByPackages(order.source, new ArrayCollection([order.groupId])));
				latch.start();
			}

			protected function lstBookList_changeHandler(event:IndexChangeEvent):void{
				currBookKit =  lstBookList.selectedItem as BookKit;
				if(currBookKit){
					currBook = currBookKit.book;
				}else{
					currBook=0;
				}
			}
			
			protected function btPreview_clickHandler(event:MouseEvent):void{
				if(currentState=='preview' || currBook<=0) return; 
				if(vPreview){
					if(vPreview.prepare(order)){
						currentState='preview';
						vPreview.showBook(currBook);
					}else{
						currentState='info';
					}
				}else{
					currentState='preview';
				}
			}
			
			protected function vPreview_creationCompleteHandler(event:FlexEvent):void{
				if (vPreview.prepare(order)){
					vPreview.showBook(currBook);
				}else{
					currentState='info';
				}
			}
			
			protected function btComplitePhoto_clickHandler(event:MouseEvent):void{
				setCompletePhoto(false);
			}
			
			protected function btCompliteAllPhoto_clickHandler(event:MouseEvent):void{
				Alert.show("Закрыть все группы с фотопечатью?","",Alert.OK | Alert.CANCEL,this,onConfirm);
			}
			protected function onConfirm(event:CloseEvent):void{
				setCompletePhoto(true);
			}

			protected function dgBoxItems_selectionChangeHandler(event:GridSelectionEvent):void{
				currBoxItem = dgBoxItems.selectedItem as MailPackageBoxItem;
				currBook=0;
				currBookKit=null;
				refresh();	
			}
			
			protected function btPack_clickHandler(event:MouseEvent):void{
				var latch:DbLatch = new DbLatch();
				latch.addEventListener(Event.COMPLETE,onBoxPacked); 
				latch.addLatch(mpService.setBoxPacked(currBox.box));
				latch.start();
			}
			private function onBoxPacked(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onBoxPacked);
					if (latch.complite){
						//close
						closeView();
					}
				}
			}
			
			protected function btPackIcomplete_clickHandler(event:MouseEvent):void{
				var box:MailPackageBox = currBox.box.clone(); 
				var bkList:Array = [];
				var biList:Array = [];
				for each(var bk:OrderBook in currBox.box.books){
					if (bk.state != 450){
						bkList.push(bk);	
					}
				}
				for each(var bi:MailPackageBoxItem in currBox.box.items){
					if (bi.state != 450){
						biList.push(bi);	
					}
				}
				/*
				box.items = new ListCollectionView();
				box.items.list = biList;
				box.books = new ListCollectionView();
				box.books.list = bkList;
				*/
				var latch:DbLatch = new DbLatch();
				latch.addEventListener(Event.COMPLETE,onBoxPacked); 
				latch.addLatch(mpService.setBoxIncomplete(box.boxID, biList, bkList));
				latch.start();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dtFormater" dateTimePattern="dd.MM.yyyy HH:mm"/>
	</fx:Declarations>
	
	
	<s:states>
		<s:State name="book" stateGroups="info"/>
		<s:State name="photo" stateGroups="info"/>
		<s:State name="preview"/>
	</s:states>

	<s:Rect radiusX="6" top="0" left="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="#444444" weight="1"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#cccccc"/>
		</s:fill>
	</s:Rect>
	
	<s:HGroup gap="0" top="10" left="10" right="10" bottom="10" includeIn="info">
		<s:VGroup gap="10" width="100%" height="100%">
			<s:Label fontWeight="bold" fontSize="14" text="{mode == OrderState.TECH_OTK_PICKING? 'ОТК':'Упаковка'}"/>
			<s:Form id="frmOrder" width="100%" backgroundAlpha="{currBox.box.state == OrderState.TECH_OTK? 0.5: 0}" backgroundColor="green" fontSize="14">
				<s:layout>
					<s:FormLayout gap="-12"/>
				</s:layout>
				<s:FormItem label="Группа заказов">
					<s:TextInput text="{currBox.source_name} {currBox.id}" editable="false" width="100%"/>
				</s:FormItem> 
				<s:FormItem label="Коробка">
					<s:TextInput text="{currBox.box.boxNum}" editable="false" width="100%"/>
				</s:FormItem> 
				<s:FormItem label="Статус">
					<s:TextInput text="{currBox.box.state_name}" editable="false" width="100%"/>
				</s:FormItem> 
				<s:FormItem label="Полка">
					<s:TextInput text="{currBox.rackSpace.rack_name?currBox.rackSpace.rack_name:''} - {currBox.rackSpace.name?currBox.rackSpace.name:''}" editable="false" width="100%"/>
				</s:FormItem> 
			</s:Form>
			<s:DataGrid id="dgBoxItems" selectionMode="singleRow"  
						fontSize="14" width="100%" height="100%"
						selectionChange="dgBoxItems_selectionChangeHandler(event)"
						dataProvider="{currBox.box.items}" locale="ru_RU" columns="{MailPackageBoxItem.columns()}">
				<s:rowBackground>
					<fx:Component>
						<itemRenderer:TechBoxItemDataGridRowBackground/>
					</fx:Component>
				</s:rowBackground>
			</s:DataGrid>			
		</s:VGroup>
		<s:Scroller width="500" height="100%">
			<s:VGroup width="100%">
				<s:Form width="100%" backgroundAlpha="0" fontSize="14">
					<s:layout>
						<s:FormLayout gap="-12"/>
					</s:layout>
					
					<s:FormItem label="Заказ">
						<s:TextInput id="tiID" text="{order.id}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Источник">
						<s:TextInput id="tiSource" text="{order.source_name}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Тип">
						<s:TextInput text="{pgBlok.book_type_name}" editable="false" width="100%" includeIn="book"/>
						<s:TextInput text="Фото" editable="false" width="100%" includeIn="photo"/>
						<s:TextInput text="{order.extraInfo.calc_type}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Обложка" includeIn="book">
						<s:TextInput text="{order.extraInfo.cover}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Формат" includeIn="book">
						<s:TextInput text="{order.extraInfo.format}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Алиас">
						<s:TextInput text="{pgBlok.path}" editable="false" width="100%"/>
					</s:FormItem> 

					<s:FormItem label="Форзац" includeIn="book">
						<s:TextInput text="{order.extraInfo.endpaper}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Прослойка" includeIn="book">
						<s:TextInput text="{order.extraInfo.interlayer}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Углы" includeIn="book">
						<s:TextInput text="{order.extraInfo.corner_type}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Каптал" includeIn="book">
						<s:TextInput text="{order.extraInfo.kaptal}" editable="false" width="100%"/>
					</s:FormItem>
					
					<s:FormItem label="Бумага" includeIn="photo">
						<s:TextInput text="{pgBlok.paper_name}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Размер" includeIn="photo">
						<s:TextInput text="{pgBlok.height} x {pgBlok.width}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Количество" includeIn="photo">
						<s:TextInput text="{pgBlok.prints}" editable="false" width="100%"/>
					</s:FormItem> 

				</s:Form>
				<s:Form width="100%" backgroundAlpha="0" fontSize="14" includeIn="book">
					<s:layout>
						<s:FormLayout gap="-12"/>
					</s:layout>
					<s:FormHeading label="Обложка"/>
					<s:FormItem label="Размер">
						<s:TextInput text="{pgCover.height}x{pgCover.width}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Бумага">
						<s:TextInput text="{pgCover.paper_name}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Печать">
						<s:TextInput text="{pgCover.is_pdf?'Полиграфия':'Фотопечать'}" editable="false" width="100%"/>
					</s:FormItem>
					<s:FormItem />
					<s:FormHeading label="Блок"/>
					<s:FormItem label="Размер">
						<s:TextInput text="{pgBlok.height}x{pgBlok.width}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Бумага">
						<s:TextInput text="{pgBlok.paper_name}" editable="false" width="100%"/>
					</s:FormItem> 
					<s:FormItem label="Печать">
						<s:TextInput text="{pgBlok.is_pdf?('Полиграфия '+(pgBlok.is_duplex?'двусторонняя':'односторонняя')):'Фотопечать'}" editable="false" width="100%"/>
					</s:FormItem> 
				</s:Form>
			</s:VGroup>
		</s:Scroller>
		<s:VGroup gap="10" height="100%" includeIn="book">
			<s:Spacer height="10"/>
			<s:HGroup gap="5" verticalAlign="baseline" fontSize="14">
				<s:Label text="Книг" fontWeight="bold" width="{lbBC.width}" />
				<s:TextInput text="{bookTotal.toString()}" editable="false" width="50"/>
			</s:HGroup>
			<s:HGroup gap="5" verticalAlign="baseline" fontSize="14">
				<s:Label id="lbBC" text="Проверено" fontWeight="bold"/>
				<s:TextInput text="{bookComplited.toString()}" editable="false" width="50"/>
			</s:HGroup>
			<s:List id="lstBookList" contentBackgroundAlpha="0" borderVisible="false"
					itemRenderer="com.photodispatcher.view.itemRenderer.BookCheckRenderer"
					selectedItem="{currBookKit}" change="lstBookList_changeHandler(event)"
					dataProvider="{order.otkBookKits}" width="200" height="100%"/>
		</s:VGroup>
		<s:Spacer width="10"/>
		<s:VGroup gap="10" height="100%" fontSize="14">
			<s:Button id="btPreview" label="Просмотр" enabled="{currBook!=0}" click="btPreview_clickHandler(event)" includeIn="book"/>
			<s:Button id="btComplite" label="Проверена" enabled="{currBook!=0}" click="btComplite_clickHandler(event)" includeIn="book"/>
			<s:Button id="btComplitePhoto" label="Проверено" click="btComplitePhoto_clickHandler(event)" includeIn="photo"/>
			<s:Button id="btCompliteAllPhoto" label="Закрыть все" click="btCompliteAllPhoto_clickHandler(event)" includeIn="photo"/>
			<s:Spacer height="100%"/>
			<s:Button id="btPrint" label="Печать" visible="{mode == OrderState.TECH_OTK}" enabled="{canPack}"
					  width="100%"/>
			<s:Button id="btPack" label="Упаковано" visible="{mode == OrderState.TECH_OTK}" enabled="{canPack}"
					  width="100%" click="btPack_clickHandler(event)"/>
			<s:Button id="btPackIcomplete" label="Не комплект" visible="{mode == OrderState.TECH_OTK}"
					  click="btPackIcomplete_clickHandler(event)"/>
			<s:Spacer height="10"/>
			<s:Button id="btClose" label="Закрыть" click="btClose_clickHandler(event)"/>
		</s:VGroup>
	</s:HGroup>
	<view:OrderPreviewOTK id="vPreview" top="10" left="10" right="10" bottom="10" includeIn="preview"
							 techPoint="{techPoint}"
							 creationComplete="vPreview_creationCompleteHandler(event)"
							 close="{currentState='book'}"/>
</s:Group>
