<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.Order;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.SourceType;
			import com.photodispatcher.model.mysql.entities.TechLog;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.model.mysql.services.OrderService;
			import com.photodispatcher.model.mysql.services.OrderStateService;
			import com.photodispatcher.model.mysql.services.TechService;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.service.barcode.ValveCom;
			import com.photodispatcher.util.ArrayUtil;
			
			import org.granite.tide.Tide;
			
			import spark.formatters.DateTimeFormatter;
			import spark.utils.TextFlowUtil;
			
			public static const LOG_LEN_LIMIT:int=4000;
			public static const BAR_LEN_LIMIT:int=2000;
			
			public var techPoint:TechPoint;
			
			public var alertSize:uint=40;
			public var alertTime:uint=7;

			
			private var _barcodeReaderCover:ComReader;
			public function get barcodeReaderCover():ComReader{
				return _barcodeReaderCover;
			}
			public function set barcodeReaderCover(value:ComReader):void{
				if(_barcodeReaderCover){
					_barcodeReaderCover.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCodeCover);
					_barcodeReaderCover.removeEventListener(BarCodeEvent.BARCODE_CONNECTED, onConnected);
					_barcodeReaderCover.removeEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onDisconnected);
					_barcodeReaderCover.removeEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
				_barcodeReaderCover = value;
				if(_barcodeReaderCover){
					_barcodeReaderCover.addEventListener(BarCodeEvent.BARCODE_READED,onBarCodeCover);
					_barcodeReaderCover.addEventListener(BarCodeEvent.BARCODE_CONNECTED, onConnected);
					_barcodeReaderCover.addEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onDisconnected);
					_barcodeReaderCover.addEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
			}

			private var _barcodeReaderBlock:ComReader;
			public function get barcodeReaderBlock():ComReader{
				return _barcodeReaderBlock;
			}
			public function set barcodeReaderBlock(value:ComReader):void{
				if(_barcodeReaderBlock){
					_barcodeReaderBlock.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCodeBlock);
					_barcodeReaderBlock.removeEventListener(BarCodeEvent.BARCODE_CONNECTED, onConnected);
					_barcodeReaderBlock.removeEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onDisconnected);
					_barcodeReaderBlock.removeEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
				_barcodeReaderBlock = value;
				if(_barcodeReaderBlock){
					_barcodeReaderBlock.addEventListener(BarCodeEvent.BARCODE_READED,onBarCodeBlock);
					_barcodeReaderBlock.addEventListener(BarCodeEvent.BARCODE_CONNECTED, onConnected);
					_barcodeReaderBlock.addEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onDisconnected);
					_barcodeReaderBlock.addEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
			}

			private var _flap:ValveCom;
			[Bindable]
			public function get flap():ValveCom{
				return _flap;
			}
			
			public function set flap(value:ValveCom):void{
				if(_flap){
					_flap.removeEventListener(BarCodeEvent.BARCODE_READED,onFlapMsg);
					_flap.removeEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
				_flap = value;
				if(_flap){
					_flap.addEventListener(BarCodeEvent.BARCODE_READED,onFlapMsg);
					_flap.addEventListener(BarCodeEvent.BARCODE_ERR, onError);
				}
			}
			
			
			private var logText:String = '';
			
			private var _barText:String='';
			[Bindable]
			public function get barText():String{
				return _barText;
			}
			public function set barText(value:String):void{
				if(!value){
					_barText='';
					return;
				}
				var fmt:DateTimeFormatter=new DateTimeFormatter();
				fmt.dateTimePattern='HH:mm:ss';
				
				var txt:String=fmt.format(new Date())+': '+ value+_barText; 
				if(txt.length>BAR_LEN_LIMIT) txt=txt.substr(0,BAR_LEN_LIMIT);
				_barText=txt;
			}
			
			
			private function onError(event:BarCodeEvent):void{
				barText=event.barcode+'\n';
				logToScreen('Ошибка: '+event.error,true);
				
			}
			
			private function onDisconnected(event:BarCodeEvent):void{
				logToScreen('Ошибка: отключен '+event.barcode,true);
				
			}

			private function onConnected(event:BarCodeEvent):void{
				logToScreen('Подключен '+event.barcode);
				
			}
			
			private function onFlapMsg(event:BarCodeEvent):void{
				logToScreen('Защелка: '+event.barcode,true);
			}
			
			private var currentOrder:Order;
			private var currentSubId:String;
			private var currentPgId:String;
			private var currentBook:int;
			
			private function onBarCodeBlock(event:BarCodeEvent):void{
				var barcode:String=event.barcode;
				barText='b:'+barcode+'\n';
				var newScanId:String=PrintGroup.idFromBookBarcode(barcode);
				var newOrderId:String=PrintGroup.orderIdFromBookBarcode(barcode);
				var newBook:int=PrintGroup.bookFromBookBarcode(barcode);
				
				if(!newScanId || !newOrderId){
					logToScreen('---------- Не верный штрих код: '+barcode+' ----------',true);
					return;
				}
				if(newBook<=0){
					logToScreen('---------- Не верный номер книги: '+newBook.toString()+' ----------',true);
					return;
				}

				
				if(newScanId==currentPgId && currentBook==newBook){
					//doublescan?
					return;
				}
				//check sequence
				if(currentPgId){
					logToScreen('Ошибка последовательности операций.',true);
					logToScreen('Не установлена обложка для блока '+currentBookCaption,true);
					showAlert('Не установлена обложка для блока '+currentBookCaption);
				}
				currentPgId=newScanId;
				currentBook=newBook;
				logToScreen('Установлен блок '+currentPgId+' книга '+currentBook.toString());
				
				if(!currentOrder || currentOrder.id!=newOrderId){
					//load order
					currentOrder=null;
					var latch:DbLatch=new DbLatch(true);
					var svc:OrderService=Tide.getInstance().getContext().byType(OrderService,true) as OrderService;
					latch.addEventListener(Event.COMPLETE,onOrderLoad);
					latch.addLatch(svc.loadOrderVsChilds(newOrderId));
					latch.start();
				}else{
					setOrder();
				}
			}
			private function onOrderLoad(event:Event):void{
				var latch:DbLatch=event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onOrderLoad);
					if(!latch.complite){
						logToScreen('Ошибка базы данных '+latch.error,true);
						reset();
					}else{
						currentOrder=latch.lastDataItem as Order;
						setOrder();
					}
				}else{
					logToScreen('Ошибка выполнения (null latch)',true);
					reset();
				}
			}
			
			private function setOrder():void{
				if(!currentPgId || !currentOrder || !currentOrder.printGroups){
					logToScreen('Ошибка. Нет данных заказа',true);
					reset();
					return;
				}
				//look for pg
				var pg:PrintGroup=ArrayUtil.searchItem('id',currentPgId,currentOrder.printGroups.toArray()) as PrintGroup;
				if(!pg){
					logToScreen('Ошибка. Нет данных группы печати '+currentPgId,true);
					reset();
					return;
				}
				currentSubId=pg.sub_id;
				logToScreen('Ожидаю обложку '+currentBookCaption);
			}
			
			private function get currentBookCaption():String{
				var result:String='';
				if(currentOrder) result= currentOrder.humanId;
				if(currentSubId) result= result+'-'+currentSubId;
				if(currentBook) result= result+':'+currentBook.toString();
				return result;
			}

			private function onBarCodeCover(event:BarCodeEvent):void{
				var barcode:String=event.barcode;
				//parce barcode
				var pgId:String;
				barText='c:'+barcode+'\n';
				
				var newScanId:String=PrintGroup.idFromBookBarcode(barcode);
				var newOrderId:String=PrintGroup.orderIdFromBookBarcode(barcode);
				var newBook:int=PrintGroup.bookFromBookBarcode(barcode);

				if(!newScanId || !newOrderId){
					logToScreen('---------- Не верный штрих код: '+barcode+' ----------',true);
					return;
				}
				if(newBook<=0){
					logToScreen('---------- Не верный номер книги: '+newBook.toString()+' ----------',true);
					return;
				}
				
				//TODO check doble scan

				logToScreen('Установлена обложка '+newScanId+' книга '+newBook.toString());
				if(techPoint){
					//log to data base
					var tl:TechLog= new TechLog();
					tl.log_date=new Date();
					tl.setSheet(newBook,0);
					tl.print_group=newScanId;
					tl.src_id= techPoint.id;
					var latch:DbLatch=new DbLatch();
					var svc:TechService=Tide.getInstance().getContext().byType(TechService,true) as TechService;
					//latch.addEventListener(Event.COMPLETE,onLog);
					latch.addLatch(svc.logByPg(tl));
					latch.start();
				}

				//check sequence
				if(!currentPgId || !currentOrder){
					logToScreen('Ошибка последовательности операций.',true);
					logToScreen('Не установлен блок для обложки',true);
					showAlert('Не установлен блок для обложки');
					return;
				}

				//check cover
				if(currentOrder.id!=newOrderId){
					logToScreen('Неверный заказ обложки '+ newOrderId+', заказ блока '+currentOrder.id,true);
					log2bd(currentPgId,'Неверный заказ обложки '+newOrderId);
					showAlert('Неверный заказ обложки '+ newOrderId+', заказ блока '+currentOrder.id);
					return;
				}
				//look for pg
				var pg:PrintGroup=ArrayUtil.searchItem('id',newScanId,currentOrder.printGroups.toArray()) as PrintGroup;
				if(!pg || pg.sub_id!=currentSubId){
					logToScreen('Неверный подзаказ обложки '+(pg?pg.sub_id:'null')+', подзаказ блока '+currentSubId,true);
					showAlert('Неверный подзаказ обложки '+(pg?pg.sub_id:'null')+', подзаказ блока '+currentSubId);
					if(!pg){
						log2bd(currentPgId,'Ненайдена группа обложки '+newScanId);
					}else{
						log2bd(currentPgId,'Неверный подзаказ обложки '+pg.sub_id +'('+currentSubId+')');
					}
					return;
				}
				if(currentBook!=newBook){
					logToScreen('Неверная книга обложки '+newBook.toString() +', книга блока '+currentBook.toString(),true);
					showAlert('Неверная книга обложки '+newBook.toString() +', книга блока '+currentBook.toString());
					log2bd(currentPgId,'Неверная книга обложки '+newBook.toString() +'('+currentBook.toString()+')');
					return;
				}
				
				//complited
				currentPgId='';
				
				logToScreen('Книга заказа '+currentBookCaption+' - OK',false);

			}
			
			private function log2bd(pgId:String, msg:String):void{
				if(!techPoint || !pgId || !msg) return;
				var latch:DbLatch=new DbLatch();
				var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
				//latch.addEventListener(Event.COMPLETE,onLog);
				latch.addLatch(svc.logStateByPGroup(pgId, techPoint.tech_type, msg));
				latch.start();
				
			}

			private function showAlert(msg:String):void{
				var ap:AlertrPopup=new AlertrPopup();
				ap.show(msg, alertTime, alertSize);
			}
			
			private function logToScreen(msg:String, isError:Boolean=false):void{
				var color:String=isError?"'#990000'":"'#006600'";
				var bold:String=isError?"fontWeight='bold'":'';
				var txtSize:String=isError?"fontSize='14'":'';
				var fmt:DateTimeFormatter=new DateTimeFormatter();
				fmt.dateTimePattern='HH:mm:ss';

				logText= "<span>" + fmt.format(new Date()) + " </span>"+"<span color="+color+" "+bold+" "+txtSize+">" + msg + "</span> <br />"+logText;

				//cut
				if(logText.length> LOG_LEN_LIMIT){
					var idx:int=logText.indexOf('<br />',LOG_LEN_LIMIT);
					if(idx!=-1){
						logText=logText.substr(0,idx+6);
					}
				}

				try{
					logTextArea.textFlow=TextFlowUtil.importFromString(logText);
				}catch(error:Error){
					trace('TextFlow err, txt: '+logText);
					trace(error.message);
				}
			}
			
			public function start():void{
				cleanLog();
				reset();
				barText='';
				if(!techPoint){
					//TODO rise err or log in screen
					logToScreen('---------- Не задана технологическая точка ----------',true);
				}
				if(barcodeReaderBlock) barcodeReaderBlock.start();
				if(barcodeReaderCover) barcodeReaderCover.start();
			}
			
			public function stop():void{
				if(barcodeReaderBlock) barcodeReaderBlock.stop();
				if(barcodeReaderCover) barcodeReaderCover.stop();
				cleanLog();
				reset();
			}
			
			public function reset():void{
				currentOrder=null;
				currentSubId='';
				currentPgId='';
				currentBook=0;
			}
			
			private function cleanLog():void{
				logText='';
				logTextArea.text='';
			}
			
			protected function btFlapOn_clickHandler(event:MouseEvent):void{
				if(flap) flap.setOn();
			}
			
			protected function btFlapOff_clickHandler(event:MouseEvent):void{
				if(flap) flap.setOff();
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup gap="5" width="100%" height="100%" horizontalAlign="right" 
			  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<s:HGroup gap="5" width="100%" height="100%">
			<s:TextArea id="logTextArea" width="100%" height="100%" editable="false"/>
			<s:TextArea id="barTextArea" text="{barText}" fontSize="10" width="170" height="100%" editable="false"/>
		</s:HGroup>
		<s:HGroup gap="5" width="100%">
			<s:Button label="Очистить" click="{cleanLog()}"/>
			<s:Spacer width="5"/>
			<s:Button label="Сброс" click="{reset()}"/>
			<!--<s:Button id="btFlapOn" label="Зщелка Вкл" click="btFlapOn_clickHandler(event)" enabled="{flap!=null}"/>
			<s:Button id="btFlapOff" label="Зщелка Выкл" click="btFlapOff_clickHandler(event)" enabled="{flap!=null}"/>-->
		</s:HGroup> 
	</s:VGroup>
	
</s:Group>
