<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="{init()}"
		 keyDown="onKey(event)">
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.FieldValue;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.Source;
			import com.photodispatcher.model.mysql.entities.SpyData;
			import com.photodispatcher.model.mysql.services.OrderStateService;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.view.menu.GridContexMenu;
			import com.photodispatcher.view.print.PrintDataGridView;
			
			import flash.globalization.DateTimeStyle;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.printing.FlexPrintJob;
			import mx.printing.PrintDataGrid;
			
			import org.granite.tide.Tide;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.gridClasses.GridColumn;
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			import spark.formatters.DateTimeFormatter;
			private var timer:Timer;
			[Bindable]
			private var refreshInterval:int;
			[Bindable]
			private var delayInterval:int;

			[Bindable]
			private var listAC:ArrayCollection= new ArrayCollection();
			[Bindable]
			private var gridColumnsAC:ArrayCollection;
			private var printGridColumns:Array;
			[Bindable]
			private var techTypeAC:ArrayCollection;
			[Bindable]
			private var bookPartAC:ArrayCollection= new ArrayCollection([{id:0, label:'-'}, {id:1, label:'Обложка'}, {id:2, label:'Блок'}]);

			private var startState:int;
			private var endState:int;
			
			public function start():void{
				refresh();
			}
			
			public function stop():void{
				if(timer){
					timer.stop();
					timer.removeEventListener(TimerEvent.TIMER, onTimer);
					timer=null;
				}
			}

			private var initComplite:Boolean=false;
			private function init():void{
				techTypeAC=Context.getAttribute('tech_typeValueList') as ArrayCollection;
				createColumnsAC();
				
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				if (so.size>0){
					refreshInterval=so.data.refreshInterval;
					delayInterval=so.data.delayInterval;
					startState=so.data.startState;
					endState=so.data.endState;
				}
				if(!delayInterval) delayInterval=4;
				if(!startState) startState= OrderState.PRN_POST;
				if(!endState) endState= OrderState.TECH_COVER_BLOK_PICKING;
				if(techTypeAC){
					/*
					var sort:Sort= new Sort();
					sort.fields=[new SortField('state',false,true)];
					techTypeAC.sort=sort;
					techTypeAC.refresh();
					*/
					var arr:Array=techTypeAC.source;
					var it:FieldValue=ArrayUtil.searchItem('value',startState,arr) as FieldValue; 
					if(it && ddStartOp) ddStartOp.selectedItem=it;
					it=ArrayUtil.searchItem('value',endState,arr) as FieldValue;
					if(it && ddEndOp) ddEndOp.selectedItem=it;
				}
				initComplite=true;
				refresh();
			}
			
			private function startTimer():void{
				if(timer && timer.running) timer.stop();
				if(refreshInterval<=0) return;
				if(!timer){
					timer= new Timer(refreshInterval*60000,1);
					timer.addEventListener(TimerEvent.TIMER, onTimer);
				}
				timer.delay=refreshInterval*60000;
				timer.start();
			}

			private function onTimer(evt:TimerEvent):void{
				refresh();
			}

			private function createColumnsAC():void{
				gridColumnsAC= new ArrayCollection();
				
				var col:GridColumn = new GridColumn('id'); col.headerText='Заказ'; gridColumnsAC.addItem(col);
				col= new GridColumn('sub_id'); col.headerText='Подзаказ'; gridColumnsAC.addItem(col); 
				col= new GridColumn('bt_name'); col.headerText='Тип'; gridColumnsAC.addItem(col); 
				col= new GridColumn('alias'); col.headerText='Алиас'; gridColumnsAC.addItem(col); 
				col= new GridColumn('op_name'); col.headerText='Операция'; gridColumnsAC.addItem(col); 
				var fmt:DateTimeFormatter=new DateTimeFormatter(); fmt.dateStyle=fmt.timeStyle=DateTimeStyle.SHORT; 
				col= new GridColumn('start_date'); col.headerText='Старт'; col.formatter=fmt; col.width=120; gridColumnsAC.addItem(col);
				fmt=new DateTimeFormatter(); fmt.dateStyle=fmt.timeStyle=DateTimeStyle.SHORT; 
				col= new GridColumn('state_date'); col.headerText='Конец'; col.formatter=fmt; col.width=120; gridColumnsAC.addItem(col);
				fmt=new DateTimeFormatter(); fmt.dateStyle=fmt.timeStyle=DateTimeStyle.SHORT; 
				col= new GridColumn('resetDate'); col.headerText='Сброс'; col.formatter=fmt; col.width=120; gridColumnsAC.addItem(col);
				col= new GridColumn('bp_name'); col.headerText='Часть книги'; gridColumnsAC.addItem(col);
				col= new GridColumn('delay'); col.headerText='Задержка'; gridColumnsAC.addItem(col);

				printGridColumns=[];
				var pc:DataGridColumn;
				
				pc= new DataGridColumn('id'); pc.headerText='Заказ'; pc.width=70;  printGridColumns.push(pc);
				pc= new DataGridColumn('sub_id'); pc.headerText='Подзаказ'; pc.width=40;  printGridColumns.push(pc);
				pc= new DataGridColumn('op_name'); pc.headerText='Операция'; printGridColumns.push(pc);
				pc= new DataGridColumn('alias'); pc.headerText='Алиас'; printGridColumns.push(pc);
				pc= new DataGridColumn('start_date'); pc.headerText='Старт';  pc.width=80; pc.labelFunction=dateLabelFunction; printGridColumns.push(pc);
				pc= new DataGridColumn('state_date'); pc.headerText='Конец';  pc.width=80; pc.labelFunction=dateLabelFunction; printGridColumns.push(pc);
				pc= new DataGridColumn('resetDate'); pc.headerText='Сброс';  pc.width=80; pc.labelFunction=dateLabelFunction; printGridColumns.push(pc);
				pc= new DataGridColumn('bp_name'); pc.headerText='Часть книги'; pc.width=50; printGridColumns.push(pc);
				pc= new DataGridColumn('delay'); pc.headerText='Задержка'; pc.width=50; printGridColumns.push(pc);
			}
			
			private function dateLabelFunction(item:Object, column:DataGridColumn):String{
				var fmt:DateTimeFormatter=new DateTimeFormatter();
				fmt.dateTimePattern='dd.MM.yy H:mm';
				if(item[column.dataField]){
					return fmt.format(item[column.dataField]);
				}
				return '';
			}
			
			private function refresh():void{
				if(!initComplite) return;
				if(timer && timer.running) timer.stop();
				var dt:Date= new Date();
				var bPart:int=0;
				if(ddBookPart.selectedItem) bPart=ddBookPart.selectedItem.id;
				if(delayInterval) dt= new Date(dt.fullYear,dt.month,dt.date,dt.hours-delayInterval,dt.minutes);
				
				/*
				var dao:BaseDAO= new BaseDAO();
				var sql:String;
				var params:Array
				CursorManager.setBusyCursor();
				sql='DELETE FROM tmp_orders_spy';
				if (dao.executeSync(sql)){
					//finde orders
					sql='INSERT INTO tmp_orders_spy (id, state, start_date, state_date, max_date)'+
						'SELECT oe2.id, oe2.state, oe2.start_date, oe2.state_date, t.lastdt'+	
						' FROM'+
						' (SELECT o.id, MAX(IFNULL(oe.state_date,oe.start_date)) lastdt'+ 
						' FROM orders o'+
						' INNER JOIN order_extra_state oe ON oe.id=o.id and oe.state BETWEEN ? AND ?'+
						' INNER JOIN config.src_type st ON oe.state=st.state AND st.loc_type=3 AND (0=? OR st.book_part IN(0,?))'+
						' WHERE o.state < ?'+  
						' GROUP BY o.id'+
						' HAVING MAX(IFNULL(oe.state_date,oe.start_date)) < ?) t'+
						' INNER JOIN order_extra_state oe2 ON t.id=oe2.id AND t.lastdt IN (oe2.start_date,oe2.state_date)';
					//params=[startState, endState, OrderState.TECH_OTK, dt, bPart, bPart];
					params=[startState, endState, bPart, bPart, OrderState.TECH_OTK, dt];
					if (dao.executeSync(sql,params)){
						//del fbooks
						sql='DELETE FROM tmp_orders_spy'+
							' WHERE EXISTS'+
							' (SELECT 1 FROM suborders so WHERE so.order_id=tmp_orders_spy.id)';
						if (dao.executeSync(sql)){
							//del simple foto
							sql='DELETE FROM tmp_orders_spy'+
								' WHERE NOT EXISTS'+
								' (SELECT 1 FROM print_group pg WHERE pg.order_id=tmp_orders_spy.id AND pg.book_type IN (1,2,3))';
							if (dao.executeSync(sql)){
								//set reset date
								sql='UPDATE tmp_orders_spy'+
									' SET reset_date =(SELECT max(so.state_date) FROM order_exstate_prolong so WHERE so.id=tmp_orders_spy.id AND so.state=tmp_orders_spy.state)'+
									' WHERE EXISTS'+
									' (SELECT 1 FROM order_exstate_prolong so WHERE so.id=tmp_orders_spy.id AND so.state=tmp_orders_spy.state)';
								if (dao.executeSync(sql)){
									//mark reset
									sql='UPDATE tmp_orders_spy'+
										' SET reset = 1'+
										' WHERE reset_date >= ?';
									if (dao.executeSync(sql,[dt])){
										//final select
										sql='SELECT t.id, t.state, t.start_date, t.state_date, t.reset, t.reset_date, st.name op_name, st.book_part, bp.name bp_name,'+
											" (strftime('%s', ?) - strftime('%s', t.max_date))/3600 AS delay,"+	
											' pg.path'+
											' FROM tmp_orders_spy t'+
											' INNER JOIN config.src_type st ON t.state=st.state AND st.loc_type=3'+
											' INNER JOIN config.book_part bp ON bp.id = st.book_part'+
											" LEFT OUTER JOIN print_group pg ON pg.id=t.id || '_1'"+
											' ORDER BY t.max_date';
										if (dao.runSelect(sql,[new Date()])){
											listAC=dao.rawList;
											listAC.filterFunction=filterList;
											listAC.refresh();
										}
									}
								}
							}
						}
					}
				}
				CursorManager.removeBusyCursor();
				
				if(dgMonitor) dgMonitor.columnHeaderGroup.visibleSortIndicatorIndices=new Vector.<int>([]);
				startTimer();
			}
				*/
				listAC=null;
				var latch:DbLatch=new DbLatch();
				//latch.debugName='initSourceLists';
				var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
				latch.addEventListener(Event.COMPLETE,onDataLoad);
				latch.addLatch(svc.loadSpyData(dt, startState, endState, bPart));
				latch.start();
				return;
			}
			private function onDataLoad(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onDataLoad);
					if(latch.complite){
						listAC=latch.lastDataAC;
						listAC.filterFunction=filterList;
						listAC.refresh();
					}
				}
				if(dgMonitor) dgMonitor.columnHeaderGroup.visibleSortIndicatorIndices=new Vector.<int>([]);
				startTimer();
			}

			
			private function filterList(item:Object):Boolean {
				if (chkReset.selected) return true;
				return !item.reset;
			}

			protected function nsRefreshInterval_changeHandler(event:Event):void{
				refreshInterval= nsRefreshInterval.value;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.refreshInterval = refreshInterval;
				so.flush();  
				startTimer();
			}
			
			protected function nsDelay_changeHandler(event:Event):void{
				delayInterval= nsDelay.value;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.delayInterval = delayInterval;
				so.flush();
				refresh();
			}
			
			protected function ddStartOp_changeHandler(event:IndexChangeEvent):void{
				var it:FieldValue=ddStartOp.selectedItem as FieldValue;
				if(!it) return;
				startState=it.value;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.startState = startState;
				so.flush();
				refresh();
			}
			
			protected function ddEndOp_changeHandler(event:IndexChangeEvent):void{
				var it:FieldValue=ddEndOp.selectedItem as FieldValue;
				if(!it) return;
				endState=it.value;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.endState = endState;
				so.flush();
				refresh();
			}
			
			private function onKey(e:KeyboardEvent):void{
				if(e.ctrlKey && e.keyCode==70){
					//order lookup
					var pop:OrderSearchPopup=new OrderSearchPopup();
					pop.open(null);
				}
			}

			
			private var ordersGridMenu:GridContexMenu;
			protected function dgMonitor_creationCompleteHandler(event:FlexEvent):void{
				ordersGridMenu= new GridContexMenu(dgMonitor); //, [GridContexMenu.SEPARATOR,GridContexMenu.SHOW_ORDER]);
				ordersGridMenu.addItem('Выполнен',completeCallBack);
				ordersGridMenu.addItem('Сброс задержки',resetCallBack);
				ordersGridMenu.addItem('');
				ordersGridMenu.addItem('Печать',printCallBack);
				ordersGridMenu.addItem('Состояние',showCallBack);
			}
			
			private function showCallBack(grid:DataGrid,param:int):void{
				var onItem:Object;
				onItem=grid.selectedItem;
				if(onItem && onItem.id){
					var pop:OrderInfoPopup=new OrderInfoPopup();
					pop.show(onItem.id,true);
				}
			}

			private function printCallBack(grid:DataGrid,param:int):void{
				var items:Vector.<Object>=grid.selectedItems;
				if(!items || items.length==0) return;
				if(timer && timer.running) timer.stop();
				var printJob:FlexPrintJob = new FlexPrintJob();
				if(printJob.start()) {
					var itemsAC:ArrayCollection=new ArrayCollection();
					var onItem:Object;
					for each(onItem in items) itemsAC.addItem(onItem);
					
					var printObj:PrintDataGridView= new PrintDataGridView();
					printObj.includeInLayout=false;
					FlexGlobals.topLevelApplication.addElement(printObj);
					printObj.width=printJob.pageWidth;
					printObj.height=printJob.pageHeight;
					printObj.dataGrid.columns=printGridColumns;
					printObj.dataGrid.dataProvider=itemsAC;
					printObj.validateNow();

					while (true){
						printJob.addObject(printObj); //FlexPrintJobScaleType.NONE
						if(printObj.dataGrid.validNextPage){
							printObj.dataGrid.nextPage();
						}else{
							break;
						}
					}
					printJob.send();
					FlexGlobals.topLevelApplication.removeElement(printObj);
				}
				startTimer();
			}

			private function resetCallBack(grid:DataGrid,param:int):void{
				var pop:StringValuePopup= new StringValuePopup();
				pop.addEventListener(PopUpEvent.CLOSE, onResetPopup);
				pop.show('Укажите примечание');
			}
			private function onResetPopup(event:PopUpEvent):void{
				var pop:StringValuePopup= event.target as StringValuePopup;
				if(pop){
					pop.removeEventListener(PopUpEvent.CLOSE, onResetPopup);
					if(event.commit && pop.value){
						resetOrder(pop.value);
					}
				}
			}
			private function resetOrder(comment:String):void{
				if(!comment) return;
				/*
				var onItem:Object=dgMonitor.selectedItem;
				if(onItem && onItem.id && onItem.state){
					var dao:OrderDAO= new OrderDAO();
					dao.addEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderReset);
					dao.prolongExtraState(onItem.id, onItem.state, comment);
				}
				*/
				var onItem:SpyData=dgMonitor.selectedItem as SpyData;
				if(onItem){
					var latch:DbLatch=new DbLatch();
					var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
					latch.addEventListener(Event.COMPLETE,onItemReset);
					latch.addLatch(svc.extraStateProlong(onItem.id,onItem.sub_id, onItem.state,comment));
					latch.start();
				}
			}
			private function onItemReset(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch) latch.removeEventListener(Event.COMPLETE,onItemReset);
				refresh();
			}

			/*
			private function onOrderReset(event:AsyncSQLEvent):void{
				var dao:OrderDAO=event.target as OrderDAO;
				if(dao) dao.removeEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderReset);
				if(event.result==AsyncSQLEvent.RESULT_COMLETED){
					refresh();
				}else{
					Alert.show(event.error,'',4,null,refresh);
				}
			}
			*/

			private var writeQueue:Array=[];
			private var isWriting:Boolean=false;
			private function completeCallBack(grid:DataGrid,param:int):void{
				var items:Vector.<Object>;
				items=grid.selectedItems;
				if(!items || items.length==0) return;
				var onItem:SpyData;
				for each(onItem in items){
					if (onItem) writeQueue.push(onItem);
				}
				if(!isWriting) writeNext();
			}
			
			private function writeNext():void {
				if(writeQueue.length==0){
					//complite
					isWriting=false;
					refresh();
					return;
				}
				/*
				var dao:OrderDAO= new OrderDAO();
				dao.addEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderCompleteSet);
				dao.setExtraStateByTech(writeQueue[0], SourceType.TECH_OTK);
				*/
				var onItem:SpyData=writeQueue[0] as SpyData;
				if(onItem){
					var latch:DbLatch=new DbLatch();
					var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
					latch.addEventListener(Event.COMPLETE,onItemComplite);
					latch.addLatch(svc.extraStateSet(onItem.id, onItem.sub_id, OrderState.TECH_OTK, new Date()));
					latch.start();
				}else{
					writeQueue.shift();
					writeNext()
				}
			}
			private function onItemComplite(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onItemComplite);
					if(latch.complite){
						writeQueue.shift();
					}else{
						writeQueue=[];
					}
					writeNext();
				}
			}
			/*
			private function onOrderCompleteSet(event:AsyncSQLEvent):void{
				var dao:OrderDAO=event.target as OrderDAO;
				if(dao) dao.removeEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderCompleteSet);
				if(event.result==AsyncSQLEvent.RESULT_COMLETED){
					writeQueue.shift();
					writeNext();
				}else{
					isWriting=false;
					Alert.show(event.error,'',4,null,refresh);
				}
			}
			*/

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:VGroup id="gGrid" gap="5" top="0" left="0" right="0" bottom="0">
		<s:HGroup id="gFilters" width="100%" gap="5" horizontalAlign="left" verticalAlign="baseline">
			<s:Spacer width="5"/>
			<s:Label text="Начало"/>
			<s:DropDownList id="ddStartOp" dataProvider="{techTypeAC}" width="180"
							change="ddStartOp_changeHandler(event)"/>

			<s:Spacer width="5"/>
			<s:Label text="Конец" />
			<s:DropDownList id="ddEndOp" dataProvider="{techTypeAC}" width="180"
							change="ddEndOp_changeHandler(event)"/>

			<s:Spacer width="5"/>
			<s:Label text="Часть книги"/>
			<s:DropDownList id="ddBookPart" dataProvider="{bookPartAC}" width="70"
							creationComplete="{ddBookPart.selectedIndex=0}" change="{refresh()}"/>

			<s:Spacer width="5"/>
			<s:Label text="Задержка (ч)"/>
			<s:NumericStepper id="nsDelay" value="{delayInterval}" minimum="0" maximum="300" 
							  width="50" change="nsDelay_changeHandler(event)"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Сброс" toolTip="Показывать сброшенные"/>
			<s:CheckBox id="chkReset" toolTip="Показывать сброшенные" change="{listAC.refresh()}"/>

			<!--<s:TextInput id="tiOrderFilter" width="100" change="{applyOrdersFilter()}"/>-->
			
			<s:Spacer width="100%"/>
			<s:Label text="Обновление (мин)"/>
			<s:NumericStepper id="nsRefreshInterval" value="{refreshInterval}" minimum="0" maximum="120" 
							  width="50" change="nsRefreshInterval_changeHandler(event)"/>
			
			<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refresh()}"
					  cornerRadius="4" width="22" height="22" baseline="4"/>
		</s:HGroup>
		<s:DataGrid id="dgMonitor" selectionMode="multipleRows"
					width="100%" height="100%" 
					dataProvider="{listAC}" locale="ru_RU" columns="{gridColumnsAC}"
					creationComplete="dgMonitor_creationCompleteHandler(event)">
		</s:DataGrid>
		<!--<s:Button id="btAddOrder" label="Добавить" click="btAddOrder_clickHandler(event)" enabled="{manualAdd}"/>-->
	</s:VGroup>

</s:Group>
