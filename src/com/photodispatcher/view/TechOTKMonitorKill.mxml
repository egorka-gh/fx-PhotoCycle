<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:view="com.photodispatcher.view.*"
		 creationComplete="{init()}"
		 >

	<fx:Script>
		<![CDATA[
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.SubOrder;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.model.mysql.services.OrderService;
			import com.photodispatcher.model.mysql.services.OrderStateService;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.view.menu.GridContexMenu;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;
			
			import spark.events.PopUpEvent;

			[Bindable]
			public var techPoint:TechPoint;
			public var isActive:Boolean;

			private function init():void{
				refresh();
			}
			
			private var _barcodeReader:ComReader;
			public function get barcodeReader():ComReader{
				return _barcodeReader;
			}
			public function set barcodeReader(value:ComReader):void{
				if(_barcodeReader){
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
				}
				_barcodeReader = value;
				if(_barcodeReader){
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
				}
			}
			
			private var lastScanId:String; //last pg id
			private var lastSubOrder:SubOrder;
			private var lastBook:int;
			private var newScanId:String;

			private function onBarCode(event:BarCodeEvent):void{
				if(!isActive) return;
				var barcode:String=event.barcode;
				var newBook:int;
				if(newScanId) return; //previouse scan incomplite
				if ((barcode.charAt(0) >= 'A' && barcode.charAt(0) <= 'Z') || (barcode.charAt(0) >= 'a' && barcode.charAt(0) <= 'z')){
					//old barcode vsout bookNum
					newBook=0;
					newScanId=barcode;
				}else{
					newScanId=PrintGroup.idFromBookBarcode(barcode);
					newBook=PrintGroup.bookFromBookBarcode(barcode);
				}
				if(!newScanId){
					Alert.show('Не верный ШК: "'+barcode+'".');
					return;
				}
				lastBook=newBook;
				//check if same id
				if(newScanId==lastScanId && lastSubOrder){
					//show
					newScanId='';
					showOrder(true);
					return;
				}

				var svc:OrderService=Tide.getInstance().getContext().byType(OrderService,true) as OrderService;
				var latch:DbLatch=svc.findeSuborder(barcode,true);
				latch.addEventListener(Event.COMPLETE,onOrderFinde);
				latch.start();
			}
			private function onOrderFinde(e:Event):void{
				var latch:DbLatch=e.target as DbLatch;
				var ordersList:ArrayCollection;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onOrderFinde);
					if(latch.complite){
						ordersList=latch.lastDataAC;
					}
				}
				if(!ordersList){
					lastScanId='';
					newScanId='';
					return;
				}
				if(ordersList.length==1){
					lastScanId=newScanId;
					newScanId='';
					addOrder(ordersList.getItemAt(0) as SubOrder);
				}else{
					lastScanId='';
					var pop:OrderAddPopup=new OrderAddPopup();
					pop.addEventListener(PopUpEvent.CLOSE, onOrderAdd);
					pop.show(newScanId,ordersList);
					newScanId='';
				}
			}
			
			protected function btAdd_clickHandler(event:MouseEvent):void{
				lastBook=0;
				var pop:OrderAddPopup=new OrderAddPopup();
				pop.addEventListener(PopUpEvent.CLOSE, onOrderAdd);
				pop.open(null,true);
			}

			private function onOrderAdd(event:PopUpEvent):void{
				var pop:OrderAddPopup=event.target as OrderAddPopup;
				if(pop) pop.removeEventListener(PopUpEvent.CLOSE, onOrderAdd);
				if(event.commit){
					addOrder(event.data as SubOrder);
				}
			}
			private function addOrder(order:SubOrder):void{
				if(!order) return;
				if(order.prt_qty==0){
					Alert.show('Не определено количество книг в заказе '+order.humanId);
					lastSubOrder=null;
					return;
				}

				lastSubOrder=order;
				var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onAddOrder);
				latch.addLatch(svc.extraStateStartOTK(order.order_id, order.sub_id, techPoint.tech_type));
				latch.start();
			}
			private function onAddOrder(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onAddOrder);
					if(latch.complite){
						if(latch.resultCode<2){
							//started 
							showOrder();
						}else if(latch.resultCode==2){
							Alert.show('Заказ "'+lastSubOrder.humanId+'" уже прошел технологическую операцию');	
							lastSubOrder=null;
						}
					}else{
						lastSubOrder=null;
					}
				}
			}

			private function showOrder(checkClose:Boolean=false):void{
				if(!lastSubOrder) return;
				if(vInfo) vInfo.show(lastSubOrder, lastScanId, lastBook,checkClose);
				currentState='book';
			}
			
			[Bindable]
			private var orderListAC:ArrayCollection;
			
			private function refresh():void{
				var svc:OrderService=Tide.getInstance().getContext().byType(OrderService,true) as OrderService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onRefresh);
				latch.addLatch(svc.loadSubOrdersOtk());
				latch.start();
			}
			private function onRefresh(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onRefresh);
					if(latch.complite){
						orderListAC=latch.lastDataAC;
					}
				}
			}

			public function start():void{
				refresh();
			}
			
			public function stop():void{
			}

			private var ordersGridMenu:GridContexMenu;
			protected function dgMonitor_creationCompleteHandler(event:FlexEvent):void{
				ordersGridMenu= new GridContexMenu(dgMonitor); 
				ordersGridMenu.addItem('Открыть',openCallBack);
				
			}
			private function openCallBack(grid:DataGrid,param:int):void{
				var onItem:SubOrder=grid.selectedItem as SubOrder;
				if(onItem){
					lastBook=0;
					lastSubOrder=onItem;
					showOrder();
				}
			}
			protected function dgMonitor_doubleClickHandler(event:MouseEvent):void{
				openCallBack(dgMonitor,0);
			}

			protected function orderinfootk1_closeHandler(event:Event):void{
				refresh();
				currentState='grid';
			}
			
			protected function vInfo_creationCompleteHandler(event:FlexEvent):void{
				if(lastSubOrder) vInfo.show(lastSubOrder, lastScanId, lastBook);
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="grid"/>
		<s:State name="book"/>
	</s:states>
	<s:VGroup gap="10" top="0" left="0" right="0" bottom="0">
		<s:HGroup width="100%" horizontalAlign="right">
			<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refresh()}"
					  cornerRadius="4" width="22" height="22" baseline="4"/>

		</s:HGroup>
		<s:DataGrid id="dgMonitor" selectionMode="singleRow" includeIn="grid" 
					fontSize="14" width="100%" height="100%"
					creationComplete="dgMonitor_creationCompleteHandler(event)"
					doubleClickEnabled="true" doubleClick="dgMonitor_doubleClickHandler(event)"
					dataProvider="{orderListAC}" locale="ru_RU" columns="{SubOrder.gridColumnsOTK()}"/>
		<s:Button id="btAdd" label="Добавить" fontSize="14" click="btAdd_clickHandler(event)"/>
	</s:VGroup>
	
	<view:OrderInfoOTK id="vInfo" top="0" left="0" right="0" bottom="0" includeIn="book"
					   creationComplete="vInfo_creationCompleteHandler(event)"
					   close="orderinfootk1_closeHandler(event)"  
					   techPoint="{techPoint}"/>
	
</s:Group>
