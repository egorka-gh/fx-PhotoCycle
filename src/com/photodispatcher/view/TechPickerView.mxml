<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="com.photodispatcher.interfaces.ISimpleLogger"
		 creationComplete="{init()}" xmlns:config="com.photodispatcher.view.config.*">
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.LayerAllocation;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.Layerset;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.model.mysql.services.TechPickerService;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.service.barcode.SerialProxy;
			import com.photodispatcher.service.barcode.ValveController;
			import com.photodispatcher.tech.picker.TechPicker;
			
			import flash.globalization.DateTimeStyle;
			import flash.sampler.NewObjectSample;
			import flash.security.RevocationCheckSettings;
			
			import mx.controls.Alert;
			
			import org.granite.tide.Tide;
			
			import spark.events.IndexChangeEvent;
			import spark.formatters.DateTimeFormatter;
			
			public var techPoint:TechPoint;
			public var reversOrder:Boolean;
			public var turnInterval:int;
			public var engineOnStartOn:Boolean=false;
			public var vacuumOnStartOn:Boolean=false;
			public var engineOnErrOff:Boolean=false;
			public var vacuumOnErrOff:Boolean=false;

			public var stopOnComplite:Boolean=false;
			public var pauseOnComplite:Boolean=false;
			public var layerOnComplite:int=0;

			[Bindable]
			private var acTemplates:ArrayCollection;
			[Bindable]
			private var acGroups:ArrayCollection;
			
			private function init():void{
				acGroups=new ArrayCollection(['Начало книги','Разворот','Между разворотами','Конец книги','Конец заказа','Пуск','Пауза','Продолжить','Стоп']);
			}
			
			public var serialProxy:SerialProxy;
			
			[Bindable]
			private var logText:String = '';
			
			private var dtFmt:DateTimeFormatter;

			public function log(mesage:String):void{
				if(!dtFmt){
					dtFmt=new DateTimeFormatter();
					dtFmt.timeStyle=DateTimeStyle.LONG;
					dtFmt.dateTimePattern='dd.MM.yy HH:mm:ss';
				}
				logText=logText+dtFmt.format(new Date())+' '+ mesage+'\n';
			}
			public function clear():void{
				logText='';
			}
			
			private var techGroup:int;
			private function filterTemplates(item:Object):Boolean{
				var s:Layerset=item as Layerset;
				if(!s) return false;
				if(s.layerset_group != techGroup) return false;
				return true;
			}

			[Bindable]
			private var techPicker:TechPicker;
			
			public function start():void{
				techGroup=Context.getAttribute('techGroup.id');
				techPicker= new TechPicker(techGroup);

				var latch:DbLatch= new DbLatch();
				latch.addEventListener(Event.COMPLETE, onStartLatch);
				var svc:TechPickerService=Tide.getInstance().getContext().byType(TechPickerService,true) as TechPickerService;
				latch.addLatch(svc.loadLayersets(Layerset.LAYERSET_TYPE_TEMPLATE, techGroup));
				latch.join(techPicker.init());
				latch.start();
			}
			private function onStartLatch(evt:Event):void{
				var latch:DbLatch= evt.target as DbLatch;
				if(!latch) return;
				latch.removeEventListener(Event.COMPLETE,onStartLatch);
				if(!latch.complite) return;
				acTemplates=latch.lastDataAC;
				if(!acTemplates) return;
				acTemplates.filterFunction=filterTemplates;
				acTemplates.refresh();
				if (acTemplates.length==0) return;
				
				techPicker.serialProxy=serialProxy;
				techPicker.engineOnStartOn=engineOnStartOn;
				techPicker.vacuumOnStartOn=vacuumOnStartOn;
				techPicker.engineOnErrOff=engineOnErrOff;
				techPicker.vacuumOnErrOff=vacuumOnErrOff;
				techPicker.stopOnComplite=stopOnComplite;
				techPicker.pauseOnComplite=pauseOnComplite;
				techPicker.layerOnComplite=layerOnComplite;
				techPicker.reversOrder=reversOrder;
				techPicker.techPoint=techPoint;
				techPicker.turnInterval=turnInterval;
				techPicker.logger=this;
				techPicker.addEventListener(ErrorEvent.ERROR, onPickerErr);
			}

			public function stop():void{
				if(techPicker){
					techPicker.stop();
					techPicker.removeEventListener(ErrorEvent.ERROR, onPickerErr);
					techPicker.destroy();
					//techPicker=null;
				}
			}
			
			private function onPickerErr(event:ErrorEvent):void{
				Alert.show(event.text);	
			}

			protected function ddTemplate_changeHandler(event:IndexChangeEvent):void{
				if(techPicker) techPicker.layerset= ddTemplate.selectedItem as Layerset;
			}
			
			protected function preventChanging(event:IndexChangeEvent):void{
				event.preventDefault();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!--<s:ArrayCollection id="acTrays" source="{techPicker.traySet.tarys}"/>-->
		<s:ArrayCollection id="acLatches" source="{techPicker.latches}"/>
		<s:ArrayCollection id="acSequence" source="{techPicker.currentSequence}"/>
	</fx:Declarations>
	
	<s:VGroup gap="10" width="100%" height="100%">
		<s:HGroup gap="10" width="100%">
			<s:VGroup gap="10" width="100%">
				<s:HGroup gap="5" verticalAlign="baseline">
					<s:Label text="Шаблон"/>
					<s:DropDownList id="ddTemplate" dataProvider="{acTemplates}" labelField="name"
									enabled="{!techPicker.isRunning}"
									change="ddTemplate_changeHandler(event)"
									width="250"/>
					<s:Spacer width="20"/>
					<s:CheckBox id="tgSkipBookNumCheck" selected="@{techPicker.inexactBookSequence}"
								enabled="{!techPicker.isRunning || techPicker.isPaused}"/>
					<s:Label text="Сборка брака"/>
					<s:Spacer width="20"/>
					<s:CheckBox id="tgDetectFirstBook" selected="@{techPicker.detectFirstBook}"
								enabled="{!techPicker.isRunning || techPicker.isPaused}"/>
					<s:Label text="Не полный заказ"/>
				</s:HGroup>
				
				<s:HGroup gap="10" width="100%">
					<s:VGroup gap="5" width="100%">
						<s:HGroup gap="10" width="100%">
							<s:Label text="Заказ: {techPicker.currPgId}"/>
							<s:Label text="Тип книги: {techPicker.currBookTypeName}"/>
							<s:Label text="Книга: {techPicker.currBookIdx.toString()}({techPicker.currBookTot.toString()})"/>
							<s:Label text="Разворот: {techPicker.currSheetIdx.toString()}({techPicker.currSheetTot.toString()})"/>
						</s:HGroup>
						<s:HGroup gap="15" width="100%">
							<s:VGroup gap="7" width="200">
								<s:Label text="Тип: {techPicker.currExtraInfo.calc_type}" width="100%" maxDisplayedLines="1"/>
								<s:Label text="Обложка: {techPicker.currExtraInfo.cover}" width="100%" maxDisplayedLines="1"/>
								<s:Label text="Углы/Каптал: {techPicker.currExtraInfo.corner_type}" width="100%" maxDisplayedLines="1"/>
							</s:VGroup>
							<s:VGroup gap="5" width="100%">
								<s:HGroup gap="5" verticalAlign="baseline">
									<s:Label text="Формат заказа: {techPicker.currExtraInfo.format}" width="200"/>
									<s:Spacer width="5"/>
									<s:Label text="Загружен формат:" width="120" textAlign="right"/>
									<s:DropDownList id="ddCurrFormat" width="150" enabled="false"/>
								</s:HGroup>
								<s:HGroup gap="5" verticalAlign="baseline">
									<s:Label text="Прослойка заказа: {techPicker.currExtraInfo.interlayer}" width="200"/>
									<s:Spacer width="5"/>
									<s:Label text="Шаблон прослойки:" width="120" textAlign="right"/>
									<s:DropDownList id="ddCurrInterlayer" labelField="name" width="150" 
													dataProvider="{techPicker.interlayerSet.layersets}" 
													selectedItem="{techPicker.currInerlayer}"
													changing="preventChanging(event)"/>
								</s:HGroup>
								<s:HGroup gap="5" verticalAlign="baseline">
									<s:Label text="Форзац заказа: {techPicker.currExtraInfo.endpaper}" width="200"/>
									<s:Spacer width="5"/>
									<s:Label text="Шаблон форзаца:" width="120" textAlign="right"/>
									<s:DropDownList id="ddCurrEndpaper" width="150" labelField="name" 
													enabled="{!techPicker.isRunning || techPicker.isPaused}"
													dataProvider="{techPicker.endpaperSet.layersets}" selectedItem="@{techPicker.currEndpaper}"/>
								</s:HGroup>
							</s:VGroup>
						</s:HGroup>
					</s:VGroup>
				</s:HGroup>
			</s:VGroup>	
			<s:VGroup gap="12" paddingRight="10">
				<!--<s:HGroup gap="5" enabled="{Boolean(techPicker.controller)}">
					<s:ToggleButton id="tgVacuum" label="Вакуум" change="{tgVacuum.selected?techPicker.controller.vacuumOn():techPicker.controller.vacuumOff()}"/>
					<s:ToggleButton id="tgEngine" label="Мотор" change="{tgEngine.selected?techPicker.controller.engineOn():techPicker.controller.engineOff()}"/>
				</s:HGroup>-->
				<s:HGroup gap="5" enabled="{Boolean(techPicker.controller)}" verticalAlign="baseline" width="150">
					<s:Label text="Вакуум"/>
					<s:Spacer width="100%"/>
					<s:Button label="On" width="40" click="{techPicker.controller.vacuumOn()}"/>
					<s:Button label="Off" width="40" click="{techPicker.controller.vacuumOff()}"/>
				</s:HGroup>
				<s:HGroup gap="5" enabled="{Boolean(techPicker.controller)}" verticalAlign="baseline" width="150">
					<s:Label text="Мотор"/>
					<s:Spacer width="100%"/>
					<s:Button label="On" width="40" click="{techPicker.controller.engineOn()}"/>
					<s:Button label="Off" width="40" click="{techPicker.controller.engineOff()}"/>
				</s:HGroup>
				<s:HGroup gap="10">
					<s:Button id="btStart" label="Старт" enabled="{!techPicker.isRunning || techPicker.isPaused}" click="techPicker.start()"/>
					<s:Button label="Перезапуск COM" enabled="{!techPicker.isRunning || techPicker.isPaused}" click="{serialProxy.restart()}"/>
				</s:HGroup>
				<s:HGroup gap="10">
					<s:Button id="btPause" label="Пауза" enabled="{techPicker.isRunning}" click="techPicker.pauseRequest()"/>
					<s:Button id="btStop" label="Стоп" click="techPicker.stop()"/>
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>
		
		<s:HGroup gap="10" width="100%" height="100%">
			<s:VGroup gap="5" width="350" height="100%">
				<s:Label text="Загрузка лотков"/>
				<config:ItemsGrid id="traysGrid" currentData="{techPicker.traySet.tarys}" width="100%" 
								  currentIndex="{techPicker.currentTray}" editable="{!techPicker.isRunning || techPicker.isPaused}"
								  currentColumns="{LayerAllocation.gridColumns()}" disableSorting="true"/>
				<!--<s:Spacer height="5"/>-->
				<s:Label text="Блокировки"/>
				<s:List id="lstLatches" dataProvider="{acLatches}" width="100%" changing="preventChanging(event)" 
						itemRenderer="com.photodispatcher.view.itemRenderer.PickerLatchRenderer">
					<s:layout>
						<s:VerticalLayout requestedRowCount="6" gap="0"/>
					</s:layout>
				</s:List>
					
			</s:VGroup>
			<s:VGroup gap="5" width="200" height="100%">
				<s:Label text="Последовательность"/>
				<s:List id="lstGroups" dataProvider="{acGroups}" width="100%" changing="preventChanging(event)"
						selectedIndex="{techPicker.currentGroup}" >
					<s:layout>
						<s:VerticalLayout requestedRowCount="5" gap="2"/>
					</s:layout>
				</s:List>
				
				<!--<s:Spacer height="5"/>-->
				<s:Label text="Слои"/>
				<s:List id="lstSequence" dataProvider="{acSequence}" width="100%" changing="preventChanging(event)"
						selectedIndex="{techPicker.currentGroupStep}"
						itemRenderer="com.photodispatcher.view.itemRenderer.LayerSequenceRenderer">
					<s:layout>
						<s:VerticalLayout requestedRowCount="10" gap="2"/>
					</s:layout>
				</s:List>
			</s:VGroup>
			<s:VGroup gap="5" width="300" height="100%">
				<s:Label text="Консоль"/>
				<s:TextArea id="logTextArea" text="{logText}" width="100%" height="100%" editable="false" />
			</s:VGroup>
		</s:HGroup>
	</s:VGroup>
	
</s:Group>
