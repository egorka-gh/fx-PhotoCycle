<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*"
		 creationComplete="{init()}" 
		 >

	<fx:Script>
		<![CDATA[
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.MailPackage;
			import com.photodispatcher.model.mysql.entities.Order;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.services.MailPackageService;
			import com.photodispatcher.model.mysql.services.OrderService;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.view.menu.GridContexMenu;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;
			
			import spark.events.PopUpEvent;
			
			public var isActive:Boolean;
			
			[Bindable]
			private var packagesAC:ArrayCollection;
			[Bindable]
			private var gridColumns:ArrayList;
			
			private function init():void{
				refresh();
			}
			
			private function detectState():void{
				switch(tbView.selectedIndex){
					case 0:
						currentState='inQueue';
						break;
					case 1:
						currentState='packageList';
						break;
					case 2:
						currentState='forSendList';
						break;
				}
				refresh();
			}
			
			private function refresh():void{
				packagesAC=null;
				switch(currentState){
					case 'inQueue':
						gridColumns=MailPackage.inQueueColumns();
						loadInQueue();
						break;
					case 'inQueueByClient':
						gridColumns=MailPackage.inQueueColumns();
						loadInQueueByClient();
						break;
					case 'packageList':
						break;
					case 'forSendList':
						break;
				}
			}

			private function loadInQueueByClient():void{
				if(!byClientMP) return;
				var svc:MailPackageService=Tide.getInstance().getContext().byType(MailPackageService,true) as MailPackageService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onload);
				latch.addLatch(svc.loadByClient(byClientMP.source, byClientMP.client_id));
				latch.start();
			}
			private function loadInQueue():void{
				var svc:MailPackageService=Tide.getInstance().getContext().byType(MailPackageService,true) as MailPackageService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onload);
				latch.addLatch(svc.loadReady4Mail());
				latch.start();
			}
			private function onload(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onload);
					if(latch.complite){
						packagesAC=latch.lastDataAC;
					}
				}
			}
			
			
			
			protected function dgPackages_creationCompleteHandler(event:FlexEvent):void{
				var gridMenu:GridContexMenu;
				gridMenu= new GridContexMenu(dgPackages); 
				gridMenu.addItem('Открыть',openCallBack);
			}
			private function openCallBack(grid:DataGrid,param:int):void{
				var onItem:MailPackage=grid.selectedItem as MailPackage;
				if(onItem){
					showMP(onItem);
				}
			}
			
			private function showMP(item:MailPackage):void{
				if(!item) return;
				var pop:MailPackagePopUp= new MailPackagePopUp();
				//if(currentState=='inQueue')
				showMPbyId(item.source, item.id);
			}

			private function showMPbyId(source:int, groupId:int):void{
				if(!source || !groupId) return;
				var pop:MailPackagePopUp= new MailPackagePopUp();
				//if(currentState=='inQueue')
				pop.loadFromWeb(source, groupId, true);
			}

			private var _barcodeReader:ComReader;
			public function get barcodeReader():ComReader{
				return _barcodeReader;
			}
			public function set barcodeReader(value:ComReader):void{
				if(_barcodeReader){
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
				}
				_barcodeReader = value;
				if(_barcodeReader){
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
				}
			}

			private var newScanId:String;
			
			private function onBarCode(event:BarCodeEvent):void{
				if(!isActive) return;
				var barcode:String=event.barcode;
				if(newScanId) return; //previouse scan incomplite
				newScanId= barcode;
				if(!newScanId){
					Alert.show('Не верный ШК: "'+barcode+'".');
					return;
				}
				var svc:OrderService=Tide.getInstance().getContext().byType(OrderService,true) as OrderService;
				var latch:DbLatch=svc.findeById(newScanId,true);
				latch.addEventListener(Event.COMPLETE,onOrderFinde);
				latch.start();
			}
			private function onOrderFinde(e:Event):void{
				var ordId:String=PrintGroup.orderIdFromBookBarcode(newScanId);
				if(!ordId) ordId=newScanId;
				newScanId='';
				var latch:DbLatch=e.target as DbLatch;
				var ordersList:ArrayCollection;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onOrderFinde);
					if(latch.complite){
						ordersList=latch.lastDataAC;
					}
				}
				if(!ordersList) return;

				if(ordersList.length==1){
					var ord:Order=ordersList.getItemAt(0) as Order;
					if(ord) showMPbyId(ord.source, ord.groupId);
				}else{
					var pop:OrderSearchPopup= new OrderSearchPopup();
					pop.addEventListener(PopUpEvent.CLOSE, onOrderAdd);
					pop.findeMode=true;
					pop.finde(ordId);
				}
			}
			private function onOrderAdd(event:PopUpEvent):void{
				var pop:OrderSearchPopup=event.target as OrderSearchPopup;
				if(pop) pop.removeEventListener(PopUpEvent.CLOSE, onOrderAdd);
				if(event.commit && pop && pop.lastOrder){
					showMPbyId(pop.lastOrder.source, pop.lastOrder.groupId);
				}
			}

			[Bindable]
			private var byClientMP:MailPackage;
			protected function btShowByClient_clickHandler(event:MouseEvent):void{
				if(!dgPackages) return;
				byClientMP=dgPackages.selectedItem as MailPackage;
				if(!byClientMP) return;
				currentState='inQueueByClient';
				refresh();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="inQueue"/>
		<s:State name="inQueueByClient"/>
		<s:State name="packageList"/>
		<s:State name="forSendList"/>
		<s:State name="packageView"/>
	</s:states>

	<s:TabBar id="tbView" top="0" left="0" height="20" change="{detectState()}">
		<mx:ArrayCollection>
			<fx:String>Ожидают упаковки</fx:String> 
			<fx:String>На упаковке</fx:String> 
			<fx:String>К отправке</fx:String> 
		</mx:ArrayCollection>
	</s:TabBar>
	
	<s:VGroup top="20" left="10" right="10" bottom="10" gap="5">
		<s:HGroup width="100%" horizontalAlign="right" gap="10" verticalAlign="baseline">
			<s:Button id="btShowByClient" label="Группы клиента" includeIn="inQueue" click="btShowByClient_clickHandler(event)"/>
			<s:Button id="btCloseByClient" label="Ожидают упаковки" includeIn="inQueueByClient" click="{detectState()}"/>
			<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refresh()}"
					  cornerRadius="4" width="22" height="22" baseline="4"/>
		</s:HGroup>
		<s:HGroup width="100%" includeIn="inQueueByClient" gap="5" verticalAlign="baseline">
			<s:Label text="Источник:"/>
			<s:Label text="{byClientMP.source_name}" fontWeight="bold"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Клиент:"/>
			<s:Label text="{byClientMP.client_id}" fontWeight="bold"/>
		</s:HGroup>
		<s:DataGrid id="dgPackages" selectionMode="singleRow"
					fontSize="14" width="100%" height="100%"
					creationComplete="dgPackages_creationCompleteHandler(event)"
					dataProvider="{packagesAC}" locale="ru_RU" columns="{gridColumns}">
			<s:rowBackground>
				<fx:Component>
					<itemRenderer:TechMailPDataGridRowBackground/>
				</fx:Component>
			</s:rowBackground>
		</s:DataGrid>
		
	</s:VGroup>
	
</s:Group>
