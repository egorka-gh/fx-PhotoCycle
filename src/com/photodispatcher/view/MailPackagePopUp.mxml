<?xml version="1.0" encoding="utf-8"?>
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   xmlns:mx="library://ns.adobe.com/flex/mx"
						   xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*"
						   width="800" height="600">
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.factory.WebServiceBuilder;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.DeliveryType;
			import com.photodispatcher.model.mysql.entities.DeliveryTypePrintForm;
			import com.photodispatcher.model.mysql.entities.MailPackage;
			import com.photodispatcher.model.mysql.entities.MailPackageBarcode;
			import com.photodispatcher.model.mysql.entities.MailPackageMessage;
			import com.photodispatcher.model.mysql.entities.MailPackageProperty;
			import com.photodispatcher.model.mysql.entities.Order;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.RackSpace;
			import com.photodispatcher.model.mysql.entities.Source;
			import com.photodispatcher.model.mysql.entities.SourceType;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.model.mysql.services.MailPackageService;
			import com.photodispatcher.model.mysql.services.OrderService;
			import com.photodispatcher.printer.Printer;
			import com.photodispatcher.service.web.BaseWeb;
			import com.photodispatcher.service.web.FotoknigaWeb;
			import com.photodispatcher.view.menu.GridContexMenu;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.utils.object_proxy;
			
			import org.granite.tide.Tide;
			
			import spark.events.PopUpEvent;
			
			[Bindable]
			private var stateMsg:String;
			
			[Bindable]
			public var mailPackage:MailPackage;
			[Bindable]
			public var propertiesAC:ArrayCollection;
			
			[Bindable]
			private var showClienGroups:Boolean;
			
			[Bindable]
			private var source:Source;

			[Bindable]
			public var cliPackages:ArrayCollection;

			[Bindable]
			public var printForms:ArrayCollection;

			[Bindable]
			public var spacesAC:ArrayCollection;

			[Bindable]
			private var nextState:int;
			[Bindable]
			private var nextStateName:String;

			public var techPointOTK:TechPoint;

			private var _webService:BaseWeb;
			private function get webService():BaseWeb{
				if(!_webService) _webService= WebServiceBuilder.build(source);
				return _webService;
			}
			
			private var _bdService:MailPackageService;
			private function get bdService():MailPackageService{
				if(!_bdService) _bdService=Tide.getInstance().getContext().byType(MailPackageService,true) as MailPackageService;
				return _bdService;
			}
			
			public function loadFromWeb(sourceId:int, id:int, showClienGroups:Boolean=false, techPointOTK:TechPoint=null):void{
				mailPackage=null;
				this.showClienGroups=showClienGroups;
				this.techPointOTK=techPointOTK;
				stateMsg='Загрузка с сайта';
				source=Context.getSource(sourceId);
				if(!source){
					stateMsg=stateMsg+'. Ошибка инициализации, не найден источник '+sourceId.toString();
					Alert.show(stateMsg);
					return;
				}
				webService.addEventListener(Event.COMPLETE,webHandler);
				try{
					webService.getMailPackage(id);
				}catch(error:Error){
					Alert.show('Ошибка web сервиса '+source.name+': '+error.message );
					return;
				}
				CursorManager.setBusyCursor();
				show();
			}
			
			private function show():void{
				if(this.isOpen) return;
				this.open((FlexGlobals.topLevelApplication as DisplayObjectContainer),true);
				this.width=FlexGlobals.topLevelApplication.width-50;
				this.height=FlexGlobals.topLevelApplication.height-100;
				PopUpManager.centerPopUp(this);

			}
			
			private function webHandler(e:Event):void{
				var pw:BaseWeb=e.target as BaseWeb;
				CursorManager.removeBusyCursor();
				pw.removeEventListener(Event.COMPLETE,webHandler);
				//TODO load orders
				if(pw.hasError){
					trace('web getMailPackage err: '+pw.errMesage);
					stateMsg='Ошибка загрузки с сайта: '+pw.errMesage;
					return;
				}
				mailPackage=pw.getLastMailPackage();
				if(!mailPackage){
					stateMsg='Ошибка загрузки с сайта';
					return;
					
				}
				
				printForms=DeliveryTypePrintForm.getForms(mailPackage.delivery_id);
				propertiesAC=null;
				if(mailPackage.properties) propertiesAC= new ArrayCollection(mailPackage.properties.toArray());
				if(propertiesAC){
					propertiesAC.filterFunction=filterProps;
					propertiesAC.refresh();
				}

				mailPackage.state_date=null;
				var latchMp:DbLatch=new DbLatch();
				latchMp.addEventListener(Event.COMPLETE,onloadMP);
				latchMp.addLatch(bdService.load(mailPackage.source, mailPackage.id));
				latchMp.start();
				
				var latch:DbLatch=new DbLatch(); 
				latch.addEventListener(Event.COMPLETE,onloadChildOrders);
				latch.addLatch(bdService.loadChildOrders(mailPackage.source, mailPackage.id));
				latch.join(latchMp);
				latch.start();
				if(showClienGroups){
					var latchGroups:DbLatch=new DbLatch();
					latchGroups.addEventListener(Event.COMPLETE,onGroupsload);
					latchGroups.addLatch(bdService.loadByClient(mailPackage.source, mailPackage.client_id));
					latchGroups.start();
				}

				loadSpaces();
			}
			private function onloadMP(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onloadMP);
					if(latch.complite){
						var mp:MailPackage=latch.lastDataItem as MailPackage;
						if(mp){
							//set bd state
							mailPackage.state=mp.state;
							mailPackage.state_name=mp.state_name;
							mailPackage.state_date=mp.state_date;
						}
					}
				}
			}
			private function onloadChildOrders(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onloadChildOrders);
					if(latch.complite){
						mailPackage.orders=latch.lastDataAC;
						if(mailPackage.state_date==null && mailPackage.orders){
							mailPackage.state= OrderState.TECH_OTK;
							mailPackage.state_name= OrderState.getStateName(OrderState.TECH_OTK);
							//set state by orders
							for each(var o:Order in mailPackage.orders){
								if(mailPackage.state>o.state){
									mailPackage.state=o.state;
									mailPackage.state_name= OrderState.getStateName(mailPackage.state);
									mailPackage.state_date=o.state_date;
								}else if(!mailPackage.state_date || (mailPackage.state==o.state && mailPackage.state_date.time>o.state_date.time)){
									mailPackage.state_date=o.state_date;
								}
							}
						}
					}
				}
				detectNextState();
			}
			private function onGroupsload(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onGroupsload);
					if(latch.complite){
						cliPackages=latch.lastDataAC;
						cliPackages.filterFunction=filterCliPackages;
						cliPackages.refresh();
					}
				}
			}
			
			private function filterProps(item:Object):Boolean{
				if(!mailPackage) return false;
				var it:MailPackageProperty= item as MailPackageProperty;
				if(!it) return false;
				return !DeliveryType.isInfoHidden(mailPackage.delivery_id,it.property);
			}


			private function loadSpaces():void{
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onloadSpaces);
				latch.addLatch(bdService.loadRackSpaces(mailPackage));
				latch.start();
				
			}
			private function onloadSpaces(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onloadSpaces);
					if(latch.complite){
						spacesAC=latch.lastDataAC;
					}
				}
			}

			private function filterCliPackages(item:Object):Boolean {
				var pg:MailPackage=item as MailPackage;
				if(!pg) return false;
				if(!mailPackage || mailPackage.id==pg.id) return false;
				return true;
			}

			private function detectNextState():void{
				nextState=0;
				nextStateName='';
				if(!mailPackage) return;
				showClienGroups=mailPackage.state<OrderState.PACKAGE_PACKED;
				/*
				if(mailPackage.state<=OrderState.TECH_OTK){
					nextState=OrderState.PACKAGE_START;
				}else if(mailPackage.state==OrderState.PACKAGE_START){
					nextState=OrderState.PACKAGE_PACKED;
				}else if(mailPackage.state==OrderState.PACKAGE_PACKED){
					*/
				if(mailPackage.state<OrderState.PACKAGE_PACKED){
					nextState=OrderState.PACKAGE_PACKED;
				}else if(mailPackage.state==OrderState.PACKAGE_PACKED){
					nextState=OrderState.PACKAGE_SEND;
				}
				nextStateName=OrderState.getStateName(nextState);
			}

			private function setNextState():void{
				if(!mailPackage || nextState==0) return;
				/*
				if(nextState==OrderState.PACKAGE_START){
					if(mailPackage.state<OrderState.TECH_OTK){
						Alert.show('Минимальный статус заказов "'+mailPackage.state_name+'". Продолжить?','',Alert.YES|Alert.NO, this, onAlert450);
					}else{
						saveNextState();
					}
				}else if(nextState==OrderState.PACKAGE_SENDING){
					setSiteState();
				}else{
					saveNextState();
				}
				*/
				if(nextState==OrderState.PACKAGE_PACKED){
					if(mailPackage.state<OrderState.TECH_OTK){
						Alert.show('Минимальный статус заказов "'+mailPackage.state_name+'". Продолжить?','',Alert.YES|Alert.NO, this, onAlert450);
					}else{
						setSiteState();
					}
				}else{
					saveNextState();
				}
			}
			
			private function onAlert450(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) setSiteState(); //saveNextState();
			}

			private function saveNextState():void{
				mailPackage.state=nextState;
				var latch:DbLatch=new DbLatch(); 
				latch.addEventListener(Event.COMPLETE,onsaveNextState);
				latch.addLatch(bdService.startState(mailPackage));
				latch.start();
			}
			private function onsaveNextState(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onsaveNextState);
					if(latch.complite){
						//close();
						detectNextState();
					}
				}
			}

			protected function btAddBarcode_clickHandler(event:MouseEvent):void{
				if(!mailPackage) return;
				var bar:MailPackageBarcode= new MailPackageBarcode();
				bar.source=mailPackage.source;
				bar.id=mailPackage.id;
				bar.barcode='';
				bar.bar_type=0;
				if(!mailPackage.barcodes) mailPackage.barcodes=new ArrayCollection();
				mailPackage.barcodes.addItem(bar);
				if(dgBarCode) dgBarCode.selectedItem=bar;
			}
			
			protected function btPrintBarcode_clickHandler(event:MouseEvent):void{
				if(!mailPackage) return;
				var bar:MailPackageBarcode;
				if(dgBarCode) bar=dgBarCode.selectedItem as MailPackageBarcode;
				if(!bar && mailPackage.barcodes && mailPackage.barcodes.length>0) bar=mailPackage.barcodes.getItemAt(0) as MailPackageBarcode;
				if(!bar) return;
				Printer.instance.printMPBarcode(mailPackage.id_name, bar.barcode);
			}
			
			protected function dgPackages_creationCompleteHandler(event:FlexEvent):void{
				var gridMenu:GridContexMenu;
				gridMenu= new GridContexMenu(dgPackages); 
				gridMenu.addItem('Открыть',openCallBack);
			}
			private function openCallBack(grid:DataGrid,param:int):void{
				var onItem:MailPackage=grid.selectedItem as MailPackage;
				if(onItem){
					var pop:MailPackagePopUp= new MailPackagePopUp();
					pop.loadFromWeb(onItem.source, onItem.id);
				}
			}
			
			protected function list1_clickHandler(event:MouseEvent):void{
				if(event.target is Button && event.target.id=='btPrint'){
					var form:DeliveryTypePrintForm= lstPrint.selectedItem as DeliveryTypePrintForm;
					if(!form || !mailPackage) return;
					var bar:MailPackageBarcode;
					if(dgBarCode) bar=dgBarCode.selectedItem as MailPackageBarcode;
					if(!bar && mailPackage.barcodes && mailPackage.barcodes.length>0) bar=mailPackage.barcodes.getItemAt(0) as MailPackageBarcode;
					var code:String;
					if(bar) code=bar.barcode;
					Printer.instance.printDeliveryForm(mailPackage,form,code);
				}
			}
			
			private var joinIds:Array;
			//private var joinState:int;
			protected function btJoin_clickHandler(event:MouseEvent):void{
				joinIds=[];
				var it:MailPackage;
				if(!cliPackages || cliPackages.length==0) return;
				for each(it in cliPackages){
					if(it && it.isSelected) joinIds.push(it.id);
				}
				if(joinIds.length==0) return;
				joinIds.push(mailPackage.id);
				//checkJoin();
				joinPackages();
			}

			/*
			private function checkJoin():void{
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,oncheckJoin);
				latch.addLatch(bdService.getStateByPackages(source.id,new ArrayCollection(joinIds)));
				latch.start();
			}
			private function oncheckJoin(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,oncheckJoin);
					if(latch.complite){
						var state:int=latch.resultCode;
						if(state> OrderState.PACKAGE_START){
							joinIds=[];
							Alert.show('Не допускается объединение групп в статусе "Упакован" и выше.');
						}else{
							joinState=state;
							joinPackages();
						}
					}else{
						joinIds=[];
					}
				}
			}
			*/

			private function joinPackages():void{
				if(source.type==SourceType.SRC_FBOOK){
					Alert.show('Сайт '+source.name+' не поддерживает данную функцию.');
					return;
				}
				webService.addEventListener(Event.COMPLETE,joinHandler);
				try{
					webService.joinMailPackages(joinIds);
				}catch(error:Error){
					joinIds=[];
					Alert.show('Ошибка web сервиса '+source.name+': '+error.message );
					return;
				}
			}

			private function joinHandler(e:Event):void{
				webService.removeEventListener(Event.COMPLETE,joinHandler);
				//TODO load orders
				if(webService.hasError){
					joinIds=[];
					trace('web err: '+webService.errMesage);
					Alert.show(webService.errMesage);
					return;
				}
				var newId:int=webService.getJoinResultId();
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onJoin);
				//SqlResult join(int source, int targetId, List<Integer> joinIds);
				latch.addLatch(bdService.join(source.id,newId,new ArrayCollection(joinIds)),newId.toString());
				latch.start();
			}
			private function onJoin(event:Event):void{
				joinIds=[];
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onJoin);
					if(latch.complite){
						var newId:int= int(latch.lastTag);
						if(newId){
							/*
							if(joinState>0){
								latch=new DbLatch();
								var mp:MailPackage= new MailPackage();
								mp.source=mailPackage.source;
								mp.id=newId;
								mp.state=OrderState.PACKAGE_START;
								latch.addLatch(bdService.startState(mp));
								latch.start();
							}
							*/
							loadFromWeb(source.id, newId,true);
						}
					}
				}
			}

			//protected function btSetSiteState_clickHandler(event:MouseEvent):void{
			private function setSiteState():void{
				if(!mailPackage || !mailPackage.id) return;
				if(source.type==SourceType.SRC_FOTOKNIGA || source.type==SourceType.SRC_FBOOK){
					//update site state
					webService.addEventListener(Event.COMPLETE,setStateHandler);
					try{
						webService.setMailPackageState(mailPackage.id, FotoknigaWeb.ORDER_STATE_MADE ,false);
					}catch(error:Error){
						Alert.show('Ошибка web сервиса '+source.name+': '+error.message );
					}
				}else{
					saveNextState();
				}
			}
			private function setStateHandler(e:Event):void{
				webService.removeEventListener(Event.COMPLETE,setStateHandler);
				if(webService.hasError){
					trace('web err: '+webService.errMesage);
					if(webService.hasErrCode(FotoknigaWeb.ERR_CODE_BALANCE)){
						Alert.buttonWidth=150;
						Alert.yesLabel='Игнорировать баланс'; 
						Alert.cancelLabel='Отмена';
						Alert.show(webService.errMesage,'',Alert.YES|Alert.CANCEL, this, alertClickHandler);
						
						Alert.buttonWidth=75;
						Alert.yesLabel='Да';
						Alert.noLabel='Нет';
					}else{
						Alert.show(webService.errMesage);
					}
				}else{
					Alert.show('Статус на сайте изменен');
					saveNextState();
				}
			}
			
			private function alertClickHandler(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					webService.addEventListener(Event.COMPLETE,setForceStateHandler);
					try{
						webService.setMailPackageState(mailPackage.id, FotoknigaWeb.ORDER_STATE_MADE , true);
					}catch(error:Error){
						Alert.show('Ошибка web сервиса '+source.name+': '+error.message );
					}
				}
			}
			private function setForceStateHandler(e:Event):void{
				webService.removeEventListener(Event.COMPLETE,setStateHandler);
				if(webService.hasError){
					trace('web err: '+webService.errMesage);
					Alert.show(webService.errMesage);
				}else{
					Alert.show('Статус на сайте изменен');
					saveNextState();
				}
			}

			private function messagesLabelFunc(item:Object):String{
				var res:String='';
				var msg:MailPackageMessage=item as MailPackageMessage;
				if(msg){
					res=msg.log_key+': '+ msg.log_user+': '+msg.message;
				}
				return res;
			}

			private function spacesLabelFunc(item:Object):String{
				var res:String='';
				var s:RackSpace=item as RackSpace; 
				if(s){
					res=s.rack_name+' - '+s.name
				}
				return res;
			}

			protected function dgProps_creationCompleteHandler(event:FlexEvent):void{
				var gridMenu:GridContexMenu;
				gridMenu= new GridContexMenu(dgProps); 
				gridMenu.addItem('Отправлен', markSendCallBack);
				gridMenu.addItem('');
				gridMenu.addItem('');
				gridMenu.addItem('Назначить полку',setSpaceCallBack);
				gridMenu.addItem('Сменить полку',resetSpaceCallBack);
			}
			private function setSpaceCallBack(grid:DataGrid,param:int):void{
				var onItem:Order=grid.selectedItem as Order;
				if(onItem){
					var pop:RackSpaceChoisePopUp= new RackSpaceChoisePopUp();
					pop.addEventListener(PopUpEvent.CLOSE,onsetSpaceCallBack);
					pop.show(onItem.id, (techPointOTK?techPointOTK.id:0));
				}
			}
			private function onsetSpaceCallBack(event:PopUpEvent):void{
				var pop:RackSpaceChoisePopUp=event.target as RackSpaceChoisePopUp;
				pop.removeEventListener(PopUpEvent.CLOSE,onsetSpaceCallBack);
				if(event.commit){
					loadSpaces();
				}
			}

			private function resetSpaceCallBack(grid:DataGrid,param:int):void{
				Alert.show('Для заказа будет сброшена текущая полка. Продолжить?','',Alert.YES|Alert.NO, this, onAlertresetSpace);
			}
			
			private function onAlertresetSpace(evt:CloseEvent):void {
				if (evt.detail == Alert.YES){
					var onItem:Order=dgProps.selectedItem as Order;
					if(onItem){
						var latch:DbLatch= new DbLatch();
						latch.addEventListener(Event.COMPLETE,onresetSpaceCallBack);
						latch.addLatch(bdService.resetRackSpace(onItem.id));
						latch.start();
					}
				}
			}
			private function onresetSpaceCallBack(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onresetSpaceCallBack);
					if(latch.complite){
						setSpaceCallBack(dgProps,0);
					}
				}
			}

			private function markSendCallBack(grid:DataGrid,param:int):void{
				Alert.show('Заказ будет отмечен как отправлен. Продолжить?','',Alert.YES|Alert.NO, this, onAlertmarkSend);
			}
			private function onAlertmarkSend(evt:CloseEvent):void {
				if (evt.detail == Alert.YES){
					var onItem:Order=dgProps.selectedItem as Order;
					if(onItem){
						onItem.state=OrderState.PACKAGE_SEND;
						var ordService:OrderService=Tide.getInstance().getContext().byType(OrderService,true) as OrderService;
						var latch:DbLatch= new DbLatch();
						latch.addLatch(ordService.setState(onItem));
						latch.start();
						
						//clear rack
						latch= new DbLatch();
						latch.addLatch(bdService.resetRackSpace(onItem.id));
						latch.start();
					}
				}
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dtFormater" dateTimePattern="dd.MM.yyyy HH:mm"/>
	</fx:Declarations>

	<s:Rect radiusX="6" top="0" left="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="#444444" weight="1"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#ffffff"/>
		</s:fill>
	</s:Rect>

	<s:VGroup gap="5" top="10" left="10" right="10" bottom="10">
		<s:Label text="{stateMsg}" width="100%"/>
		<s:HGroup width="100%">
			<s:Form id="frmOrder" backgroundAlpha="0" >
				<s:layout>
					<s:FormLayout gap="-12"/>
				</s:layout>
				
				<s:FormItem label="ID">
					<s:TextInput id="tiID" text="{mailPackage.id_name} ({mailPackage.id})" width="200" editable="false"/>
				</s:FormItem> 
				<s:FormItem label="Статус">
					<s:TextInput  text="{mailPackage.state_name}" width="200" editable="false"/>
					<s:Label text="Дата:{dtFormater.format(mailPackage.state_date)}" width="200"/>
					<s:HGroup width="200" horizontalAlign="right" gap="5" verticalAlign="baseline">
						<s:Label text="Назначить статус"/>
						<s:Button id="btState" label="{nextStateName}" click="{setNextState()}" enabled="{nextState!=0}"/>
					</s:HGroup>
				</s:FormItem> 
				<s:FormItem label="Источник">
					<s:TextInput  text="{mailPackage.source_name}" width="200" editable="false"/>
				</s:FormItem> 
				<s:FormItem label="Доставка">
					<s:TextInput  text="{mailPackage.delivery_name}" width="200" editable="false"/>
				</s:FormItem> 
				<s:FormItem label="Срок исполнения">
					<s:TextInput  text="{dtFormater.format(mailPackage.execution_date)}" width="200" editable="false"/>
				</s:FormItem> 
				<s:FormItem label="Кол заказов">
					<s:TextInput  text="{mailPackage.orders_num.toString()}" width="200" editable="false"/>
				</s:FormItem> 
				<s:FormItem label="Примечания">
					<s:List dataProvider="{mailPackage.messages}" width="300">
						<s:layout>
							<s:VerticalLayout gap="0" requestedRowCount="2"/>
						</s:layout>
						<s:itemRenderer>
							<fx:Component>
								<s:ItemRenderer>
									<s:VGroup  width="100%" top="2" bottom="2" left="2" right="2" gap="5" horizontalAlign="left">
										<s:Label text="{data.log_key}:{data.log_user}"/>
										<s:Label text="{data.message}" width="100%" fontWeight="bold"/>
									</s:VGroup>
								</s:ItemRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:List>
				</s:FormItem> 

			</s:Form>
			<s:VGroup width="150" height="100%" gap="5">
				<s:Label width="100%" text="Полки"/>
				<s:List id="lstSpaces" width="100%" height="100%"
						dataProvider="{spacesAC}" labelFunction="spacesLabelFunc"/> 
			</s:VGroup>
			<s:Spacer width="7"/>
			<s:VGroup width="100%" height="100%" gap="5" visible="{showClienGroups}">
				<s:Label text="Все группы клиента"/>
				<s:DataGrid id="dgPackages" selectionMode="singleRow"
							 width="100%" height="100%" editable="true"
							creationComplete="dgPackages_creationCompleteHandler(event)"
							dataProvider="{cliPackages}" locale="ru_RU" columns="{MailPackage.clientPackagesColumns()}">
					<s:rowBackground>
						<fx:Component>
							<itemRenderer:TechMailPDataGridRowBackground/>
						</fx:Component>
					</s:rowBackground>
				</s:DataGrid>
				<s:Button id="btJoin" label="Объединить" toolTip="Объединить отмеченные с текущей группой"
						  enabled="{mailPackage.state &lt; OrderState.PACKAGE_PACKED}"
						  click="btJoin_clickHandler(event)"/>
			</s:VGroup>
		</s:HGroup>

		<s:HGroup width="100%" height="100%" gap="10">
			<s:VGroup width="50%" height="100%" gap="5">
				<s:Label text="Атрибуты"/>
				<s:DataGrid id="dgAtrs" selectionMode="singleRow" width="100%" height="100%" locale="ru_RU" 
							editable="true"
							dataProvider="{propertiesAC}" columns="{MailPackageProperty.gridColumns()}"/>
			</s:VGroup>
			<s:VGroup width="50%" height="100%" gap="5">
				<s:Label text="Заказы"/>
				<s:DataGrid id="dgProps" selectionMode="singleRow" width="100%" height="100%" locale="ru_RU"
							creationComplete="dgProps_creationCompleteHandler(event)"
							dataProvider="{mailPackage.orders}" columns="{Order.shortGridColumns()}"/>
				<s:Spacer height="5"/>
				<s:HGroup width="100%" height="100%" gap="10">
					<s:VGroup width="100%" height="100%" gap="5">
						<s:Label text="Штрих коды"/>
						<s:DataGrid id="dgBarCode" selectionMode="singleRow" width="100%" height="100%"  editable="true" locale="ru_RU"
									dataProvider="{mailPackage.barcodes}" columns="{MailPackageBarcode.gridColumns()}"/>
						<s:Button id="btAddBarcode" label="Добавить" click="btAddBarcode_clickHandler(event)"/>
					</s:VGroup>
					<!--<s:Button id="btPrintBarcode" label="Печать" click="btPrintBarcode_clickHandler(event)"/>-->
					<s:VGroup height="100%" gap="5">
						<s:Label text="Печать"/>
						<s:List id="lstPrint" dataProvider="{printForms}" labelField="form_name" height="100%"
								itemRenderer="com.photodispatcher.view.itemRenderer.PrintFormButtonRenderer"
								click="list1_clickHandler(event)"/>
					</s:VGroup>
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>

		<s:Spacer height="5"/>
		<s:HGroup width="100%" horizontalAlign="right">
			<!--<s:Button id="btSetSiteState" label="Упакован" toolTip="Сменить статус на сайте" 
					  enabled="{source.type==SourceType.SRC_FOTOKNIGA}" click="btSetSiteState_clickHandler(event)"/>
			<s:Spacer width="20"/>-->
			<s:Button id="btClose" label="Закрыть" click="{close()}"/>
		</s:HGroup>
	</s:VGroup>
</s:SkinnablePopUpContainer>
