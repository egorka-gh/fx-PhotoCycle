<?xml version="1.0" encoding="utf-8"?>
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   xmlns:mx="library://ns.adobe.com/flex/mx"
						   xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*"
						   width="800" height="600">
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.factory.WebServiceBuilder;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.DeliveryTypePrintForm;
			import com.photodispatcher.model.mysql.entities.MailPackage;
			import com.photodispatcher.model.mysql.entities.MailPackageBarcode;
			import com.photodispatcher.model.mysql.entities.MailPackageMessage;
			import com.photodispatcher.model.mysql.entities.MailPackageProperty;
			import com.photodispatcher.model.mysql.entities.Order;
			import com.photodispatcher.model.mysql.entities.Source;
			import com.photodispatcher.model.mysql.entities.SourceType;
			import com.photodispatcher.model.mysql.services.MailPackageService;
			import com.photodispatcher.printer.Printer;
			import com.photodispatcher.service.web.BaseWeb;
			import com.photodispatcher.service.web.FotoknigaWeb;
			import com.photodispatcher.view.menu.GridContexMenu;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			
			import org.granite.tide.Tide;
			
			[Bindable]
			private var stateMsg:String;
			
			[Bindable]
			public var mailPackage:MailPackage;
			
			[Bindable]
			private var showClienGroups:Boolean;
			
			[Bindable]
			private var source:Source;

			[Bindable]
			public var cliPackages:ArrayCollection;

			[Bindable]
			public var printForms:ArrayCollection;

			private var _webService:BaseWeb;
			private function get webService():BaseWeb{
				if(!_webService) _webService= WebServiceBuilder.build(source);
				return _webService;
			}
			
			private var _bdService:MailPackageService;
			private function get bdService():MailPackageService{
				if(!_bdService) _bdService=Tide.getInstance().getContext().byType(MailPackageService,true) as MailPackageService;
				return _bdService;
			}
			
			public function loadFromWeb(sourceId:int, id:int, showClienGroups:Boolean=false):void{
				mailPackage=null;
				this.showClienGroups=showClienGroups;
				stateMsg='Загрузка с сайта';
				source=Context.getSource(sourceId);
				if(!source){
					stateMsg=stateMsg+'. Ошибка инициализации, не найден источник '+sourceId.toString();
					Alert.show(stateMsg);
					return;
				}
				webService.addEventListener(Event.COMPLETE,webHandler);
				try{
					webService.getMailPackage(id);
				}catch(error:Error){
					Alert.show('Ошибка web сервиса '+source.name+': '+error.message );
					return;
				}
				CursorManager.setBusyCursor();
				show();
			}
			
			private function show():void{
				if(this.isOpen) return;
				this.open((FlexGlobals.topLevelApplication as DisplayObjectContainer),true);
				this.width=FlexGlobals.topLevelApplication.width-50;
				this.height=FlexGlobals.topLevelApplication.height-100;
				PopUpManager.centerPopUp(this);

			}
			
			private function webHandler(e:Event):void{
				var pw:BaseWeb=e.target as BaseWeb;
				CursorManager.removeBusyCursor();
				pw.removeEventListener(Event.COMPLETE,webHandler);
				//TODO load orders
				if(pw.hasError){
					trace('web getMailPackage err: '+pw.errMesage);
					stateMsg='Ошибка загрузки с сайта: '+pw.errMesage;
					return;
				}
				mailPackage=pw.getLastMailPackage();
				if(!mailPackage){
					stateMsg='Ошибка загрузки с сайта';
					return;
					
				}
				
				printForms=DeliveryTypePrintForm.getForms(mailPackage.delivery_id);

				//var svc:MailPackageService=Tide.getInstance().getContext().byType(MailPackageService,true) as MailPackageService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onload);
				latch.addLatch(bdService.loadChildOrders(mailPackage.source, mailPackage.id));
				latch.start();
				if(showClienGroups){
					var latchGroups:DbLatch=new DbLatch();
					latchGroups.addEventListener(Event.COMPLETE,onGroupsload);
					latchGroups.addLatch(bdService.loadByClient(mailPackage.source, mailPackage.client_id));
					latchGroups.start();
				}
			}
			private function onload(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onload);
					if(latch.complite){
						mailPackage.orders=latch.lastDataAC;
					}
				}
			}
			private function onGroupsload(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onGroupsload);
					if(latch.complite){
						cliPackages=latch.lastDataAC;
						cliPackages.filterFunction=filterCliPackages;
						cliPackages.refresh();
					}
				}
			}
			
			private function filterCliPackages(item:Object):Boolean {
				var pg:MailPackage=item as MailPackage;
				if(!pg) return false;
				if(!mailPackage || mailPackage.id==pg.id) return false;
				return true;
			}


			protected function btAddBarcode_clickHandler(event:MouseEvent):void{
				if(!mailPackage) return;
				var bar:MailPackageBarcode= new MailPackageBarcode();
				bar.source=mailPackage.source;
				bar.id=mailPackage.id;
				bar.barcode='';
				bar.bar_type=0;
				if(!mailPackage.barcodes) mailPackage.barcodes=new ArrayCollection();
				mailPackage.barcodes.addItem(bar);
				if(dgBarCode) dgBarCode.selectedItem=bar;
			}
			
			protected function btPrintBarcode_clickHandler(event:MouseEvent):void{
				if(!mailPackage) return;
				var bar:MailPackageBarcode;
				if(dgBarCode) bar=dgBarCode.selectedItem as MailPackageBarcode;
				if(!bar && mailPackage.barcodes && mailPackage.barcodes.length>0) bar=mailPackage.barcodes.getItemAt(0) as MailPackageBarcode;
				if(!bar) return;
				Printer.instance.printMPBarcode(mailPackage.id_name, bar.barcode);
			}
			
			protected function dgPackages_creationCompleteHandler(event:FlexEvent):void{
				var gridMenu:GridContexMenu;
				gridMenu= new GridContexMenu(dgPackages); 
				gridMenu.addItem('Открыть',openCallBack);
			}
			private function openCallBack(grid:DataGrid,param:int):void{
				var onItem:MailPackage=grid.selectedItem as MailPackage;
				if(onItem){
					var pop:MailPackagePopUp= new MailPackagePopUp();
					pop.loadFromWeb(onItem.source, onItem.id);
				}
			}
			
			protected function list1_clickHandler(event:MouseEvent):void{
				if(event.target is Button && event.target.id=='btPrint'){
					var form:DeliveryTypePrintForm= lstPrint.selectedItem as DeliveryTypePrintForm;
					if(!form || !mailPackage) return;
					var bar:MailPackageBarcode;
					if(dgBarCode) bar=dgBarCode.selectedItem as MailPackageBarcode;
					if(!bar && mailPackage.barcodes && mailPackage.barcodes.length>0) bar=mailPackage.barcodes.getItemAt(0) as MailPackageBarcode;
					var code:String;
					if(bar) code=bar.barcode;
					Printer.instance.printDeliveryForm(mailPackage,form,code);
				}
			}
			
			private var joinIds:Array;
			protected function btJoin_clickHandler(event:MouseEvent):void{
				joinIds=[];
				var it:MailPackage;
				if(!cliPackages || cliPackages.length==0) return;
				for each(it in cliPackages){
					if(it && it.isSelected) joinIds.push(it.id);
				}
				if(joinIds.length==0) return;
				joinIds.push(mailPackage.id);
				webService.addEventListener(Event.COMPLETE,joinHandler);
				try{
					webService.joinMailPackages(joinIds);
				}catch(error:Error){
					Alert.show('Ошибка web сервиса '+source.name+': '+error.message );
					return;
				}
			}
			
			private function joinHandler(e:Event):void{
				webService.removeEventListener(Event.COMPLETE,joinHandler);
				//TODO load orders
				if(webService.hasError){
					joinIds=[];
					trace('web err: '+webService.errMesage);
					Alert.show(webService.errMesage);
					return;
				}
				var newId:int=webService.getJoinResultId();
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onJoin);
				//SqlResult join(int source, int targetId, List<Integer> joinIds);
				latch.addLatch(bdService.join(source.id,newId,new ArrayCollection(joinIds)),newId.toString());
				latch.start();
			}
			private function onJoin(event:Event):void{
				joinIds=[];
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onJoin);
					if(latch.complite){
						var newId:int= int(latch.lastTag);
						if(newId) loadFromWeb(source.id, newId,true);
					}
				}
			}

			protected function btSetSiteState_clickHandler(event:MouseEvent):void{
				if(!mailPackage || !mailPackage.id) return;
				webService.addEventListener(Event.COMPLETE,setStateHandler);
				try{
					webService.setMailPackageState(mailPackage.id, FotoknigaWeb.ORDER_STATE_MADE ,false);
				}catch(error:Error){
					Alert.show('Ошибка web сервиса '+source.name+': '+error.message );
				}
			}
			private function setStateHandler(e:Event):void{
				webService.removeEventListener(Event.COMPLETE,setStateHandler);
				if(webService.hasError){
					trace('web err: '+webService.errMesage);
					if(webService.hasErrCode(FotoknigaWeb.ERR_CODE_BALANCE)){
						Alert.buttonWidth=150;
						Alert.yesLabel='Игнорировать баланс'; 
						Alert.cancelLabel='Отмена';
						Alert.show(webService.errMesage,'',Alert.YES|Alert.CANCEL, this, alertClickHandler);
						
						Alert.buttonWidth=75;
						Alert.yesLabel='Да';
						Alert.noLabel='Нет';
					}else{
						Alert.show(webService.errMesage);
					}
				}else{
					Alert.show('Статус изменен');
				}
			}
			
			private function alertClickHandler(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					webService.addEventListener(Event.COMPLETE,setForceStateHandler);
					try{
						webService.setMailPackageState(mailPackage.id, FotoknigaWeb.ORDER_STATE_MADE , true);
					}catch(error:Error){
						Alert.show('Ошибка web сервиса '+source.name+': '+error.message );
					}
				}
			}
			private function setForceStateHandler(e:Event):void{
				webService.removeEventListener(Event.COMPLETE,setStateHandler);
				if(webService.hasError){
					trace('web err: '+webService.errMesage);
					Alert.show(webService.errMesage);
				}else{
					Alert.show('Статус изменен');
				}
			}

			private function messagesLabelFunc(item:Object):String{
				var res:String='';
				var msg:MailPackageMessage=item as MailPackageMessage;
				if(msg){
					res=msg.log_key+': '+ msg.log_user+': '+msg.message;
				}
				return res;
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dtFormater" dateTimePattern="dd.MM.yyyy HH:mm"/>
	</fx:Declarations>

	<s:Rect radiusX="6" top="0" left="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="#444444" weight="1"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#ffffff"/>
		</s:fill>
	</s:Rect>

	<s:VGroup gap="5" top="10" left="10" right="10" bottom="10">
		<s:Label text="{stateMsg}" width="100%"/>
		<s:HGroup width="100%">
			<s:Form id="frmOrder" backgroundAlpha="0" >
				<s:layout>
					<s:FormLayout gap="-12"/>
				</s:layout>
				
				<s:FormItem label="ID">
					<s:TextInput id="tiID" text="{mailPackage.id_name} ({mailPackage.id})" width="200"/>
				</s:FormItem> 
				<s:FormItem label="Источник">
					<s:TextInput  text="{mailPackage.source_name}" width="200"/>
				</s:FormItem> 
				<s:FormItem label="Доставка">
					<s:TextInput  text="{mailPackage.delivery_name}" width="200"/>
				</s:FormItem> 
				<s:FormItem label="Срок исполнения">
					<s:TextInput  text="{dtFormater.format(mailPackage.execution_date)}" width="200"/>
				</s:FormItem> 
				<s:FormItem label="Кол заказов">
					<s:TextInput  text="{mailPackage.orders_num.toString()}" width="200"/>
				</s:FormItem> 
				<s:FormItem label="Примечания">
					<s:List dataProvider="{mailPackage.messages}" width="300">
						<s:layout>
							<s:VerticalLayout gap="0" requestedRowCount="2"/>
						</s:layout>
						<s:itemRenderer>
							<fx:Component>
								<s:ItemRenderer>
									<s:VGroup  width="100%" top="2" bottom="2" left="2" right="2" gap="5" horizontalAlign="left">
										<s:Label text="{data.log_key}:{data.log_user}"/>
										<s:Label text="{data.message}" width="100%" fontWeight="bold"/>
									</s:VGroup>
								</s:ItemRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:List>
				</s:FormItem> 

			</s:Form>
			<s:VGroup width="100%" height="100%" gap="5" visible="{showClienGroups}">
				<s:Label text="Все группы клиента"/>
				<s:DataGrid id="dgPackages" selectionMode="singleRow"
							 width="100%" height="100%" editable="true"
							creationComplete="dgPackages_creationCompleteHandler(event)"
							dataProvider="{cliPackages}" locale="ru_RU" columns="{MailPackage.clientPackagesColumns()}">
					<s:rowBackground>
						<fx:Component>
							<itemRenderer:TechMailPDataGridRowBackground/>
						</fx:Component>
					</s:rowBackground>
				</s:DataGrid>
				<s:Button id="btJoin" label="Объединить" toolTip="Объединить отмеченные с текущей группой" click="btJoin_clickHandler(event)"/>
			</s:VGroup>
		</s:HGroup>

		<s:HGroup width="100%" height="100%" gap="10">
			<s:VGroup width="50%" height="100%" gap="5">
				<s:Label text="Атрибуты"/>
				<s:DataGrid id="dgAtrs" selectionMode="singleRow" width="100%" height="100%" 
							dataProvider="{mailPackage.properties}" locale="ru_RU" columns="{MailPackageProperty.gridColumns()}"/>
			</s:VGroup>
			<s:VGroup width="50%" height="100%" gap="5">
				<s:Label text="Заказы"/>
				<s:DataGrid id="dgProps" selectionMode="singleRow" width="100%" height="100%" 
							dataProvider="{mailPackage.orders}" locale="ru_RU" columns="{Order.shortGridColumns()}"/>
				<s:Spacer height="5"/>
				<s:HGroup width="100%" height="100%" gap="10">
					<s:VGroup width="100%" height="100%" gap="5">
						<s:Label text="Штрих коды"/>
						<s:DataGrid id="dgBarCode" selectionMode="singleRow" width="100%" height="100%"  editable="true"
									dataProvider="{mailPackage.barcodes}" locale="ru_RU" columns="{MailPackageBarcode.gridColumns()}"/>
						<s:Button id="btAddBarcode" label="Добавить" click="btAddBarcode_clickHandler(event)"/>
					</s:VGroup>
					<!--<s:Button id="btPrintBarcode" label="Печать" click="btPrintBarcode_clickHandler(event)"/>-->
					<s:VGroup height="100%" gap="5">
						<s:Label text="Печать"/>
						<s:List id="lstPrint" dataProvider="{printForms}" labelField="form_name" height="100%"
								itemRenderer="com.photodispatcher.view.itemRenderer.PrintFormButtonRenderer"
								click="list1_clickHandler(event)"/>
					</s:VGroup>
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>

		<s:Spacer height="5"/>
		<s:HGroup width="100%" horizontalAlign="right">
			<s:Button id="btSetSiteState" label="Упакован" toolTip="Сменить статус на сайте" 
					  enabled="{source.type==SourceType.SRC_FOTOKNIGA}" click="btSetSiteState_clickHandler(event)"/>
			<s:Spacer width="20"/>
			<s:Button id="btClose" label="Закрыть" click="{close()}"/>
		</s:HGroup>
	</s:VGroup>
</s:SkinnablePopUpContainer>
