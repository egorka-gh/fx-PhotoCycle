<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:view="com.photodispatcher.view.*"
		 xmlns:views="com.jxl.chatserver.views.*" 
		 xmlns:services="com.jxl.chatserver.mvcs.services.*" 
		 xmlns:remote="com.photodispatcher.view.remote.*"
		 xmlns:preprocess="com.photodispatcher.provider.preprocess.*"
		 creationComplete="{init()}"
		 keyDown="onKey(event)" xmlns:ns="com.photodispatcher.provider.ftp_loader.*" xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*">
	
	<fx:Script>
		<![CDATA[
			import com.akmeful.util.ArrayUtil;
			import com.photodispatcher.context.Context;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.Order;
			import com.photodispatcher.model.mysql.entities.OrderLoad;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.Source;
			import com.photodispatcher.model.mysql.entities.StateLog;
			import com.photodispatcher.model.mysql.services.OrderLoadService;
			import com.photodispatcher.model.mysql.services.OrderStateService;
			import com.photodispatcher.service.SyncInactiveLoaderService;
			import com.photodispatcher.service.SyncLoaderService;
			import com.photodispatcher.view.menu.GridContexMenu;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;

			public static const REFRESH_INTERVAL:int=10;//min
			public static const FORCE_START_INTERVAL:int=10;//min

			[Bindable]
			private var isRuning:Boolean=false;
			[Bindable]
			private var sources:ArrayCollection;

			[Bindable]
			public var helperMode:Boolean=false;

			private var syncService:SyncLoaderService;
			private var syncInactiveService:SyncInactiveLoaderService;
			
			//[Bindable]
			//private var ordersErrLimitList:ArrayCollection= new ArrayCollection();
			[Bindable]
			private var logList:ArrayCollection= new ArrayCollection();
			
			private var timer:Timer;
			private var ordersQueueGridMenu:GridContexMenu;
			private var ordersWriteQueueGridMenu:GridContexMenu;
			private var ordersErrLimitGridMenu:GridContexMenu;
			private var logGridMenu:GridContexMenu;

			[Bindable]
			private var stopLogList:IList;
			
			
			public function init():void{
				sources=new ArrayCollection(Context.getSources());
				
				syncService= new SyncLoaderService();
				syncService.sources=sources.source;
				
				syncInactiveService=new SyncInactiveLoaderService();
				syncInactiveService.sources=sources.source;
				
				if(focusManager) focusManager.setFocus(focusHolder);
			}
			

			private function onKey(e:KeyboardEvent):void{
				if(e.ctrlKey && e.keyCode==70){
					//order lookup
					var pop:OrderLoadSearchPopup=new OrderLoadSearchPopup();
					pop.open(null);
				}
			}
			
			private function startSync():void{
				if(isRuning) return;
				isRuning=true;
				resync();
			}
			private function onTimer(e:TimerEvent):void{
				resync();
			}
			private function resync():void{
				if(timer) timer.stop();
				if(syncService.isBusy || syncInactiveService.isBusy){
					startSyncTimer();
					return;
				}
				syncState='Получение списка загрузки';
				syncService.addEventListener(Event.COMPLETE,resyncCompleted);
				syncService.sync();
			}

			private function resyncCompleted(e:Event):void{
				syncService.removeEventListener(Event.COMPLETE,resyncCompleted);
				trace('resyncCompleted');

				if(syncInactiveService.isBusy){
					syncState='Ошибка. Сихронизация активных занята.';
					trace('wrong state syncInactiveService.isBusy');
					startSyncTimer();
					return;
				}
				//resync active
				syncState='Сихронизация активных заказов.';
				syncInactiveService.addEventListener(Event.COMPLETE,resyncInactiveCompleted);
				syncInactiveService.sync();
			}
			
			private function resyncInactiveCompleted(e:Event):void{
				syncState='Ожидание синхронизации.';
				syncInactiveService.removeEventListener(Event.COMPLETE,resyncInactiveCompleted);
				trace('resync active Completed');

				// start download 
				if(startServices){
					startServices=false;
					downloadManager.isStarted=true;
				}

				startSyncTimer();
			}
			
			[Bindable]
			private var syncState:String;
			
			private function startSyncTimer():void{
				if(!timer){
					var interval:int=Context.getAttribute('syncInterval');
					if(!interval) interval=REFRESH_INTERVAL;
					timer=new Timer(interval*60*1000,1);
					timer.addEventListener(TimerEvent.TIMER,onTimer);
				}else{
					timer.reset();
				}
				timer.start();
			}

			private function stopSync():void{
				if(timer){
					timer.stop();
					timer.removeEventListener(TimerEvent.TIMER,onTimer);
					timer=null;
				}
				isRuning=false;
			}

			
			private var startServices:Boolean;
			public function start():void{
				if(!Context.getAttribute('manualStart')){
						startSync();
						startServices=true;
				}else{
					downloadManager.reLoad();
				}
			}
			
			public function stop():void{
				stopSync();
				downloadManager.isStarted=false;
			}

			
			protected function btStop_clickHandler(event:MouseEvent):void{
				stop();
			}
			
			private function get bdService():OrderLoadService{
				return Tide.getInstance().getContext().byType(OrderLoadService,true) as OrderLoadService;
			}
			
			[Bindable]
			private var loadCompliteAC:ArrayCollection;
			[Bindable]
			private var loadInCompliteAC:ArrayCollection;

			protected function btRefreshInComplite_clickHandler(event:MouseEvent):void{
				var latch:DbLatch= new DbLatch(true);
				latch.addEventListener(Event.COMPLETE,onloadIncomplite);
				latch.addLatch(bdService.loadByState(OrderState.FTP_INCOMPLITE, OrderState.FTP_INCOMPLITE+1));
				latch.start();
			}
			private function onloadIncomplite(evt:Event):void{
				var latch:DbLatch= evt.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onloadIncomplite);
					if(latch.complite){
						loadInCompliteAC=latch.lastDataAC;
					}
				}
			}

			
			protected function btRefreshComplite_clickHandler(event:MouseEvent):void{
				var latch:DbLatch= new DbLatch(true);
				latch.addEventListener(Event.COMPLETE,onloadcomplite);
				latch.addLatch(bdService.loadByState(OrderState.FTP_COMPLETE, OrderState.FTP_COMPLETE+1));
				latch.start();
			}
			private function onloadcomplite(evt:Event):void{
				var latch:DbLatch= evt.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onloadcomplite);
					if(latch.complite){
						loadCompliteAC=latch.lastDataAC;
					}
				}
			}
			
			protected function btOpenErr_clickHandler(event:MouseEvent):void{
				var item:Order=dgInComplite.selectedItem as Order;
				if(item){
					var pop:OrderLoadInfoPopup=new OrderLoadInfoPopup();
					pop.show(item.id);
				}
			}
			
			protected function btOpenLoaded_clickHandler(event:MouseEvent):void{
				var item:Order=dgComplite.selectedItem as Order;
				if(item){
					var pop:OrderLoadInfoPopup=new OrderLoadInfoPopup();
					pop.show(item.id);
				}
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!--<ftp:DownloadManager id="downloadManager" sources="{sources.source}" autoLoad="true" />-->
		<ns:DownloadManager id="downloadManager" sources="{sources.source}" autoLoad="true" />
		<s:DateTimeFormatter id="fmtDate" dateTimePattern="HH:mm"/>
	</fx:Declarations>

	<s:Rect top="0" left="0" right="0" bottom="0">
		<s:fill>
			<s:SolidColor color="#cccccc"/>
		</s:fill>
	</s:Rect>

	<s:TextInput id="focusHolder" width="1" height="1" focusEnabled="true" focusAlpha="0" borderAlpha="0"/>

	<s:VGroup gap="5" top="30" left="10" right="10" bottom="10">
		<s:TabBar id="tbView"  dataProvider="{vsSubInfo}"/>
		<mx:ViewStack id="vsSubInfo" borderStyle="none" backgroundAlpha="0" width="100%" height="100%">
			<s:NavigatorContent label="Состояние" backgroundAlpha="0" width="100%" height="100%">
				<s:HGroup id="gState" gap="10" top="0" left="0" right="0" bottom="0">
					<s:VGroup gap="10" height="100%"  enabled="{!helperMode}">
						<s:Label text="Web синхронизация" fontWeight="bold"/>
						<s:Label text="{syncState}"/>
						<s:HGroup gap="10">
							<s:Button id="btStart" icon="assets/play.png" width="30" height="30" toolTip="Запустить синхронизацию" 
									  click="{startSync()}" enabled="{!isRuning}"/>
							<s:Button id="btStop" icon="assets/stop.png" width="30" height="30" toolTip="Остановить синхронизацию"
									  click="btStop_clickHandler(event)" enabled="{isRuning}"/>
						</s:HGroup>
						<s:Scroller width="220" height="100%">
							<s:DataGroup dataProvider="{sources}" itemRenderer="com.photodispatcher.view.itemRenderer.SourceItemRenderer"
										 width="220">
								<s:layout>
									<s:VerticalLayout gap="0"/>
								</s:layout>
							</s:DataGroup>
						</s:Scroller>
					</s:VGroup>
					<s:VGroup gap="10" width="510" height="100%">
						<s:Label text="Загрузка. Очередь: {downloadManager.queueLength} ({fmtDate.format(downloadManager.lastLoadTime)})" fontWeight="bold"/>
						<s:HGroup gap="10">
							<s:Button id="btFtpStart" icon="assets/play.png" width="30" height="30" toolTip="Запустить загрузку" 
									  enabled="{!downloadManager.isStarted}" click="{downloadManager.isStarted=true}"/>
							<s:Button id="btFtpStop" icon="assets/stop.png" width="30" height="30" toolTip="Остановить загрузку"
									  click="{downloadManager.isStarted=false}"/>
						</s:HGroup>
						<s:Scroller width="100%" height="100%">
							<s:DataGroup width="100%" height="100%" dataProvider="{downloadManager.servicesList}" 
										 itemRenderer="com.photodispatcher.view.itemRenderer.QueueManagerLoaderRenderer">
								<s:layout>
									<s:VerticalLayout gap="0"/>
								</s:layout>
							</s:DataGroup>
						</s:Scroller>
					</s:VGroup>
					
					<s:Spacer width="10"/>
					<s:VGroup gap="5" width="200" height="100%">
						<s:HGroup gap="5" width="100%">
							<s:Label text="Проверка" fontWeight="bold"/>
							<s:Label text="Очередь: {downloadManager.checker.queue.length}" fontWeight="bold" width="100%" maxDisplayedLines="1"/>
						</s:HGroup>
						<s:Label text="{downloadManager.checker.lastError}" fontWeight="bold" height="30" width="100%" maxDisplayedLines="2"/>
						<!--<s:HGroup gap="10">
							<s:Button id="btBuilderStart" icon="assets/play.png" width="30" height="30" toolTip="Запустить подготовку"/>
							<s:Button id="btBuilderStop" icon="assets/stop.png" width="30" height="30" toolTip="Остановить подготовку"/>
						</s:HGroup>-->
						<itemRenderer:CheckerRenderer data="{downloadManager.checker.md5Checker}"/>
						<itemRenderer:CheckerRenderer data="{downloadManager.checker.imChecker}"/>
					</s:VGroup>
				</s:HGroup>
			</s:NavigatorContent>
			<s:NavigatorContent label="Заказы" backgroundAlpha="0" width="100%" height="100%">
				<s:VGroup gap="5" top="0" left="0" right="0" bottom="0">
					<s:TabBar id="tbViewOrders"  dataProvider="{vsOrders}"/>
					<mx:ViewStack id="vsOrders" borderStyle="none" backgroundAlpha="0" width="100%" height="100%">
						<s:NavigatorContent label="В работе" backgroundAlpha="0" width="100%" height="100%">
							<view:OrderLoadListView items="{downloadManager.queue}"
													width="100%" height="100%"/>
						</s:NavigatorContent>
						<s:NavigatorContent label="Загрузка" backgroundAlpha="0" width="100%" height="100%">
							<s:HGroup gap="10" width="100%" height="100%">
								<s:List id="lstLoadManagers" dataProvider="{downloadManager.servicesList}" labelField="sourceCaption"
										height="100%"/>
								<view:OrderLoadListView items="{lstLoadManagers.selectedItem.queue}"
														width="100%" height="100%"/>
							</s:HGroup>
						</s:NavigatorContent>
						<s:NavigatorContent label="Проверка" backgroundAlpha="0" width="100%" height="100%">
							<view:OrderLoadListView items="{downloadManager.checker.queue}"
													width="100%" height="100%"/>
						</s:NavigatorContent>
						<s:NavigatorContent label="Ошибка загрузки" backgroundAlpha="0" width="100%" height="100%">
							<s:VGroup gap="5" width="100%" height="100%">
								<s:HGroup gap="10" width="100%">
									<s:Button id="btRefreshInComplite" icon="assets/icon-refresh.gif" click="btRefreshInComplite_clickHandler(event)" 
											  cornerRadius="4" width="22" height="22" baseline="4"/>
									<s:Spacer width="100%" />
									<s:Button id="btOpenErr" label="Открыть" click="btOpenErr_clickHandler(event)"/>
								</s:HGroup> 
								<s:DataGrid id="dgInComplite"
											columns="{OrderLoad.gridColumns()}"
											dataProvider="{loadInCompliteAC}"
											selectionMode="singleRow"  locale="ru_RU"
											width="100%" height="100%"/>
							</s:VGroup>
						</s:NavigatorContent>
						<s:NavigatorContent label="Загружены" backgroundAlpha="0" width="100%" height="100%">
							<s:VGroup gap="5" width="100%" height="100%">
								<s:HGroup gap="10" width="100%">
									<s:Button id="btRefreshComplite" icon="assets/icon-refresh.gif" click="btRefreshComplite_clickHandler(event)" 
											  cornerRadius="4" width="22" height="22" baseline="4"/>
									<s:Spacer width="100%"/>
									<s:Button id="btOpenLoaded" label="Открыть" click="btOpenLoaded_clickHandler(event)"/>
								</s:HGroup>
								<s:DataGrid id="dgComplite"
											columns="{OrderLoad.gridColumns()}"
											dataProvider="{loadCompliteAC}"
											selectionMode="singleRow"  locale="ru_RU"
											width="100%" height="100%"/>
							</s:VGroup>
						</s:NavigatorContent>
					</mx:ViewStack>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
	
</s:Group>
