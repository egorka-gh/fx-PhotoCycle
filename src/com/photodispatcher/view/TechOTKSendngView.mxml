<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*"
		 creationComplete="{init()}"
		 keyDown="onKey(event)"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.factory.WebServiceBuilder;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.DeliveryTypeDictionary;
			import com.photodispatcher.model.mysql.entities.GroupNetprint;
			import com.photodispatcher.model.mysql.entities.MailPackage;
			import com.photodispatcher.model.mysql.entities.MailPackageBox;
			import com.photodispatcher.model.mysql.entities.Order;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.Source;
			import com.photodispatcher.model.mysql.entities.SourceType;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.model.mysql.services.GroupNetprintService;
			import com.photodispatcher.model.mysql.services.MailPackageService;
			import com.photodispatcher.model.mysql.services.OrderService;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.service.web.BaseWeb;
			import com.photodispatcher.service.web.FotoknigaWeb;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.view.menu.GridContexMenu;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			public var isActive:Boolean;
			
			[Bindable]
			private var packagesAC:ArrayCollection;
			[Bindable]
			private var gridColumns:ArrayList;
			
			[Bindable]
			public var techPointOTK:TechPoint;
			
			[Bindable]
			protected var chkSource: Source;
			[Bindable]
			protected var sourceList:ArrayCollection;
			[Bindable]
			protected var netprintBoxesAC:ArrayCollection;
			[Bindable]
			protected var currBox:GroupNetprint;
			
			private function init():void{
				refresh();
				if(focusManager) focusManager.setFocus(focusHolder);
				sourceList= new ArrayCollection(Context.getSources());
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				var s:int  =so.data.netprintSource;
				if (s==0) s=11;
				chkSource = Context.getSource(s);
			}
			
			private var _bdService:MailPackageService;
			private function get bdService():MailPackageService{
				if(!_bdService) _bdService=Tide.getInstance().getContext().byType(MailPackageService,true) as MailPackageService;
				return _bdService;
			}
			
			private var _netprintSvc:GroupNetprintService;
			private function get netprintSvc():GroupNetprintService{
				if(!_netprintSvc) _netprintSvc=Tide.getInstance().getContext().byType(GroupNetprintService,true) as GroupNetprintService;
				return _netprintSvc;
			}
			
			
			private function detectState():void{
				switch(tbView.selectedIndex){
					case 0:
						currentState='packedList';
						break;
					case 1:
						currentState='netprintView';
						break;
				}
				refresh();
				if(focusManager) focusManager.setFocus(focusHolder);
			}
			
			private function refresh():void{
				packagesAC=null;
				gridMenuRemove();
				switch(currentState){
					case 'packedList':
						gridColumns=MailPackageBox.columns();
						loadbyState(OrderState.PACKAGE_PACKED);
						gridMenuAddPacked();
						break;
				}
			}
			
			private function loadbyState(state:int):void{
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onload);
				latch.addLatch(bdService.loadBoxesByState(state));
				latch.start();
			}
			private function onload(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onload);
					if(latch.complite){
						packagesAC=latch.lastDataAC;
					}
				}
			}
			
			private var gridMenu:GridContexMenu;
			protected function dgPackages_creationCompleteHandler(event:FlexEvent):void{
				gridMenu= new GridContexMenu(dgPackages); 
				gridMenu.addItem('Открыть',openCallBack);
			}
			private function openCallBack(grid:DataGrid,param:int):void{
				/*
				var onItem:MailPackage=grid.selectedItem as MailPackage;
				if(onItem){
					showMP(onItem);
				}
				*/
			}
			
			private function gridMenuRemove(preserve:int=0):void{
				if(!gridMenu) return;
				gridMenu.removeByParameter(preserve);
			}
			
			private function gridMenuAddPacked():void{
				if(!gridMenu) return;
				gridMenu.addItem('Отправлен',sendCallBack,OrderState.PACKAGE_PACKED);
			}
			private function sendCallBack(grid:DataGrid,param:int):void{
				//var onItem:MailPackage=grid.selectedItem as MailPackage;
				Alert.show('Сменить статус на "Отправлен"?','',Alert.YES|Alert.NO, this, onAlertSetSend);
			}
			private function onAlertSetSend(evt:CloseEvent):void {
				if (evt.detail == Alert.YES && dgPackages.selectedItems && dgPackages.selectedItems.length>0){
					setSiteSend(dgPackages.selectedItem as MailPackageBox);
				}
			}

			private var sendBox:MailPackageBox;
			private function setSiteSend(box : MailPackageBox):void{
				sendBox = null;
				if(!box) return;
				sendBox = box;
				sendBox.state= OrderState.PACKAGE_SEND;
				var latch:DbLatch=new DbLatch(); 
				latch.addEventListener(Event.COMPLETE,onSetSend);
				latch.addLatch(bdService.setBoxSend(sendBox.boxID));
				latch.start();
			}
			private function onSetSend(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onSetSend);
					if(latch.complite){
						
						var source:Source =Context.getSource(sendBox.source);
						if(!source){
							refresh();
							return;
						}
						if(source.type!=SourceType.SRC_FOTOKNIGA && source.type!=SourceType.SRC_FBOOK && source.type!=SourceType.SRC_PIXELPARK){
							refresh();
							return;
						}
						var webService:BaseWeb;
						if(sendBox.boxNum>0){
							//set box state
							webService = WebServiceBuilder.build(source);
							webService.addEventListener(Event.COMPLETE,setStateSendHandler);
							try{
								webService.setBoxState(sendBox);
							}catch(error:Error){
								Alert.show('Ошибка web сервиса '+source.name+': '+error.message );
							}					
						}
						
						//if whole package is complete
						if(latch.resultCode < OrderState.PACKAGE_SEND){
							//no
							refresh();
							return;
						}
						//set send on site
						webService = WebServiceBuilder.build(source);
						//double click
						//if (webService.isRunning) return;
						//update site state
						//var dt:DeliveryTypeDictionary = DeliveryTypeDictionary.getDeliveryTypeDictionary(source.id, mailPackage.native_delivery_id);
						//TODO if(source.type==SourceType.SRC_PIXELPARK || (dt && dt.setSend)){
						//TODO resolve DeliveryType check
						
						//update site state
						webService.addEventListener(Event.COMPLETE,setStateSendHandler);
						try{
							webService.setMailPackageState(sendBox.packageID, FotoknigaWeb.ORDER_STATE_SHIPPED ,false);
						}catch(error:Error){
							Alert.show('Ошибка web сервиса '+source.name+': '+error.message );
						}					
					}
				}
			}
			private function setStateSendHandler(e:Event):void{
				var webService:BaseWeb = e.target as BaseWeb;
				if(!webService) return;
				webService.removeEventListener(Event.COMPLETE,setStateSendHandler);
				if(webService.hasError){
					trace('web err: '+webService.errMesage);
					//if(!webService.hasErrCode(FotoknigaWeb.ERR_CODE_SKIP_NOTIMPLEMENTED)){
					Alert.show(webService.errMesage);
					//}
				}
				refresh();
			}
				
			
			private function showMP(item:MailPackage):void{
				if(!item) return;
				//var pop:MailPackagePopUp= new MailPackagePopUp();
				//if(currentState=='inQueue')
				showMPbyId(item.source, item.id);
			}
			
			private function showMPbyId(source:int, groupId:int, showClienGroups:Boolean=true, netprintId:String='', boxes:ArrayCollection=null):void{
				if(!source || !groupId) return;
				var pop:MailPackagePopUp= new MailPackagePopUp();
				//if(currentState=='inQueue')
				pop.netprintId=netprintId;
				pop.boxes = boxes;
				pop.addEventListener(PopUpEvent.CLOSE, onMPpopClose);
				pop.loadFromWeb(source, groupId, showClienGroups, techPointOTK);
			}
			
			private function onMPpopClose(evt:PopUpEvent):void{
				var pop:MailPackagePopUp=evt.target as MailPackagePopUp;
				if(pop) pop.removeEventListener(PopUpEvent.CLOSE, onMPpopClose);
				refresh();
			}
			
			private var _barcodeReader:ComReader;
			public function get barcodeReader():ComReader{
				return _barcodeReader;
			}
			public function set barcodeReader(value:ComReader):void{
				if(_barcodeReader){
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
				}
				_barcodeReader = value;
				if(_barcodeReader){
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
				}
			}
			
			private function findeByNetprint(netprintId:String):void{
				
				if(!chkSource){
					Alert.show('Не выбран сайт');
					return;
				}
				var latch:DbLatch = new DbLatch();
				latch.addLatch( netprintSvc.findeByNetprint(chkSource.id,netprintId,false), netprintId);
				latch.addEventListener(Event.COMPLETE,onNetprintFinde);
				latch.start();
			}
			private function onNetprintFinde(e:Event):void{
				var latch:DbLatch=e.target as DbLatch;
				var netprintId:String=newScanId;
				newScanId='';
				var boxes:ArrayCollection;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onNetprintFinde);
					if(latch.complite){
						boxes=latch.lastDataAC;
					}
				}
				if(!boxes || boxes.length==0){
					Alert.show('Не найдена коробка '+netprintId);
					return;
				}
				var np:GroupNetprint = boxes.getItemAt(0) as GroupNetprint;
				if(np){
					showMPbyId(np.source, np.groupId, false, netprintId, boxes);
				}
			}
			
			private var newScanId:String;
			private function onBarCode(event:BarCodeEvent):void{
				if(!isActive) return;
				var barcode:String=event.barcode;
				if(newScanId) return; //previouse scan incomplite
				newScanId= barcode;
				if(!newScanId){
					Alert.show('Не верный ШК: "'+barcode+'".');
					return;
				}
				
				if (currentState=='netprintView'){
					findeByNetprint(newScanId);
					return;
				}
				var svc:OrderService=Tide.getInstance().getContext().byType(OrderService,true) as OrderService;
				var latch:DbLatch=svc.findeById(newScanId,true);
				latch.addEventListener(Event.COMPLETE,onOrderFinde);
				latch.start();
			}
			private function onOrderFinde(e:Event):void{
				var ordId:String=PrintGroup.orderIdFromBookBarcode(newScanId);
				if(!ordId) ordId=newScanId;
				newScanId='';
				var latch:DbLatch=e.target as DbLatch;
				var ordersList:ArrayCollection;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onOrderFinde);
					if(latch.complite){
						ordersList=latch.lastDataAC;
					}
				}
				if(!ordersList) return;
				
				if(ordersList.length==1){
					var ord:Order=ordersList.getItemAt(0) as Order;
					if(ord) showMPbyId(ord.source, ord.groupId);
				}else{
					var pop:OrderSearchPopup= new OrderSearchPopup();
					pop.addEventListener(PopUpEvent.CLOSE, onOrderAdd);
					pop.findeMode=true;
					pop.finde(ordId);
				}
			}
			private function onOrderAdd(event:PopUpEvent):void{
				var pop:OrderSearchPopup=event.target as OrderSearchPopup;
				if(pop) pop.removeEventListener(PopUpEvent.CLOSE, onOrderAdd);
				if(event.commit && pop && pop.lastOrder){
					showMPbyId(pop.lastOrder.source, pop.lastOrder.groupId);
				}
			}
			
			private function onKey(e:KeyboardEvent):void{
				if(e.ctrlKey && e.keyCode==70){
					//order lookup
					var pop:OrderSearchPopup= new OrderSearchPopup();
					pop.addEventListener(PopUpEvent.CLOSE, onOrderAdd);
					pop.findeMode=true;
					pop.open(null);
				}
			}
			
			
			[Bindable]
			private var byClientMP:MailPackage;
			protected function btShowByClient_clickHandler(event:MouseEvent):void{
				if(!dgPackages) return;
				byClientMP=dgPackages.selectedItem as MailPackage;
				if(!byClientMP) return;
				currentState='inQueueByClient';
				refresh();
			}
			
			
			protected function ddSource_changeHandler(event:IndexChangeEvent):void {
				var s:Source = ddSource.selectedItem as Source;
				if (s){
					chkSource = s;
					var so:SharedObject = SharedObject.getLocal('appProps','/');
					so.data.netprintSource = s.id;
					so.flush();  
				}
			}
			
			protected function btFinde_clickHandler(event:MouseEvent):void{
				netprintBoxesAC = null;
				var grp:int=int(tiGroup.text)
				if (grp==0 || !chkSource) return;
				var latch:DbLatch= new DbLatch();
				latch.addLatch(netprintSvc.loadByGroup(chkSource.id, grp));
				latch.addEventListener(Event.COMPLETE,onGroupBoxesLoad);
				latch.start();
			}
			private function onGroupBoxesLoad(e:Event):void{
				var latch:DbLatch=e.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onGroupBoxesLoad);
					if(latch.complite){
						netprintBoxesAC=latch.lastDataAC;
					}
				}
			}
			
			protected function btOpenByBox_clickHandler(event:MouseEvent):void{
				var b:GroupNetprint = dgBoxes.selectedItem as GroupNetprint;
				if(!b) return;
				var e:BarCodeEvent = new BarCodeEvent(BarCodeEvent.BARCODE_READED,b.netprintId);
				onBarCode(e);				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="packedList"/>
		<s:State name="netprintView"/>
	</s:states>
	
	<s:TabBar id="tbView" top="0" left="0" height="20" change="{detectState()}">
		<mx:ArrayCollection>
			<fx:String>Упакован</fx:String> 
			<fx:String>Нетпринт</fx:String> 
		</mx:ArrayCollection>
	</s:TabBar>
	<s:TextInput id="focusHolder" width="1" height="1" focusEnabled="true" focusAlpha="0" borderAlpha="0"/>
	<s:VGroup top="20" left="10" right="10" bottom="10" gap="5" excludeFrom="netprintView">
		<s:HGroup width="100%" horizontalAlign="right" gap="10" verticalAlign="baseline">
			<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refresh()}"
					  cornerRadius="4" width="22" height="22" baseline="4"/>
		</s:HGroup>
		<s:DataGrid id="dgPackages" selectionMode="singleRow"
					fontSize="14" width="100%" height="100%"
					creationComplete="dgPackages_creationCompleteHandler(event)"
					dataProvider="{packagesAC}" locale="ru_RU" columns="{gridColumns}">
			<s:rowBackground>
				<fx:Component>
					<itemRenderer:TechBoxItemDataGridRowBackground/>
				</fx:Component>
			</s:rowBackground>
		</s:DataGrid>
	</s:VGroup>
	<s:VGroup top="20" left="10" right="10" bottom="10" gap="10" includeIn="netprintView">
		<s:HGroup width="100%" gap="5" verticalAlign="baseline" paddingTop="10">
			<s:Label text="Сайт:"/>
			<s:DropDownList id="ddSource" dataProvider="{sourceList}" 
							labelField="name" 
							selectedItem="{chkSource}"
							change="ddSource_changeHandler(event)" />
			<s:Spacer width="10"/>
			<s:Label text="Проверить группу:"/>
			<s:TextInput id="tiGroup"   width="200"/>
			<s:Button id="btFinde"  width="100" label="Найти" click="btFinde_clickHandler(event)"/>
		</s:HGroup>
		<s:DataGrid id="dgBoxes" selectionMode="singleRow"
					fontSize="14" width="100%" height="100%"
					dataProvider="{netprintBoxesAC}" locale="ru_RU" columns="{GroupNetprint.gridColumns()}">
			<s:rowBackground>
				<fx:Component>
					<itemRenderer:GroupNetprintGridRowBackground/>
				</fx:Component>
			</s:rowBackground>
		</s:DataGrid>
		<s:Button id="btOpenByBox" width="100" label="Открыть" click="btOpenByBox_clickHandler(event)"/>
	</s:VGroup>	
</s:Group>
