<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="com.photodispatcher.interfaces.ISimpleLogger"
		 xmlns:proxy="com.photodispatcher.view.tech.glue.proxy.*"
		 xmlns:mdcomp="spark.material.components.*"
		 xmlns:mdskins="spark.material.skins.*"
		 creationComplete="{init()}"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.event.GlueMessageEvent;
			import com.photodispatcher.event.SerialProxyEvent;
			import com.photodispatcher.model.mysql.AsyncLatch;
			import com.photodispatcher.service.barcode.ComInfo;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.service.barcode.SerialProxy;
			import com.photodispatcher.service.glue.GlueInfo;
			import com.photodispatcher.service.glue.GlueMessage;
			import com.photodispatcher.service.glue.GlueMessageBlock;
			import com.photodispatcher.service.glue.GlueMessageItem;
			import com.photodispatcher.service.glue.GlueProgram;
			import com.photodispatcher.service.glue.GlueProgramCode;
			import com.photodispatcher.service.glue.GlueProgramHandler;
			import com.photodispatcher.service.glue.GlueProgramStep;
			import com.photodispatcher.service.glue.GlueProxy;
			import com.photodispatcher.service.glue.GlueProxyCfg;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.util.StrUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import spark.formatters.DateTimeFormatter;
			import spark.utils.TextFlowUtil;
		
			public static const LOG_LEN_LIMIT:int=4000;

			/*
			public var glueIP:String;
			public var gluePort:int;
			*/
			
			protected var _glueDevice:GlueProxy;
			[Bindable]
			public function get glueDevice():GlueProxy
			{
				return _glueDevice;
			}
			public function set glueDevice(value:GlueProxy):void
			{
				if(_glueDevice){
					_glueDevice.removeEventListener(ErrorEvent.ERROR, onGlueErr);
					_glueDevice.removeEventListener(GlueMessageEvent.GLUE_MESSAGE, onGlueMessage);
					_glueDevice.stop();
					_glueDevice.loger=null;
				}
				_glueDevice = value;
				if(_glueDevice){
					_glueDevice.loger=this;
					_glueDevice.addEventListener(ErrorEvent.ERROR, onGlueErr);
					_glueDevice.addEventListener(GlueMessageEvent.GLUE_MESSAGE, onGlueMessage);
					_glueDevice.addEventListener(Event.CONNECT, onGlueConnect);
					_glueDevice.start();
				}
				if(glueHandler) glueHandler.glue=_glueDevice;
			}

			private var _serialProxy:SerialProxy;
			public function get serialProxy():SerialProxy{
				return _serialProxy;
			}
			public function set serialProxy(value:SerialProxy):void{
				if(_serialProxy){
					_serialProxy.removeEventListener(SerialProxyEvent.SERIAL_PROXY_ERROR, onProxyErr);
				}
				_serialProxy = value;
				if(_serialProxy){
					_serialProxy.addEventListener(SerialProxyEvent.SERIAL_PROXY_ERROR, onProxyErr);
				}
			}

			protected var _barcodeReaders:Array;
			protected function get barcodeReaders():Array{
				return _barcodeReaders;
			}
			protected function set barcodeReaders(value:Array):void{
				//log('Set barcode readers');
				var barReader:ComReader;
				if(_barcodeReaders){
					for each(barReader in _barcodeReaders){
						barReader.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
						barReader.removeEventListener(BarCodeEvent.BARCODE_ERR, onBarError);
						barReader.removeEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onBarDisconnect);
						//barReader.removeEventListener(BarCodeEvent.BARCODE_DEBUG, onBarDebug);
						//barReader.stop();
					}
				}
				//var deb:Boolean=Context.getAttribute('debugBarReders');
				_barcodeReaders = value;
				if(_barcodeReaders){
					for each(barReader in _barcodeReaders){
						barReader.addEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
						barReader.addEventListener(BarCodeEvent.BARCODE_ERR, onBarError);
						barReader.addEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onBarDisconnect);
						/*
						if(deb){
							barReader.debugMode=true;
							barReader.addEventListener(BarCodeEvent.BARCODE_DEBUG, onBarDebug);
						}
						*/
					}
				}
			}
			
			protected function onProxyErr(evt:SerialProxyEvent):void{
				logToScreen('SerialProxy error: '+evt.error, true);
			}
			

			[Bindable]
			protected var editProgramStep:GlueProgramStep;
			[Bindable]
			protected var glueHandler:GlueProgramHandler;
			[Bindable]
			public var progSetProdukt:GlueProgram;
			[Bindable]
			public var progSetProduktIdle:GlueProgram;

			[Bindable]
			protected var lastButtonsMessage:GlueMessage;
			[Bindable]
			protected var lastStatesMessage:GlueMessage;
			[Bindable]
			protected var lastStatesProduct:String;
			
			
			protected var progCodes:Array=[];
			
			[Bindable]
			protected var glueProduct:String='-';
			[Bindable]
			protected var barcodeProduct:String='';

			protected var lastBarcode:String;
			
			[Bindable]
			protected var viewCaption:String;
			[Bindable]
			protected var idleTime:int;
			[Bindable]
			protected var isRunning:Boolean;
			[Bindable]
			protected var idleTicks:int;

			protected function init():void{
				
			}

			private var logText:String = '';
			
			public function log(mesage:String, level:int=0):void{
				logToScreen(mesage);
			}
			public function clear():void{
				cleanLog();
			}
			
			private function logToScreen(msg:String, isError:Boolean=false):void{
				var color:String=isError?"'#990000'":"'#006600'";
				var bold:String=isError?"fontWeight='bold'":'';
				var fmt:DateTimeFormatter=new DateTimeFormatter();
				fmt.dateTimePattern='HH:mm:ss';
				logText ="<span>"+fmt.format(new Date())+" </span>"+"<span color="+color+" "+bold+">"+msg+"</span> <br />"+logText ;

				//cut
				if(logText.length> LOG_LEN_LIMIT){
					var idx:int=logText.indexOf('<br />',LOG_LEN_LIMIT);
					if(idx!=-1){
						logText=logText.substr(0,idx+6);
					}
				}

				try{
					if(logTextArea) logTextArea.textFlow=TextFlowUtil.importFromString(logText);
				}catch(error:Error){
					trace('TextFlow err, txt: '+logText);
					trace(error.message);
				}
				//logTextArea.scroller.verticalScrollBar.value = logTextArea.scroller.verticalScrollBar.maximum;
			}

			public function start(proxyCfg:GlueProxyCfg, codes:Array, idleTime:int):void{
				cleanLog();
				progCodes=codes;
				this.idleTime=idleTime;
				isRunning = false;
				lastBarcode='';
				barcodeProduct='';
				glueProduct='-';
				lastStatesProduct="";
				viewCaption= 'Простой';
				
				//connect barcodereaders
				if(!serialProxy.isStarted){
					logToScreen('SerialProxy not started...', true);
					return;
				}

				//connect glue
				if (!proxyCfg){
					logToScreen('Не настроена машина...', true);
					return;
				}
				
				if (!glueDevice || !glueDevice.isStarted || glueDevice.cfg.ip != proxyCfg.ip ){
					var gd: GlueProxy;
					gd=new GlueProxy();
					gd.cfg=proxyCfg;
					//listen & start glue proxy
					glueDevice = gd;	
				}
				
				//init programm handler
				if(!glueHandler){
					glueHandler= new GlueProgramHandler(false);
					//glueHandler.addEventListener(Event.COMPLETE,onglueHandlerComplite);
				}else{
					glueHandler.stop();
				}
				glueHandler.glue=glueDevice;
				glueHandler.loger=this;
				
				//connect barcodereaders
				if(!serialProxy.connected){
					//connect
					log('Ожидание подключения COM портов');
					serialProxy.addEventListener(SerialProxyEvent.SERIAL_PROXY_CONNECTED, onProxyConnect);
					serialProxy.connectAll();
					return;
				}
				onProxyConnect(null);
				
			}

			protected function onProxyConnect(evt:SerialProxyEvent):void{
				serialProxy.removeEventListener(SerialProxyEvent.SERIAL_PROXY_CONNECTED, onProxyConnect);
				log('SerialProxy: connect complite');
				if(!serialProxy.connected){
					log('Часть COM портов не подключено');
					log('SerialProxy:' +serialProxy.traceDisconnected());
				}
				var readers:Array= serialProxy.getProxiesByType(ComInfo.COM_TYPE_BARREADER);
				if(!readers || readers.length==0) return;
				var i:int;
				
				if(!barcodeReaders){
					//init bar readers
					var newBarcodeReaders:Array=[];
					for (i=0; i<readers.length; i++) newBarcodeReaders.push(new ComReader());
					barcodeReaders=newBarcodeReaders;
				}
				if(readers.length!=barcodeReaders.length){
					barcodeReaders=null;
					return;
				}
				//start readers
				for (i=0; i<readers.length; i++) (barcodeReaders[i] as ComReader).start(readers[i]);
			}
			
			public function stop():void{
				cleanLog();
				if(glueHandler){
					glueHandler.stop();
					glueHandler.glue = null;
				}
				if(glueDevice){
					glueDevice.removeEventListener(ErrorEvent.ERROR, onGlueErr);
					glueDevice.removeEventListener(GlueMessageEvent.GLUE_MESSAGE, onGlueMessage);
					glueDevice.stop();
				}
				glueDevice=null;
				
			}

			private function onGlueConnect( event:Event ):void{
				getGlueProduct();
			}

			private function onGlueMessage( event:GlueMessageEvent ):void{
				if(!event.message ) return;
				if(event.message.type==GlueMessageBlock.TYPE_BUTTON) lastButtonsMessage=event.message;
				if(event.message.type==GlueMessageBlock.TYPE_STATUS) lastStatesMessage=event.message;
			}
			
			private function cleanLog():void{
				logText='';
				if(logTextArea) logTextArea.text='';
			}
			
			protected function onGlueErr(event:ErrorEvent):void{
				logToScreen('Склейка ошибка: '+event.text,true);
			}

			protected function refreshGlue():void{
				lastButtonsMessage=null;
				lastStatesMessage=null;
				if(glueDevice && glueDevice.isStarted){
					//glueDevice.run_GetProduct();
					glueDevice.run_GetButtons();
					glueDevice.run_GetStatus();
					lastStatesProduct='?';
					var latch:AsyncLatch = glueDevice.run_GetProduct(true);
					latch.addEventListener(Event.COMPLETE,onRefreshGlueProduct);
					latch.start();
				}
			}
			protected function onRefreshGlueProduct(e:Event):void{
				var latch:AsyncLatch = e.target as AsyncLatch; 
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onRefreshGlueProduct);
					if(!latch.hasError){
						lastStatesProduct=glueDevice.devProduct;;
					}
				}
			}

			
			protected function btRefreshGlue_clickHandler(event:MouseEvent):void{
				if(glueDevice && glueDevice.isStarted){
					refreshGlue();
				}else{
					Alert.show('Склейка не подключена');
				}
			}
			
			/*
			protected function dummyButt():void{
				var msg:GlueMessage= new GlueMessage();
				msg.type=GlueMessageBlock.TYPE_BUTTON;
				var bl:GlueMessageBlock;
				var it:GlueMessageItem;
				
				// ~~||Name=button1||Text=Start||ColBack=#80FF80||Enabled=True||~~||Name=button4||Text=Quit||ColBack=#FFFF80||Enabled=False||@@
				bl= new GlueMessageBlock(); bl.type=msg.type; bl.key='button1'; msg.blocks.addItem(bl);
					it= new GlueMessageItem; it.key='Text'; it.value='Start'; bl.items.addItem(it); it.parentKey=bl.key; it.type=bl.type;
					it= new GlueMessageItem; it.key='ColBack'; it.value='#80FF80'; bl.items.addItem(it);  it.parentKey=bl.key; it.type=bl.type;
					it= new GlueMessageItem; it.key='Enabled'; it.value='True'; bl.items.addItem(it);  it.parentKey=bl.key; it.type=bl.type;
				bl= new GlueMessageBlock(); bl.type=msg.type; bl.key='button4'; msg.blocks.addItem(bl);
					it= new GlueMessageItem; it.key='Text'; it.value='Quit'; bl.items.addItem(it);  it.parentKey=bl.key; it.type=bl.type;
					it= new GlueMessageItem; it.key='ColBack'; it.value='#FFFF80'; bl.items.addItem(it);  it.parentKey=bl.key; it.type=bl.type;
					it= new GlueMessageItem; it.key='Enabled'; it.value='False'; bl.items.addItem(it);  it.parentKey=bl.key; it.type=bl.type;
				
				lastButtonsMessage=msg;
			}
			*/
			
			/*
			protected function run():void{
				//check barreaders/ glue
				if(!checkPrepared()) return;
				
				//TODO reset barcode?
				//barcodeProduct ='';
				//lastBarcode = '';
				
				//get current product
				getGlueProduct();
				isRunning = true;
				viewCaption ='Работа';
				stratIdleTimer();
				//waite barcode
			}
			*/
			
			protected function checkPrepared(showAlert:Boolean=false):Boolean{
				var prepared:Boolean=barcodeReaders && barcodeReaders.length>0 && 
					glueHandler && glueHandler.glue && glueHandler.glue.isStarted ;
				//check barreaders
				var barsConnected:Boolean=false;
				var barReader:ComReader;
				if (barcodeReaders && barcodeReaders.length>0){
					for each(barReader in barcodeReaders){
						if(barReader.connected){
							barsConnected=true;
							break;
						}
					}
				}
				if(!barsConnected) prepared=false;
				
				if(!prepared && showAlert){
					var msg:String='';
					if(!barcodeReaders || barcodeReaders.length==0) msg='Не инициализированы сканеры ШК';
					if(!barsConnected) msg= (msg?'\n':'')+'Не подключены сканеры ШК';
					if(!glueHandler || !glueHandler.glue.isStarted) msg=(msg?'\n':'')+'Не инициализирована склейка';
					log(msg);
					Alert.show(msg);
				}
				return 	prepared;
			}
			

			protected var idleTimer:Timer;
			protected function stratIdleTimer():void{
				idleTicks = 0;
				if (idleTime==0 || !isRunning) return;
				if(!idleTimer){
					idleTimer = new Timer(1000,idleTime);
					idleTimer.addEventListener(TimerEvent.TIMER_COMPLETE ,onIdleTimer);
					idleTimer.addEventListener(TimerEvent.TIMER,onIdleTimerTick);
				}
				idleTimer.reset();
				idleTimer.start();
			}
			protected function onIdleTimer(e:Event):void{
				isRunning = false;
				viewCaption ='Простой';
			}
			protected function onIdleTimerTick(e:Event):void{
				idleTicks = idleTimer.currentCount;
			}

			
			protected function onBarCode(event:BarCodeEvent):void{
				var barcode:String=event.barcode;
				log('barcod: '+barcode);
				//check format
				var pattern:RegExp = /^\d{2}$/;
				if (barcode.match(pattern) == null) {
					return;
				}
				
				//flip Running state
				var running:Boolean = isRunning;
				isRunning =true;
				viewCaption ='Работа';
				stratIdleTimer();
				
				if(barcode==lastBarcode) return; //doublescan or more then 1 barreader
				lastBarcode=barcode;
				//finde/check product
				var p:GlueProgramCode = ArrayUtil.searchItem('code',barcode, progCodes) as GlueProgramCode;
				if(!p){
					log('Не найден продукт для: '+barcode);
					return;
				}
				barcodeProduct = p.product;
				
				
				if(barcodeProduct != glueProduct){
					log('Запуск подпрограммы Назначить продукт '+(running?'(работа)':'(простой)')+': '+barcodeProduct);
				}
				var prog:GlueProgram;
				if(running){
					prog=progSetProdukt;
				}else{
					prog=progSetProduktIdle;
				}
				//run set product program
				prog.product = barcodeProduct; 
				glueHandler.program=prog;
				glueHandler.addEventListener(Event.COMPLETE,onglueHandlerComplite);
				glueHandler.start();
			}
			protected function onglueHandlerComplite(event:Event):void{
				log('Проверка продукта на машине');
				glueHandler.removeEventListener(Event.COMPLETE,onglueHandlerComplite);
				//check glue product
				getGlueProduct();
			}
			protected function getGlueProduct():void{
				glueProduct = '-';
				viewCaption='Проверка продукта на машине';
				var latch:AsyncLatch = glueDevice.run_GetProduct(true);
				latch.addEventListener(Event.COMPLETE,ongetGlueProduct);
				latch.start();
			}
			protected function ongetGlueProduct(e:Event):void{
				var latch:AsyncLatch = e.target as AsyncLatch; 
				if(latch){
					latch.removeEventListener(Event.COMPLETE,ongetGlueProduct);
					if(latch.hasError){
						logToScreen('Ошибка запроса продукта склейки: '+latch.error,true);
					}else{
						glueProduct = glueDevice.devProduct;
						lastStatesProduct=glueProduct;
						log('Продукт склейки: '+glueProduct);
					}
				}
				if(barcodeProduct && glueProduct != barcodeProduct){
					logToScreen('Не назначен продукт. Должно быть по ШК: '+barcodeProduct+', продукт склейки: '+glueProduct,true);
				}
				viewCaption=isRunning?'Работа':'Простой';
			}

			protected function onBarError(event:BarCodeEvent):void{
				log('Ошибка сканера ШК: '+event.error);
			}
			protected function onBarDisconnect(event:BarCodeEvent):void{
				log('Отключен сканер ШК '+event.barcode);
				//pause('Отключен сканер ШК '+event.barcode); busy bug
			}
			
			protected function btStateToggle_clickHandler(event:MouseEvent):void{
				if (currentState == "normal"){
					currentState = "operator";
				}else{
					currentState = "normal";
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal"/>
<!--		<s:State name="operator"/>-->
	</s:states>

	<s:VGroup gap="10" width="100%" height="100%" 
			  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">

		<s:HGroup gap="5" width="100%" verticalAlign="baseline">
			<s:Label text="Машина" fontFamily="RobotoLight" fontSize="22"/>
			<s:Label text="{glueDevice.label}" fontFamily="RobotoLight" fontSize="22"/>
		</s:HGroup>

		<s:HGroup gap="5" width="100%" verticalAlign="baseline" >
			<s:Label text="Продукт" fontFamily="RobotoLight" fontSize="20"/>
			<s:Label text="Склейка: {glueProduct}" fontFamily="RobotoLight" fontSize="26"/>
			<s:Label text="Сканер: {barcodeProduct}" fontFamily="RobotoLight" fontSize="26"/>
		</s:HGroup>
		
		<s:HGroup gap="5" width="100%" verticalAlign="baseline">
			<s:Label text="Состояние: " fontFamily="RobotoLight" fontSize="20"/>
			<s:Label text="{viewCaption}" fontFamily="RobotoLight" fontSize="26" />
			<s:Spacer width="5"/>
			<s:Label text="Таймер простоя:" visible="{isRunning}" fontSize="20"/>
			<s:Label text="{idleTicks}({idleTime})" visible="{isRunning}" fontFamily="RobotoLight" fontSize="26" />
		</s:HGroup>

		<s:HGroup gap="5" width="100%" verticalAlign="baseline">
			<s:Label text="Выполнение программы: " fontFamily="RobotoLight" fontSize="20"/>
			<s:Label text="{glueHandler.currStepCaption}" fontFamily="RobotoLight" fontSize="20"/>
		</s:HGroup>
		
		<!--buttons-->
		<!--<s:Group id="buttonGroup" width="100%" height="60" height.operator="100%" enabled="{glueDevice.isStarted}">
			
			<mdcomp:FloatingActionButton id="btStateToggle" radius="25" iconFont="\uf0ad"   left="-10" bottom="-10" 
										 rotation.normal="-45" rotation.operator="45" click="btStateToggle_clickHandler(event)" />
			
			<s:Group id="bttGroup" width="100%"  height="100%" minHeight="60" maxHeight="200" maxWidth="960" verticalCenter="0" horizontalCenter="0" >
				<s:layout>
					<s:TileLayout   horizontalGap="20" horizontalGap.operator="40" 
									paddingLeft="60" paddingLeft.operator="20" paddingRight="20" 
									requestedRowCount="1" requestedColumnCount="2"
									rowAlign="justifyUsingHeight" columnAlign="justifyUsingWidth"
									/>
				</s:layout>
				<mdcomp:ButtonIcon id="btGlueStart"  label="Старт" iconFont="\uf04b" styleName="primary" skinClass="spark.material.skins.ButtonIconVSkin"
								   click="{run();}"/>
				<mdcomp:ButtonIcon id="btGlueStop" label="Стоп" iconFont="\uf04d" styleName="primary"  skinClass="spark.material.skins.ButtonIconVSkin"
								   click="{isRunning = false;}"/>
			</s:Group>
			
		</s:Group>-->
		
		<s:Spacer height="10"/>
		<!--<s:HGroup id="toolsGroup" gap="10" width="100%" height="100%" paddingLeft="15" visible.operator="false" excludeFrom="operator">-->
		<s:HGroup id="toolsGroup" gap="10" width="100%" height="100%" paddingLeft="15" >
			
			<s:VGroup width="60%" height="100%" gap="5" >
				<s:HGroup width="100%" gap="10" verticalAlign="bottom">
					<s:Label text="Лог" fontFamily="RobotoLight"/>
					<!--<s:Button label="Очистить" click="{cleanLog()}"/>-->
					<mdcomp:ButtonIcon iconFont="\uf014"  click="{cleanLog()}"/>
				</s:HGroup>
				<s:TextArea id="logTextArea" width="100%" height="100%" editable="false"/>
			</s:VGroup>

			<s:VGroup width="150" height="100%" gap="3">
				<s:HGroup gap="5" verticalAlign="bottom">
					<s:Label text="Состояние склейки" fontFamily="RobotoLight"/>
					<!--<s:Button id="btRefreshGlue" icon="assets/icon-refresh.gif" click="btRefreshGlue_clickHandler(event)"
							  cornerRadius="4" width="22" height="22" baseline="4"/>-->
					<mdcomp:ButtonIcon id="btRefreshGlue" iconFont="\uf021" click="btRefreshGlue_clickHandler(event)"/>
				</s:HGroup>
				<s:Label text="Продукт:{lastStatesProduct} " fontFamily="RobotoLight"/>
				<s:TabBar id="tbStateView"  dataProvider="{vsStateViews}"/>
				<mx:ViewStack id="vsStateViews" borderStyle="none"  width="100%" height="100%">
					<s:NavigatorContent label="Кнопки" backgroundAlpha="0" width="100%" height="100%">
						<s:Scroller width="100%" height="100%">
							<s:DataGroup   
								dataProvider="{lastButtonsMessage.blocks}"
								itemRenderer="com.photodispatcher.view.tech.glue.proxy.GlueBlockRenderer">
								<s:layout>
									<s:VerticalLayout gap="3"/>
								</s:layout> 
							</s:DataGroup>
						</s:Scroller>
					</s:NavigatorContent>
					<s:NavigatorContent label="Статусы" backgroundAlpha="0" width="100%" height="100%">
						<s:Scroller width="100%" height="100%">
							<s:DataGroup   
								dataProvider="{lastStatesMessage.blocks}"
								itemRenderer="com.photodispatcher.view.tech.glue.proxy.GlueBlockRenderer">
								<s:layout>
									<s:VerticalLayout gap="3"/>
								</s:layout> 
							</s:DataGroup>
						</s:Scroller>
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:VGroup>

		</s:HGroup>

	</s:VGroup>
	
</s:Group>
