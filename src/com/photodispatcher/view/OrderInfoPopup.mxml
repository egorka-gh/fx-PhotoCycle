<?xml version="1.0" encoding="utf-8"?>
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 focusEnabled="true"
		 width="1240" height="700">

	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.OrderBuildEvent;
			import com.photodispatcher.event.OrderBuildProgressEvent;
			import com.photodispatcher.factory.PrintGroupBuilder;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.Order;
			import com.photodispatcher.model.mysql.entities.OrderExtraInfo;
			import com.photodispatcher.model.mysql.entities.OrderExtraMessage;
			import com.photodispatcher.model.mysql.entities.OrderExtraState;
			import com.photodispatcher.model.mysql.entities.OrderExtraStateProlong;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.PrintGroupFile;
			import com.photodispatcher.model.mysql.entities.Source;
			import com.photodispatcher.model.mysql.entities.StaffActivity;
			import com.photodispatcher.model.mysql.entities.StaffActivityGroup;
			import com.photodispatcher.model.mysql.entities.StateLog;
			import com.photodispatcher.model.mysql.entities.SubOrder;
			import com.photodispatcher.model.mysql.entities.TechLog;
			import com.photodispatcher.model.mysql.services.OrderService;
			import com.photodispatcher.model.mysql.services.StaffActivityService;
			import com.photodispatcher.provider.preprocess.ReprintBuilder;
			import com.photodispatcher.util.StrUtil;
			import com.photodispatcher.view.itemRenderer.PGFileReprintItemRenderer;
			import com.photodispatcher.view.menu.MenuCommonActions;
			
			import flash.utils.flash_proxy;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			
			import org.granite.tide.Tide;
			
			import spark.events.PopUpEvent;
			
			[Bindable]
			private var order:Order;
			[Bindable]
			private var pgList:ArrayCollection;
			[Bindable]
			private var soList:ArrayCollection;
			[Bindable]
			private var currEI:OrderExtraInfo;
			[Bindable]
			private var soFilterList:ArrayCollection;
			[Bindable]
			private var logFilterList:ArrayCollection;
			/*
			[Bindable]
			private var fileList:ArrayCollection;
			*/
			[Bindable]
			private var techList:ArrayCollection;
			[Bindable]
			private var techListAgg:ArrayCollection;
			[Bindable]
			private var techListResetAC:ArrayCollection;
			[Bindable]
			private var logList:ArrayCollection;
			

			[Bindable]
			private var reprintPGList:ArrayCollection;
			[Bindable]
			private var reprintFileList:ArrayCollection;

			private function refresh(orderId:String):void{
				order=null;
				if(!orderId){
					return;
				}else{
					var svc:OrderService=Tide.getInstance().getContext().byType(OrderService,true) as OrderService;
					var latch:DbLatch= new DbLatch();
					latch.addEventListener(Event.COMPLETE,onOrderLoad);
					latch.addLatch(svc.loadOrderFull(orderId));
					latch.start();
				}
			}
			private function onOrderLoad(e:Event):void{
				var latch:DbLatch=e.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onOrderLoad);
					if(!latch.complite) return;
					order=latch.lastDataItem as Order;
					var aa:Array;
					if(order){
						pgList=order.printGroups as ArrayCollection;
						if(pgList){
							pgList.filterFunction=filterPgList;
							
							aa=pgList.source.slice();
							var pg:PrintGroup= new PrintGroup(); pg.id=order.id;
							aa.unshift(pg);
							pg= new PrintGroup(); pg.id='-';
							aa.unshift(pg);
							logFilterList= new ArrayCollection(aa);
						}
						
						if(!order.suborders){
							soList= new ArrayCollection();
						}else{
							soList=order.suborders as ArrayCollection;
						}
						aa=soList.source.slice();
						var so:SubOrder= new SubOrder(); so.sub_id='-'; so.prt_qty=0; so.ftp_folder='';
						so.extraInfo=order.extraInfo;
						currEI=order.extraInfo;
						aa.unshift(so);
						soList= new ArrayCollection(aa);
						soFilterList= new ArrayCollection(aa);
						
						techList=order.techLog as ArrayCollection;
						if(techList){
							techList.filterFunction=filterTechList;
							techList.refresh();
						}
						
						techListAgg=order.extraState as ArrayCollection;
						
						techListResetAC=order.extraStateProlong as ArrayCollection;
						if(techListResetAC){
							techListResetAC.filterFunction=filterTechListReset;
							techListResetAC.refresh();
						}
						logList= order.stateLog as ArrayCollection;
						if(logList) logList.filterFunction=filterLogList;
						
					}
				}
				if(order){
					this.open((FlexGlobals.topLevelApplication as DisplayObjectContainer),true);
					this.width=FlexGlobals.topLevelApplication.width-50;
					this.height=FlexGlobals.topLevelApplication.height-100;
					PopUpManager.centerPopUp(this);
					if(techMode){
						currentState='infoTech';
					}else{
						vsSubInfo.selectedChild= ncPrintGroups;
					}
				}else{
					Alert.show('Заказ "'+orderId+'" не найден');
				}
			}

			
			private var techMode:Boolean;
			private var orderId:String;
			public function show(orderId:String, techMode:Boolean=false):void{
				this.techMode=techMode;
				this.orderId=orderId;
				refresh(orderId);
			}
			
			private function filterPgList(item:Object):Boolean {
				var pg:PrintGroup=item as PrintGroup;
				if(!pg) return false;
				if(lstFilterPg && lstFilterPg.selectedIndex>0 && lstFilterPg.selectedItem.ftp_folder!=pg.path) return false;
				return true;
			}
			private function applyPgFilter():void{
				pgList.refresh();
			}

			private function filterTechList(item:Object):Boolean {
				if(!dgTechAgg || dgTechAgg.selectedIndex==-1) return true;
				var f:TechLog=item as TechLog;
				var es:OrderExtraState=dgTechAgg.selectedItem as OrderExtraState;
				if(!f || !es) return false;
				if(f.tech_state==es.state) return true;
				return false;
			}
			private function filterTechListReset(item:Object):Boolean {
				if(!dgTechAgg || dgTechAgg.selectedIndex==-1) return true;
				var f:OrderExtraStateProlong=item as OrderExtraStateProlong;
				var es:OrderExtraState=dgTechAgg.selectedItem as OrderExtraState;
				if(!f || !es) return false;
				return f.state==es.state;
			}
			private function applyTechFilter():void{
			    techList.refresh();
				techListResetAC.refresh();
			}
			
			private function filterLogList(item:Object):Boolean {
				var f:StateLog=item as StateLog;
				if(!f) return false;
				if(lstFilterLog && lstFilterLog.selectedIndex>0 && lstFilterLog.selectedItem.id!=f.pg_id) return false;
				return true;
			}
			
			private function applyLogFilter():void{
				logList.refresh();
			}
			
			protected function button1_clickHandler(event:MouseEvent):void{
				if (!order) return;
				/*
				var svc:OrderService=Tide.getInstance().getContext().byType(OrderService,true) as OrderService;
				var latch:DbLatch= new DbLatch();
				latch.addEventListener(Event.COMPLETE,onOrderClean);
				latch.addLatch(svc.cleanUpOrder(order.id));
				latch.start();
				*/
				var latch:DbLatch=MenuCommonActions.cleanUpOrder(order, OrderState.FTP_WAITE);
				latch.addEventListener(Event.COMPLETE,onOrderClean);
			}
			private function onOrderClean(e:Event):void{
				var latch:DbLatch=e.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onOrderClean);
				}
				close();
			}

			private var _currReprintPg:PrintGroup;
			[Bindable]
			public function get currReprintPg():Object{
				return _currReprintPg;
			}
			public function set currReprintPg(value:Object):void{
				_currReprintPg = (value as PrintGroup);
				if(_currReprintPg){
					/*
					if(_currReprintPg.is_pdf){
						chkPreview.selected=false;
						chkPreview.enabled=false;
					}else{
						chkPreview.enabled=true;
						reprintFileList=_currReprintPg.files as ArrayCollection;
					}
					*/
					chkPreview.enabled=true;
					reprintFileList=_currReprintPg.files as ArrayCollection;
					chkPreview_changeHandler(null);
				}else{
					reprintFileList=null;
				}
			}

			/*
			private function fillPdfReprintItems():void{
				if(!_currReprintPg.is_pdf) return;
				if(!_currReprintPg.bookTemplate)  return;
				
				if(_currReprintPg.bookTemplate.is_sheet_ready){
					//no pages
					reprintFileList=_currReprintPg.files as ArrayCollection;
					return;
				}
			}
			*/
			
			protected function btReprintMode_clickHandler(event:MouseEvent):void{
				var srcArr:Array=pgList.source;
				if(!srcArr) return;

				reprintPGList=new ArrayCollection();
				reprintFileList=new ArrayCollection();
				
				var pgArr:Array=[];
				var pg:PrintGroup;
				var newPg:PrintGroup;
				var newPgf:PrintGroupFile;
				
				var pgf:PrintGroupFile;

				var orderPath:String='';
				var orderWrkPath:String='';
				if(order){
					var src:Source=Context.getSource(order.source);
					if(src){
						orderPath=src.getPrtFolder()+File.separator+order.ftp_folder;
						orderWrkPath=src.getWrkFolder()+File.separator+order.ftp_folder;
					}
				}
				
				var pgPath:String='';
				var builder:PrintGroupBuilder= new PrintGroupBuilder();
				for each (pg in srcArr){
					if(pg && !pg.is_reprint && pg.files && pg.files.length>0){
						newPg=pg.clone();
						newPg.id=pg.id;
						if(newPg.is_pdf){
							//recreate files
							if(!builder.recreateFromFilesystem(order,newPg)) continue;
							pgPath=orderWrkPath+File.separator+newPg.path;
							//extend path
							for each(pgf in newPg.files){
								if(pgf) pgf.fullPath=pgPath+File.separator+pgf.file_name;
							}
						}else{
							pgPath=orderPath+File.separator+newPg.path;
							//clone files
							for each(pgf in pg.files){
								if(pgf){
									newPgf=pgf.clone();
									if(pgPath) newPgf.fullPath=pgPath+File.separator+pgf.file_name;
									newPg.addFile(newPgf);
								}
							}
						}
						pgArr.push(newPg);
					}
				}
				reprintPGList.source=pgArr;
				currentState='reprint';
				if(reprintPGList.length>0){
					currReprintPg=reprintPGList.getItemAt(0);
				}else{
					currReprintPg=null;
				}
			}
			
			protected function chkPreview_changeHandler(event:Event):void{
				var pgf:PrintGroupFile;
				var a:Array=[];
				for each (pgf in reprintFileList){
					if(pgf){
						pgf.showPreview= chkPreview.selected && pgf.fullPath;
						a.push(pgf);
					}
				}
				reprintFileList=new ArrayCollection(a);
			}
			
			protected function btReprint_clickHandler(event:MouseEvent):void{
				//get soft lock
				progressCaption='Захват на обработку '+order.id;
				var latch:DbLatch=OrderService.getPreprocessLock(order.id);
				latch.addEventListener(Event.COMPLETE,ongetLock);
				latch.start();
			}
			private function ongetLock(evt:Event):void{
				var latch:DbLatch= evt.target as DbLatch;
				latch.removeEventListener(Event.COMPLETE,ongetLock);
				if(latch.resultCode>0){
					runActivityPopup();
				}else{
					Alert.show('Заказ '+order.id+' обрабатывается на другой станции');
				}
			}
			
			private var pop:StaffActivityPopup;
			private function runActivityPopup():void{
				//ask 4 activity
				pop= new StaffActivityPopup();
				pop.addEventListener(PopUpEvent.CLOSE, onActivityPop);
				pop.show(StaffActivityGroup.REPRINT,'Укажите причину перепечатки');
			}
			protected function onActivityPop(evt:PopUpEvent):void{
				if(evt.commit){
					var activity:StaffActivity=evt.data as StaffActivity;
					createReprint(activity);
				}else{
					OrderService.releasePreprocessLock(order.id);
				}
			}
			
			protected function createReprint(activity:StaffActivity=null):void{
				currentState='reprintBuild';
				//clone order
				var o:Order= new Order();
				o.id=order.id;
				o.source=order.source;
				o.ftp_folder=order.ftp_folder;
				o.printGroups=reprintPGList;
				//start bulder
				var builder:ReprintBuilder=new ReprintBuilder();
				builder.reprintActivity=activity;
				builder.startingPgIdx=order.printGroups.length;
				//listen
				builder.addEventListener(OrderBuildEvent.BUILDER_ERROR_EVENT,onBuilderError);
				builder.addEventListener(OrderBuildEvent.ORDER_PREPROCESSED_EVENT, onOrderPreprocessed);
				builder.addEventListener(ProgressEvent.PROGRESS, onPreprocessProgress);
				//start
				builder.build(o);
			}

			[Bindable]
			private var progressCaption:String;
			private function onPreprocessProgress(e:OrderBuildProgressEvent):void{
				progressCaption=e.caption;
				pbReprint.setProgress(e.bytesLoaded,e.bytesTotal);
			}
			
			private function onBuilderError(evt:OrderBuildEvent):void{
				OrderService.releasePreprocessLock(order.id);
				Alert.show(evt.err_msg);
			}
			private function onOrderPreprocessed(evt:OrderBuildEvent):void{
				OrderService.releasePreprocessLock(order.id);
				if(evt.err<0){
					//completed vs error
					Alert.show(evt.err_msg);
				}else{
					close();
				}
			}

			protected function btReprintAll_clickHandler(event:MouseEvent):void{
				if(!reprintFileList) return;
				var pgf:PrintGroupFile;
				for each (pgf in reprintFileList){
					if(pgf){
						pgf.reprint=true;
					}
				}
			}
			
			protected function btCancelReprint_clickHandler(event:MouseEvent):void{
				if(!reprintFileList) return;
				var pgf:PrintGroupFile;
				for each (pgf in reprintFileList){
					if(pgf){
						pgf.reprint=false;
					}
				}
			}
			
			private function messagesLogLabelFunc(item:Object):String{
				var res:String='';
				var msg:OrderExtraMessage=item as OrderExtraMessage;
				if(msg){
					res=msg.lod_key+': '+ msg.log_user+': '+msg.message;
				}
				return res;
			}
			
			protected function btRebuild_clickHandler(event:MouseEvent):void{
				if (!order) return;
				if (order.state<OrderState.PRN_WAITE_ORDER_STATE) return;
				var latch:DbLatch=MenuCommonActions.cleanUpOrder(order, OrderState.PREPROCESS_WAITE);
				latch.addEventListener(Event.COMPLETE,onOrderClean);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dtFormater" dateTimePattern="dd.MM.yyyy HH:mm"/>
	</fx:Declarations>

	<s:states>
		<s:State name="infoFull" stateGroups="info"/>
		<s:State name="infoTech" stateGroups="info"/>
		<s:State name="reprint"/>
		<s:State name="reprintBuild"/>
	</s:states>

	<s:Rect radiusX="6" top="0" left="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="#444444" weight="1"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#ffffff"/>
		</s:fill>
	</s:Rect>

	<s:VGroup gap="5" top="10" left="10" right="10" bottom="10" horizontalAlign="right">
		<s:HGroup gap="10" width="100%" height="100%">
			<s:Group width="300" height="100%">
				<s:Rect top="0" left="0" right="0" bottom="0"
						radiusX="4">
					<s:fill>
						<s:SolidColor color="#cccccc"/>
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke color="0" weight="1"/>
					</s:stroke>
				</s:Rect>
				<!--<s:Scroller top="0" left="0" right="0" bottom="20" >-->
					<s:Form id="frmOrder" backgroundAlpha="0" top="0" left="0" right="0" bottom="20">
						<s:layout>
							<s:FormLayout gap="-12"/>
						</s:layout>
						
						<s:FormItem label="ID">
							<s:TextInput id="tiID" text="{order.id}" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Группа заказа">
							<s:TextInput text="{order.groupId}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Id источника">
							<s:TextInput id="tiSourceId" text="{order.source_code?order.source_code:''}{order.src_id}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Источник">
							<s:TextInput id="tiSource" text="{order.source_name}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Дата источника">
							<s:TextInput id="tiSourceDate" text="{dtFormater.format(order.src_date)}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Статус">
							<s:TextInput id="tiState" text="{order.state_name}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Дата статуса">
							<s:TextInput id="tiStateDate" text="{dtFormater.format(order.state_date)}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="FTP папка">
							<s:TextInput id="tiFtpFolder" text="{order.ftp_folder}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Кол фото">
							<s:TextInput id="tiFotosNum" text="{order.fotos_num.toString()}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Тип">
							<s:TextInput text="{order.extraInfo.calc_type}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Программа">
							<s:TextInput text="{order.extraInfo.calcTitle}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Кол книг">
							<s:TextInput  text="{order.extraInfo.books}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Кол разворотов">
							<s:TextInput  text="{order.extraInfo.sheets}({order.extraInfo.books*order.extraInfo.sheets})" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Обложка">
							<s:TextInput text="{order.extraInfo.cover}" editable="false" width="150"/>
						</s:FormItem> 
						<s:FormItem label="Формат">
							<s:TextInput text="{order.extraInfo.format}" editable="false" width="150"/>
						</s:FormItem> 
					</s:Form>
				<!--</s:Scroller>-->
				<s:HGroup gap="10" verticalAlign="baseline" horizontalAlign="right" width="100%" bottom="0" paddingBottom="10" paddingRight="10" includeIn="infoFull">
					<s:Button id="btRebuild" label="Переподготовить" click="btRebuild_clickHandler(event)" 
							  enabled="{order.state>OrderState.PREPROCESS_COMPLETE}"/>
					<s:Button label="Перезагрузить" click="button1_clickHandler(event)"/>
				</s:HGroup>
			</s:Group>
			
			<s:VGroup id="gDet" gap="0" width="100%" height="100%" includeIn="info">
				<s:TabBar id="tbView" width="100%" dataProvider="{vsSubInfo}"/>
				<s:Group width="100%" height="100%">
					<s:Rect top="0" left="0" right="0" bottom="0"
							topLeftRadiusX="0" topRightRadiusX="0" bottomLeftRadiusX="4" bottomRightRadiusX="4">
						<s:fill>
							<s:SolidColor color="#cccccc"/>
						</s:fill>
						<s:stroke>
							<s:SolidColorStroke color="0" weight="1"/>
						</s:stroke>
					</s:Rect>
					<mx:ViewStack id="vsSubInfo" borderStyle="none" backgroundAlpha="0" width="100%" height="100%">
						<s:NavigatorContent label="Информация" backgroundAlpha="0" width="100%" height="100%" includeIn="infoFull">
							<s:HGroup gap="10"  top="10" left="10" right="10" bottom="10">
								<s:VGroup width="450" height="100%" gap="5">
									<s:Label text="Подзаказы"/>
									<s:DataGrid id="dgSuborders" selectionMode="singleRow" width="100%" height="100%" editable="true"
												selectionChange="{currEI=dgSuborders.selectedItem.extraInfo as OrderExtraInfo}" 
												dataProvider="{soList}" locale="ru_RU" columns="{SubOrder.gridColumns()}"/>
								</s:VGroup>
								<s:Scroller width="100%" height="100%">
									<s:Group>
										<s:Form backgroundAlpha="0">
											<s:layout>
												<s:FormLayout gap="-12"/>
											</s:layout>
											
											<s:FormItem label="Группа заказа">
												<s:TextInput text="{order.groupId}" editable="false" width="150"/>
											</s:FormItem> 
											<s:FormItem label="Дата принятия">
												<s:TextInput text="{dtFormater.format(currEI.dateIn)}" editable="false" width="150"/>
											</s:FormItem> 
											<s:FormItem label="Дата изготовления">
												<s:TextInput text="{dtFormater.format(currEI.dateOut)}" editable="false" width="150"/>
											</s:FormItem> 
											<s:FormItem label="Программа">
												<s:TextInput text="{currEI.calcTitle}" editable="false" width="500"/>
											</s:FormItem> 
											<s:FormItem label="Кол книг">
												<s:TextInput  text="{currEI.books}" editable="false" width="150"/>
											</s:FormItem> 
											<s:FormItem label="Кол разворотов">
												<s:TextInput  text="{currEI.sheets}({currEI.books*currEI.sheets})" editable="false" width="150"/>
											</s:FormItem> 
											<s:FormItem label="Формат">
												<s:TextInput text="{currEI.format}" editable="false" width="500"/>
											</s:FormItem> 
											<s:FormItem label="Обложка">
												<s:TextInput text="{currEI.cover}" editable="false" width="500"/>
											</s:FormItem> 
											<s:FormItem label="Материал обложки">
												<s:TextInput text="{currEI.coverMaterial}" editable="false" width="500"/>
											</s:FormItem> 
											<s:FormItem label="Форзац">
												<s:TextInput text="{currEI.endpaper}" editable="false" width="500"/>
											</s:FormItem> 
											<s:FormItem label="Прослойка">
												<s:TextInput text="{currEI.interlayer}" editable="false" width="500"/>
											</s:FormItem> 
											<s:FormItem label="Углы">
												<s:TextInput text="{currEI.corner_type}" editable="false" width="500"/>
											</s:FormItem> 
											<s:FormItem label="Каптал">
												<s:TextInput text="{currEI.kaptal}" editable="false" width="500"/>
											</s:FormItem> 
											<s:FormItem label="Толщина">
												<s:TextInput text="{Math.round(currEI.bookThickness*100)/100}" editable="false" width="150"/>
											</s:FormItem> 
											<s:FormItem label="Вес(г)">
												<s:TextInput text="{currEI.weight.toString()}" editable="false" width="150"/>
											</s:FormItem> 
											<s:FormItem label="Примечания">
												<s:TextInput text="{currEI.remark}" editable="false" width="500"/>
												<s:List dataProvider="{currEI.messagesLog}" width="500" labelFunction="messagesLogLabelFunc">
													<s:layout>
														<s:VerticalLayout gap="0" requestedRowCount="4"/>
													</s:layout>
												</s:List>
											</s:FormItem> 
										</s:Form>
									</s:Group>
								</s:Scroller>
							</s:HGroup>
						</s:NavigatorContent>
						<s:NavigatorContent id="ncPrintGroups" label="Группы печати" backgroundAlpha="0" width="100%" height="100%"  includeIn="infoFull">
							<s:HGroup gap="10"  top="10" left="10" right="10" bottom="10">
								<s:List id="lstFilterPg" dataProvider="{soFilterList}" labelField="sub_id"
										width="100" height="100%" change="{applyPgFilter()}"/>
								<s:DataGrid id="dgPGroups" selectionMode="singleRow" width="100%" height="100%" editable="true"
											dataProvider="{pgList}" locale="ru_RU" columns="{PrintGroup.shortGridColumns()}"/>
							</s:HGroup>
						</s:NavigatorContent>
						<s:NavigatorContent label="Файлы" width="100%" height="100%"  includeIn="infoFull">
							<s:HGroup gap="10"  top="10" left="10" right="10" bottom="10">
								<s:List id="lstFilterFiles" dataProvider="{pgList}" labelField="id"
										width="100" height="100%"/>
								<s:DataGrid id="dgFiles" selectionMode="singleRow" width="100%" height="100%" editable="true"
											dataProvider="{lstFilterFiles.selectedItem.files}" locale="ru_RU" columns="{PrintGroupFile.gridColumns()}"/>
							</s:HGroup>
						</s:NavigatorContent>
						<s:NavigatorContent label="Тех. точки" width="100%" height="100%">
							<!--<s:Scroller top="10" left="10" right="10" bottom="10">-->
								<s:HGroup gap="10" top="10" left="10" right="10" bottom="10">
									<!--<s:DataGrid id="dgTechAgg" selectionMode="singleRow" height="100%" selectionChange="{applyTechFilter()}"
												dataProvider="{techListAgg}" locale="ru_RU" columns="{TechLog.gridColumnsTechAgg()}"/>-->
									<s:VGroup gap="0" width="500" height="100%">
										<s:DataGrid id="dgTechAgg" selectionMode="singleRow" height="60%" width="100%"
													selectionChange="{applyTechFilter()}"
													dataProvider="{techListAgg}" locale="ru_RU" columns="{OrderExtraState.gridColumnsTech()}"/>
										<s:Spacer height="10"/>
										<s:Label text="Сбросы"/>
										<s:DataGrid id="dgTechReset" selectionMode="singleRow" height="40%" width="100%"
													dataProvider="{techListResetAC}" locale="ru_RU" columns="{OrderExtraStateProlong.gridColumnsTech()}"/>
									</s:VGroup>
									<s:DataGrid id="dgTech" selectionMode="none" height="100%" width="100%"
												dataProvider="{techList}" locale="ru_RU" columns="{TechLog.gridColumnsTech()}"/>
								</s:HGroup>
							<!--</s:Scroller>-->
						</s:NavigatorContent>
						<s:NavigatorContent label="История" width="100%" height="100%">
							<s:HGroup gap="10"  top="10" left="10" right="10" bottom="10">
								<s:List id="lstFilterLog" dataProvider="{logFilterList}" labelField="id"
										width="100" height="100%" change="{applyLogFilter()}"/>
								<s:DataGrid id="dgLog" selectionMode="singleRow" width="100%" height="100%" editable="true"
											dataProvider="{logList}" locale="ru_RU" columns="{StateLog.gridColumns()}"/>
							</s:HGroup>
						</s:NavigatorContent>
					</mx:ViewStack>
				</s:Group>
			</s:VGroup>
			<s:Group width="100%" height="100%" includeIn="reprint,reprintBuild">
				<s:Rect top="0" left="0" right="0" bottom="0"
						topLeftRadiusX="0" topRightRadiusX="0" bottomLeftRadiusX="4" bottomRightRadiusX="4">
					<s:fill>
						<s:SolidColor color="#cccccc"/>
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke color="0" weight="1"/>
					</s:stroke>
				</s:Rect>
				<s:HGroup gap="10"  top="10" left="10" right="10" bottom="10">
					<s:VGroup gap="5" height="100%" width="100%">
						<s:Label text="Группы печати"/>
						<s:DataGrid id="dgReprintPGroups" selectionMode="singleRow" height="100%" width="100%" 
									selectedItem="@{currReprintPg}"
									dataProvider="{reprintPGList}" locale="ru_RU" columns="{PrintGroup.reprintGridColumns()}"/>
					</s:VGroup>
					<s:VGroup gap="5" height="100%">
						<s:HGroup gap="5" verticalAlign="middle" width="100%">
							<s:Label text="Файлы"/>
							
							<s:Spacer width="100%"/>
							<s:Label text="Предосмотр"/>
							<s:CheckBox id="chkPreview" change="chkPreview_changeHandler(event)"/>
						</s:HGroup>
						<s:Scroller width="310" height="100%">
							<s:DataGroup itemRenderer="com.photodispatcher.view.itemRenderer.PGFileReprintItemRenderer" 
										 dataProvider="{reprintFileList}">
								<s:layout>
									<s:VerticalLayout gap="3"/>
								</s:layout>
							</s:DataGroup>
						</s:Scroller>
						<s:HGroup gap="10" horizontalAlign="right" width="100%" includeIn="reprint">
							<s:Button id="btReprintAll" label="Выбрать все" click="btReprintAll_clickHandler(event)"/>
							<s:Button id="btCancelReprint" label="Отменить все" click="btCancelReprint_clickHandler(event)"/>
						</s:HGroup>
						<mx:ProgressBar id="pbReprint" mode="manual" width="100%" includeIn="reprintBuild"
										labelPlacement="top" fontWeight="normal"
										label="{progressCaption} %1 из %2"/>

					</s:VGroup>
				</s:HGroup>
			</s:Group>
		</s:HGroup>
		<s:HGroup gap="10">
			<s:Button id="btReprint" includeIn="reprint" label="Создать группы печати"
					  click="btReprint_clickHandler(event)"/>
			<s:Button id="btReprintMode" includeIn="infoFull" label="Перепечатать" 
					  enabled="{order.state>=OrderState.PRN_WAITE}" click="btReprintMode_clickHandler(event)"/>
			<s:Button id="btLookup" label="Закрыть" click="{close()}"/>
		</s:HGroup>
	</s:VGroup>
</s:SkinnablePopUpContainer>
