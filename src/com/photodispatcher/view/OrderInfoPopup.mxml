<?xml version="1.0" encoding="utf-8"?>
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 focusEnabled="true"
		 width="1240" height="700">

	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.AsyncSQLEvent;
			import com.photodispatcher.model.Order;
			import com.photodispatcher.model.OrderState;
			import com.photodispatcher.model.PrintGroup;
			import com.photodispatcher.model.PrintGroupFile;
			import com.photodispatcher.model.Source;
			import com.photodispatcher.model.StateLog;
			import com.photodispatcher.model.Suborder;
			import com.photodispatcher.model.TechLog;
			import com.photodispatcher.model.dao.OrderDAO;
			import com.photodispatcher.model.dao.PrintGroupDAO;
			import com.photodispatcher.model.dao.PrintGroupFileDAO;
			import com.photodispatcher.model.dao.StateLogDAO;
			import com.photodispatcher.model.dao.SuborderDAO;
			import com.photodispatcher.model.dao.TechLogDAO;
			import com.photodispatcher.util.StrUtil;
			import com.photodispatcher.view.itemRenderer.PGFileReprintItemRenderer;
			
			import flash.utils.flash_proxy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			
			[Bindable]
			private var order:Order;
			[Bindable]
			private var pgList:ArrayCollection= new ArrayCollection();
			[Bindable]
			private var pgFilterList:ArrayCollection= new ArrayCollection();;
			[Bindable]
			private var soList:ArrayCollection= new ArrayCollection();
			[Bindable]
			private var soFilterList:ArrayCollection= new ArrayCollection();;

			[Bindable]
			private var logFilterList:ArrayCollection= new ArrayCollection();;
			[Bindable]
			private var fileList:ArrayCollection= new ArrayCollection();
			[Bindable]
			private var techList:ArrayCollection= new ArrayCollection();
			[Bindable]
			private var logList:ArrayCollection= new ArrayCollection();

			[Bindable]
			private var reprintPGList:ArrayCollection;
			[Bindable]
			private var reprintFileList:ArrayCollection;

			private function refresh(orderId:String):void{
				if(!orderId){
					order=null;
				}else{
					var dao:OrderDAO= new OrderDAO();
					order=dao.getItem(orderId,true);
				}
				
				if(order){
					var pDao:PrintGroupDAO=new PrintGroupDAO();
					var a:Array=pDao.getByOrder(order.id);
					pgList.source=a;
					pgList.filterFunction=filterPgList;
					
					var pg:PrintGroup= new PrintGroup(); pg.id='-';
					var aa:Array=a.slice();
					aa.unshift(pg);
					pgFilterList.source=aa;
					
					aa=a.slice();
					pg= new PrintGroup(); pg.id=order.id;
					aa.unshift(pg);
					pg= new PrintGroup(); pg.id='-';
					aa.unshift(pg);
					logFilterList.source=aa;
					
					var soDAO:SuborderDAO= new SuborderDAO();
					a=soDAO.getByOrder(order.id, true);
					soList.source=a;
					aa=a.slice();
					var so:Suborder= new Suborder(); so.ftp_folder=so.src_id='-';
					aa.unshift(so);
					soFilterList.source=aa;
					
					var pfDao:PrintGroupFileDAO=new PrintGroupFileDAO();
					a=pfDao.getByOrder(order.id);
					fileList.source=a;
					fileList.filterFunction=filterFileList;
					
					var tDao:TechLogDAO= new TechLogDAO();
					a=tDao.getTechByOrder(order.id);
					techList.source=a;
					techList.filterFunction=filterTechList;
					
					var lDao:StateLogDAO=new StateLogDAO();
					a=lDao.getByOrder(order.id);
					logList.source=a;
					logList.filterFunction=filterLogList;
				}
			}
			
			public function show(orderId:String):void{
				refresh(orderId);
				if(order){
					this.open((FlexGlobals.topLevelApplication as DisplayObjectContainer),true);
					this.width=FlexGlobals.topLevelApplication.width-50;
					this.height=FlexGlobals.topLevelApplication.height-100;
					PopUpManager.centerPopUp(this);
				}else{
					Alert.show('Заказ "'+orderId+'" не найден');
				}
				
			}
			
			private function filterPgList(item:Object):Boolean {
				var pg:PrintGroup=item as PrintGroup;
				if(!pg) return false;
				if(lstFilterPg && lstFilterPg.selectedIndex>0 && lstFilterPg.selectedItem.ftp_folder!=pg.path) return false;
				return true;
			}
			private function applyPgFilter():void{
				pgList.refresh();
			}

			private function filterFileList(item:Object):Boolean {
				var f:PrintGroupFile=item as PrintGroupFile;
				if(!f) return false;
				if(lstFilterFiles && lstFilterFiles.selectedIndex>0 && lstFilterFiles.selectedItem.id!=f.print_group) return false;
				return true;
			}
			private function applyFileFilter():void{
				fileList.refresh();
			}
			private function filterTechList(item:Object):Boolean {
				var f:TechLog=item as TechLog;
				if(!f) return false;
				if(lstFilterTech && lstFilterTech.selectedIndex>0 && lstFilterTech.selectedItem.id!=f.print_group) return false;
				return true;
			}
			private function applyTechFilter():void{
			    techList.refresh();
			}
			
			private function filterLogList(item:Object):Boolean {
				var f:StateLog=item as StateLog;
				if(!f) return false;
				if(lstFilterLog && lstFilterLog.selectedIndex>0 && lstFilterLog.selectedItem.id!=f.pg_id) return false;
				return true;
			}
			private function applyLogFilter():void{
				logList.refresh();
			}
			
			protected function button1_clickHandler(event:MouseEvent):void{
				if (!order) return;
				var dao:OrderDAO= new OrderDAO();
				dao.cleanUp(order);
				close();
			}
			
			private var _currReprintPg:PrintGroup;
			[Bindable]
			public function get currReprintPg():Object{
				return _currReprintPg;
			}
			public function set currReprintPg(value:Object):void{
				_currReprintPg = (value as PrintGroup);
				if(_currReprintPg){
					if(_currReprintPg.is_pdf){
						chkPreview.selected=false;
						chkPreview.enabled=false;
					}else{
						chkPreview.enabled=true;
					}
					reprintFileList.source=value.getFiles();
					chkPreview_changeHandler(null);
				}else{
					reprintFileList.source=[];
				}
			}

			
			protected function btReprintMode_clickHandler(event:MouseEvent):void{
				var srcArr:Array=pgList.source;
				var srcPgfArr:Array=fileList.source;
				if(!srcArr || !srcPgfArr) return;

				reprintPGList=new ArrayCollection();
				reprintFileList=new ArrayCollection();
				
				var pgArr:Array=[];
				var pg:PrintGroup;
				var newPg:PrintGroup;
				var newPgf:PrintGroupFile;
				
				var pgf:PrintGroupFile;

				var orderPath:String='';
				if(order){
					var src:Source=Context.getSource(order.source);
					if(src){
						orderPath=src.getPrtFolder()+File.separator+order.ftp_folder;
						//orderPath=Context.getAttribute('workFolder')+File.separator+StrUtil.toFileName(src.name)+File.separator+order.ftp_folder;
						//pgPath=Context.getAttribute('workFolder')+File.separator+StrUtil.toFileName(src.name)+File.separator+order.ftp_folder+File.separator+_currReprintPg.path;
					}
				}
				
				var pgPath:String='';
				for each (pg in srcArr){
					if(pg && !pg.is_reprint){
						newPg=pg.clone();
						newPg.id=pg.id;
						pgArr.push(newPg);
						if(orderPath) pgPath=orderPath+File.separator+newPg.path
						for each(pgf in srcPgfArr){
							if(pgf && pgf.print_group==pg.id){
								newPgf=pgf.clone();
								if(pgPath) newPgf.fullPath=pgPath+File.separator+pgf.file_name;
								newPg.addFile(newPgf);
							}
						}
					}
				}
				reprintPGList.source=pgArr;
				currentState='reprint';
				if(reprintPGList.length>0){
					currReprintPg=reprintPGList.getItemAt(0);
				}else{
					currReprintPg=null;
				}
			}
			
			protected function chkPreview_changeHandler(event:Event):void{
				var pgf:PrintGroupFile;
				for each (pgf in reprintFileList){
					if(pgf){
						pgf.showPreview= chkPreview.selected && pgf.fullPath;
					}
				}
			}
			
			protected function btReprint_clickHandler(event:MouseEvent):void{
				var pg:PrintGroup;
				var pgf:PrintGroupFile;
				var arrPG:Array=[];
				var arrFiles:Array;
				//get reprint pg
				for each (pg in reprintPGList){
					if(pg){
						for each (pgf in pg.getFiles()){
							if(pgf && pgf.reprint){
								arrPG.push(pg);
								break;
							}
						}
					}
				}
				//get reprint files
				var pgIdx:int=pgList.length;
				var prints:int;
				for each (pg in arrPG){
					if(pg){
						//set pg props
						pgIdx++;
						prints=0;
						pg.order_id=order.id;
						pg.id=order.id+'_'+pgIdx.toString();
						pg.state=OrderState.PRN_WAITE;
						pg.is_reprint=true;
						//get files
						arrFiles=pg.getFiles();
						pg.resetFiles();
						for each (pgf in arrFiles){
							if(pgf && pgf.reprint){
								pgf.print_group=pg.id;
								pg.addFile(pgf);
								prints+=pgf.prt_qty>0?pgf.prt_qty:1;
							}
						}
						pg.file_num=pg.getFiles().length;
						pg.prints=prints;
					}
				}
				var dao:PrintGroupDAO= new PrintGroupDAO();
				dao.addEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onWriteReprint);
				trace('PrintManager write PrintGroup to db '+ pg.id);
				dao.createReprintGroups(arrPG);
				btReprint.enabled=false;
				btLookup.enabled=false;
			}
			private function onWriteReprint(e:AsyncSQLEvent):void{
				var oDAO:PrintGroupDAO=e.target as PrintGroupDAO;
				if(oDAO) oDAO.removeEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onWriteReprint);
				if(e.result==AsyncSQLEvent.RESULT_COMLETED){
					trace('Reprint groups created');
					close();
				}else{
					Alert.show('Ошибка: '+e.error+'/n Группы печати не созданы.');
					btReprint.enabled=true;
					btLookup.enabled=true;
				}
			}
			
			protected function btReprintAll_clickHandler(event:MouseEvent):void{
				if(!reprintFileList) return;
				var pgf:PrintGroupFile;
				for each (pgf in reprintFileList){
					if(pgf){
						pgf.reprint=true;
					}
				}
			}
			
			protected function btCancelReprint_clickHandler(event:MouseEvent):void{
				if(!reprintFileList) return;
				var pgf:PrintGroupFile;
				for each (pgf in reprintFileList){
					if(pgf){
						pgf.reprint=false;
					}
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dtFormater" dateTimePattern="dd.MM.yyyy HH:mm"/>
	</fx:Declarations>

	<s:states>
		<s:State name="info"/>
		<s:State name="reprint"/>
	</s:states>

	<s:Rect radiusX="6" top="0" left="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="#444444" weight="1"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#ffffff"/>
		</s:fill>
	</s:Rect>

	<s:VGroup gap="5" top="10" left="10" right="10" bottom="10" horizontalAlign="right">
		<s:HGroup gap="10" width="100%" height="100%">
			<s:Group width="300" height="100%">
				<s:Rect top="0" left="0" right="0" bottom="0"
						radiusX="4">
					<s:fill>
						<s:SolidColor color="#cccccc"/>
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke color="0" weight="1"/>
					</s:stroke>
				</s:Rect>
				<s:Form id="frmOrder" width="100%" height="100%" backgroundAlpha="0">
					<s:layout>
						<s:FormLayout gap="-12"/>
					</s:layout>
					
					<s:FormItem label="ID">
						<s:TextInput id="tiID" text="{order.id}" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Источник">
						<s:TextInput id="tiSource" text="{order.source_name}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Дата источника">
						<s:TextInput id="tiSourceDate" text="{dtFormater.format(order.src_date)}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Id источника">
						<s:TextInput id="tiSourceId" text="{order.src_id}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Статус">
						<s:TextInput id="tiState" text="{order.state_name}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Дата статуса">
						<s:TextInput id="tiStateDate" text="{dtFormater.format(order.state_date)}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="FTP папка">
						<s:TextInput id="tiFtpFolder" text="{order.ftp_folder}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Кол фото">
						<s:TextInput id="tiFotosNum" text="{order.fotos_num.toString()}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Тип">
						<s:TextInput text="{order.calc_type}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Обложка">
						<s:TextInput text="{order.cover}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Формат">
						<s:TextInput text="{order.format}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Форзац">
						<s:TextInput text="{order.endpaper}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Прослойка">
						<s:TextInput text="{order.interlayer}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Углы">
						<s:TextInput text="{order.corner_type}" editable="false" width="150"/>
					</s:FormItem> 
					<s:FormItem label="Каптал">
						<s:TextInput text="{order.kaptal}" editable="false" width="150"/>
					</s:FormItem> 
				</s:Form>
				<s:Button label="Сброс" bottom="10" right="10" click="button1_clickHandler(event)"/>
			</s:Group>
			
			<s:VGroup id="gDet" gap="0" width="100%" height="100%" includeIn="info">
				<s:TabBar id="tbView" width="100%" dataProvider="{vsSubInfo}"/>
				<s:Group width="100%" height="100%">
					<s:Rect top="0" left="0" right="0" bottom="0"
							topLeftRadiusX="0" topRightRadiusX="0" bottomLeftRadiusX="4" bottomRightRadiusX="4">
						<s:fill>
							<s:SolidColor color="#cccccc"/>
						</s:fill>
						<s:stroke>
							<s:SolidColorStroke color="0" weight="1"/>
						</s:stroke>
					</s:Rect>
					<mx:ViewStack id="vsSubInfo" borderStyle="none" backgroundAlpha="0" width="100%" height="100%">
						<s:NavigatorContent label="Подзаказы" backgroundAlpha="0" width="100%" height="100%">
							<s:DataGrid id="dgSuborders" selectionMode="none" top="10" left="10" right="10" bottom="10"
										dataProvider="{soList}" locale="ru_RU" columns="{Suborder.gridColumns()}"/>
						</s:NavigatorContent>
						<s:NavigatorContent label="Группы печати" backgroundAlpha="0" width="100%" height="100%">
							<s:HGroup gap="10"  top="10" left="10" right="10" bottom="10">
								<s:List id="lstFilterPg" dataProvider="{soFilterList}" labelField="src_id"
										width="100" height="100%" change="{applyPgFilter()}"/>
								<s:DataGrid id="dgPGroups" selectionMode="none" width="100%" height="100%"
											dataProvider="{pgList}" locale="ru_RU" columns="{PrintGroupDAO.shortGridColumns()}"/>
							</s:HGroup>
						</s:NavigatorContent>
						<s:NavigatorContent label="Файлы" width="100%" height="100%">
							<s:HGroup gap="10"  top="10" left="10" right="10" bottom="10">
								<s:List id="lstFilterFiles" dataProvider="{pgFilterList}" labelField="id"
										width="100" height="100%" change="{applyFileFilter()}"/>
								<s:DataGrid id="dgFiles" selectionMode="none" width="100%" height="100%"
											dataProvider="{fileList}" locale="ru_RU" columns="{PrintGroupFileDAO.gridColumns()}"/>
							</s:HGroup>
						</s:NavigatorContent>
						<s:NavigatorContent label="История" width="100%" height="100%">
							<s:HGroup gap="10"  top="10" left="10" right="10" bottom="10">
								<s:List id="lstFilterLog" dataProvider="{logFilterList}" labelField="id"
										width="100" height="100%" change="{applyLogFilter()}"/>
								<s:DataGrid id="dgLog" selectionMode="none" width="100%" height="100%"
											dataProvider="{logList}" locale="ru_RU" columns="{StateLogDAO.gridColumns()}"/>
							</s:HGroup>
						</s:NavigatorContent>
						<s:NavigatorContent label="Тех. точки" width="100%" height="100%">
							<s:HGroup gap="10"  top="10" left="10" right="10" bottom="10">
								<s:List id="lstFilterTech" dataProvider="{pgFilterList}" labelField="id"
										width="100" height="100%" change="{applyTechFilter()}"/>
								<s:DataGrid id="dgTech" selectionMode="none" width="100%" height="100%"
											dataProvider="{techList}" locale="ru_RU" columns="{TechLog.gridColumnsTech()}"/>
							</s:HGroup>
						</s:NavigatorContent>
					</mx:ViewStack>
				</s:Group>
			</s:VGroup>
			<s:Group width="100%" height="100%" includeIn="reprint">
				<s:Rect top="0" left="0" right="0" bottom="0"
						topLeftRadiusX="0" topRightRadiusX="0" bottomLeftRadiusX="4" bottomRightRadiusX="4">
					<s:fill>
						<s:SolidColor color="#cccccc"/>
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke color="0" weight="1"/>
					</s:stroke>
				</s:Rect>
				<s:HGroup gap="10"  top="10" left="10" right="10" bottom="10">
					<s:VGroup gap="5" height="100%" width="100%">
						<s:Label text="Группы печати"/>
						<s:DataGrid id="dgReprintPGroups" selectionMode="singleRow" height="100%" width="100%" 
									selectedItem="@{currReprintPg}"
									dataProvider="{reprintPGList}" locale="ru_RU" columns="{PrintGroupDAO.reprintGridColumns()}"/>
					</s:VGroup>
					<s:VGroup gap="5" height="100%">
						<s:HGroup gap="5" verticalAlign="middle" width="100%">
							<s:Label text="Файлы"/>
							
							<s:Spacer width="100%"/>
							<s:Label text="Предосмотр"/>
							<s:CheckBox id="chkPreview" change="chkPreview_changeHandler(event)"/>
						</s:HGroup>
						<s:Scroller width="310" height="100%">
							<s:DataGroup itemRenderer="com.photodispatcher.view.itemRenderer.PGFileReprintItemRenderer" 
										 dataProvider="{reprintFileList}">
								<s:layout>
									<s:VerticalLayout gap="3"/>
								</s:layout>
							</s:DataGroup>
						</s:Scroller>
						<s:HGroup gap="10" horizontalAlign="right" width="100%">
							<s:Button id="btReprintAll" label="Выбрать все" click="btReprintAll_clickHandler(event)"/>
							<s:Button id="btCancelReprint" label="Отменить все" click="btCancelReprint_clickHandler(event)"/>
						</s:HGroup>
					</s:VGroup>
				</s:HGroup>
			</s:Group>
		</s:HGroup>
		<s:HGroup gap="10">
			<s:Button id="btReprint" includeIn="reprint" label="Создать группы печати"
					  click="btReprint_clickHandler(event)"/>
			<s:Button id="btReprintMode" includeIn="info" label="Перепечатать" 
					  enabled="{order.state>=OrderState.PRN_WAITE}" click="btReprintMode_clickHandler(event)"/>
			<s:Button id="btLookup" label="Закрыть" click="{close()}"/>
		</s:HGroup>
	</s:VGroup>
</s:SkinnablePopUpContainer>
