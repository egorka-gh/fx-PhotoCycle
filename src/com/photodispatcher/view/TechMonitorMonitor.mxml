<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*"
		 creationComplete="{init()}" 
		 keyDown="onKey(event)">
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.FieldValue;
			import com.photodispatcher.model.mysql.entities.OrderExtraState;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.SubOrder;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.model.mysql.services.OrderService;
			import com.photodispatcher.model.mysql.services.OrderStateService;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.view.menu.GridContexMenu;
			
			import flash.globalization.DateTimeStyle;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.PopUpEvent;
			import spark.formatters.DateTimeFormatter;
			
			public var techPoint:TechPoint;
			//public var startTechType:FieldValue;
			[Bindable]
			public var manualAdd:Boolean;
			public var finalOperation:Boolean;
			
			public var endTechType:FieldValue;
			public var refreshInterval:int;
			
			private var _barcodeReader:ComReader;
			public function get barcodeReader():ComReader{
				return _barcodeReader;
			}
			public function set barcodeReader(value:ComReader):void{
				if(_barcodeReader){
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
				}
				_barcodeReader = value;
				if(_barcodeReader){
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
				}
			}

			private function onBarCode(event:BarCodeEvent):void{
				newOrder=null;
				var orderId:String=event.barcode;
				if(!manualAdd || !orderId) return;
				var svc:OrderService=Tide.getInstance().getContext().byType(OrderService,true) as OrderService;
				var latch:DbLatch=svc.findeSuborder(orderId,true);
				latch.addEventListener(Event.COMPLETE,onOrderFinde);
				latch.start();
			}
			private function onOrderFinde(e:Event):void{
				var latch:DbLatch=e.target as DbLatch;
				var ordersList:ArrayCollection;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onOrderFinde);
					if(latch.complite){
						ordersList=latch.lastDataAC;
					}
				}
				/*
				var dao:OrderDAO=new OrderDAO();
				var ordersList:ArrayCollection= dao.findeById(orderId,true);
				*/
				if(!ordersList) return;
				if(ordersList.length==1){
					addOrder(ordersList.getItemAt(0) as SubOrder);
				}else{
					var pop:OrderAddPopup=new OrderAddPopup();
					pop.addEventListener(PopUpEvent.CLOSE, onOrderAdd);
					var code:String=PrintGroup.idFromBookBarcode(barcodeReader.lastCode);
					if(!code) code=barcodeReader.lastCode;
					pop.show(code,ordersList);
				}
			}

			
			private var timer:Timer;
			
			public function start():void{
				refresh();
			}

			public function stop():void{
				if(timer){
					timer.stop();
					timer.removeEventListener(TimerEvent.TIMER, onTimer);
					timer=null;
				}
			}

			[Bindable]
			private var listAC:ArrayCollection;
			[Bindable]
			private var gridColumnsAC:ArrayCollection;
			
			private function init():void{
				gridColumnsAC= new ArrayCollection();
				
				var col:GridColumn = new GridColumn('id'); col.headerText='Заказ'; gridColumnsAC.addItem(col);
				col= new GridColumn('sub_id'); col.headerText='Подзаказ'; gridColumnsAC.addItem(col);
				col= new GridColumn('state_name'); col.headerText='Начальный статус'; gridColumnsAC.addItem(col); 
				var fmt:DateTimeFormatter=new DateTimeFormatter(); fmt.dateStyle=fmt.timeStyle=DateTimeStyle.SHORT; 
				col= new GridColumn('start_date'); col.headerText='Дата'; col.formatter=fmt; col.width=120; gridColumnsAC.addItem(col);

				col= new GridColumn('state_name2'); col.headerText='Ожидаемый статус'; gridColumnsAC.addItem(col); 
				fmt=new DateTimeFormatter(); fmt.dateStyle=fmt.timeStyle=DateTimeStyle.SHORT; 
				col= new GridColumn('start_date2'); col.headerText='Начало'; col.formatter=fmt; col.width=120; gridColumnsAC.addItem(col);
				fmt=new DateTimeFormatter(); fmt.dateStyle=fmt.timeStyle=DateTimeStyle.SHORT; 
				col= new GridColumn('state_date2'); col.headerText='Конец'; col.formatter=fmt; col.width=120; gridColumnsAC.addItem(col);
				
			}
			
			private function refresh():void{
				if(timer && timer.running) timer.stop();
				listAC=null;
				/*
				var sql:String='SELECT es.id, es.state, es.state_date, os.name state_name,'+
									' (CASE WHEN es2.id IS NULL THEN 1000 WHEN es2.state_date IS NULL THEN 900 ELSE es2.state END) state2, es2.start_date start_date2, es2.state_date state_date2, os2.name state_name2'+  
								' FROM order_extra_state es'+
								' INNER JOIN config.order_state os ON os.id=es.state'+
								' LEFT OUTER JOIN order_extra_state es2 ON es.id=es2.id and es2.state=?'+
								' LEFT OUTER JOIN config.order_state os2 ON os2.id=es2.state'+
								' LEFT OUTER JOIN order_extra_state es3 ON es.id=es3.id and es3.state=?'+
								' WHERE es.state=? and es3.state_date IS NULL'+
								' ORDER BY (CASE WHEN es2.id IS NULL THEN 1000 WHEN es2.state_date IS NULL THEN 900 ELSE es2.state END), es.state_date';
				var params:Array=[endTechType.state, techPoint.tech_state, startTechType.state];
				var dao:BaseDAO= new BaseDAO();
				if (dao.runSelect(sql,params)){
					listAC=dao.rawList;
					listAC.filterFunction=filterOrdersList;
				}
				*/
				var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
				var latch:DbLatch= new DbLatch();
				latch.addEventListener(Event.COMPLETE,onRefresh);
				latch.addLatch(svc.loadMonitorEState(techPoint.tech_type, endTechType.value));
				latch.start();
			}
			private function onRefresh(e:Event):void{
				var latch:DbLatch=e.target as DbLatch;
				var ordersList:ArrayCollection;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onRefresh);
					if(latch.complite){
						listAC=latch.lastDataAC;
						listAC.filterFunction=filterOrdersList;
					}
				}

				if(dgMonitor){
					//dgMonitor.sortByColumns(new Vector.<int>([]),true);
					dgMonitor.columnHeaderGroup.visibleSortIndicatorIndices=new Vector.<int>([]);
					if(newOrder){
						// finde and select newOrder
						var obj:Object=ArrayUtil.searchItem('humanId',newOrder.humanId,listAC.source);
						if(obj) dgMonitor.selectedItem=obj;
						newOrder=null;
					}

				}
				startTimer();
			}
			
			private function startTimer():void{
				if(refreshInterval<=0) return;
				if(!timer){
					timer= new Timer(refreshInterval*60000,1);
					timer.addEventListener(TimerEvent.TIMER, onTimer);
				}
				timer.delay=refreshInterval*60000;
				timer.start();
			}
			private function onTimer(evt:TimerEvent):void{
				if(dgMonitor && dgMonitor.selectedItem) newOrder=dgMonitor.selectedItem as SubOrder;
				refresh();
			}

			protected function btAddOrder_clickHandler(event:MouseEvent):void{
				//newOrderId='';
				newOrder=null;
				var pop:OrderAddPopup=new OrderAddPopup();
				pop.addEventListener(PopUpEvent.CLOSE, onOrderAdd);
				pop.open(null,true);
			}
			
			/*
			private function checkOrder(orderId:String):Boolean{
				if(!orderId) return false;
				var dao:OrderExtraStateDAO= new OrderExtraStateDAO();
				var arr:Array=dao.getByOrder(orderId);
				if(!arr) return false;
				if(arr.length==0) return true;
				var es:OrderExtraState;
				var isStarted:Boolean;
				var isComplite:Boolean;
				for each(es in arr){
					if(es.state==startTechType.value) isStarted=true;
					if(es.state==techPoint.tech_type){
						isStarted=true;
						if(es.state_date) isComplite=true; 
					}
				}
				if(!isStarted && !isComplite) return true;
				if(isComplite){
					Alert.show('Заказ "'+orderId+'" уже прошел технологическую операцию');
				}else{
					Alert.show('Заказ "'+orderId+'" уже добавлен');
				}
				return false;
			}
			*/
			
			//private var newOrderId:String;
			private function onOrderAdd(event:PopUpEvent):void{
				var pop:OrderAddPopup=event.target as OrderAddPopup;
				if(pop) pop.removeEventListener(PopUpEvent.CLOSE, onOrderAdd);
				if(event.commit){
					var so:SubOrder=event.data as SubOrder;
					addOrder(event.data as SubOrder);
				}
			}
			private var newOrder:SubOrder;
			private function addOrder(order:SubOrder):void{
				if(!order) return;
				newOrder=order;
				var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onAddOrder);
				latch.addLatch(svc.extraStateStartMonitor(order.order_id, order.sub_id, techPoint.tech_type));
				latch.start();
			}
			private function onAddOrder(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onAddOrder);
					if(latch.complite){
						if(latch.lastResult.resultCode==1){
							Alert.show('Заказ "'+newOrder.humanId+'" уже добавлен');
						}else if(latch.lastResult.resultCode==2){
							Alert.show('Заказ "'+newOrder.humanId+'" уже прошел технологическую операцию');	
							newOrder=null;
						}
						refresh();
					}else{
						newOrder=null;
					}
				}
			}

			/*
				newOrderId='';
				if(order && checkOrder(order.id)){
					newOrderId=order.id;
					var dao:OrderDAO= new OrderDAO();
					dao.addEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderAdded);
					dao.setExtraStateByTech(order.id,startTechType.id);
				}
			}
			private function onOrderAdded(event:AsyncSQLEvent):void{
				var dao:OrderDAO=event.target as OrderDAO;
				if(dao) dao.removeEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderAdded);
				if(event.result==AsyncSQLEvent.RESULT_COMLETED){
					refresh();
					var obj:Object=ArrayUtil.searchItem('id',newOrderId,listAC.source);
					if(obj && dgMonitor) dgMonitor.selectedItem=obj;
					dao= new OrderDAO();
					dao.startExtraStateByTech(newOrderId, techPoint.tech_type, techPoint.id);
				}else{
					Alert.show(event.error);
				}
				newOrderId='';
			}
			*/
			
			private var ordersGridMenu:GridContexMenu;
			protected function dgMonitor_creationCompleteHandler(event:FlexEvent):void{
				ordersGridMenu= new GridContexMenu(dgMonitor); //, [GridContexMenu.SEPARATOR,GridContexMenu.SHOW_ORDER]);
				ordersGridMenu.addItem('Выполнен',completeCallBack);
				ordersGridMenu.addItem('');
				if(manualAdd){
					ordersGridMenu.addItem('Отменить',cancelMonitorCallBack);
					ordersGridMenu.addItem('');
				}
				ordersGridMenu.addItem('Состояние',showCallBack);
			}
			
			private function showCallBack(grid:DataGrid,param:int):void{
				var onItem:Object;
				onItem=grid.selectedItem;
				if(onItem && onItem.id){
					var pop:OrderInfoPopup=new OrderInfoPopup();
					pop.show(onItem.id,true);
				}
			}
			
			private var cancelItem:OrderExtraState;
			private function cancelMonitorCallBack(grid:DataGrid,param:int):void{
				cancelItem=null;
				var onItem:Object;
				onItem=grid.selectedItem;
				if(onItem && onItem.id) cancelItem=onItem as OrderExtraState;
				if(cancelItem) checkCfgPass();
			}
			protected function checkCfgPass():void{
				var configPass:String=Context.getAttribute('configPass');
				if(!configPass){
					cancelMonitor();
					return;
				}
				var passPop:PasswPopup= new PasswPopup();
				passPop.addEventListener(PopUpEvent.CLOSE, onCfgPassCheck);
				passPop.show(configPass);
			}
			protected function onCfgPassCheck(event:PopUpEvent):void{
				var passPop:PasswPopup=event.target as PasswPopup;
				if(passPop) passPop.removeEventListener(PopUpEvent.CLOSE, onCfgPassCheck);
				if(event.commit) cancelMonitor();
			}
			private function cancelMonitor():void{
				if(!cancelItem) return;
				var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onCancelOrder);
				latch.addLatch(svc.extraStateReset(cancelItem.id, cancelItem.sub_id, techPoint.tech_type));
				//if(startTechType) latch.addLatch(svc.extraStateReset(cancelItem.id, cancelItem.sub_id, startTechType.value));
				latch.start();
			}
			private function onCancelOrder(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onCancelOrder);
					if(latch.complite){
						refresh();		
					}
				}
			}
				/*
				var dao:OrderDAO= new OrderDAO();
				dao.resetExtraStateByTech(cancelItem.id, techPoint.tech_type);
				dao= new OrderDAO();
				dao.addEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderCanceled);
				dao.resetExtraStateByTech(cancelItem.id,startTechType.id);
				cancelItem=null;
			}
			private function onOrderCanceled(event:AsyncSQLEvent):void{
				var dao:OrderDAO=event.target as OrderDAO;
				if(dao) dao.removeEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderCanceled);
				if(event.result==AsyncSQLEvent.RESULT_COMLETED){
					refresh();
				}else{
					Alert.show(event.error);
				}
			}
				*/

			
			private function completeCallBack(grid:DataGrid,param:int):void{
				var onItem:Object;
				onItem=grid.selectedItem;
				if(onItem && onItem.id){
					if(onItem.state2<1000){
						setComplete();			
					}else{
						Alert.show('Ожидаемая операция не выполнена. Продолжить?','',Alert.YES|Alert.NO,this,onCompleteAlert);
					}
				}
			}
			
			private function onCompleteAlert(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					setComplete();
				}
			}
			
			private function setComplete():void{
				var onItem:OrderExtraState;
				onItem=dgMonitor.selectedItem as OrderExtraState;
				if(!onItem) return;
				var svc:OrderStateService=Tide.getInstance().getContext().byType(OrderStateService,true) as OrderStateService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onCompleteOrder);
				latch.addLatch(svc.extraStateSet(onItem.id, onItem.sub_id, techPoint.tech_type, new Date()));
				latch.start();
			}
			private function onCompleteOrder(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onCompleteOrder);
					if(latch.complite){
						refresh();		
					}
				}
			}
				/*
				{
					var dao:OrderDAO= new OrderDAO();
					dao.execOnItem=onItem;
					dao.addEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderCompleteSet);
					dao.setExtraStateByTech(onItem.id, techPoint.tech_type, techPoint.id);
				}
			}
			private function onOrderCompleteSet(event:AsyncSQLEvent):void{
				var dao:OrderDAO=event.target as OrderDAO;
				var onItem:Object;
				if(dao){
					dao.removeEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderCompleteSet);
					onItem=dao.execOnItem;
				}
				if(event.result==AsyncSQLEvent.RESULT_COMLETED){
					if(finalOperation && onItem){
						dao.addEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderFinalSet);
						dao.setExtraStateByTech(onItem.id, SourceType.TECH_OTK);
					}else{
						refresh();
					}
				}else{
					Alert.show(event.error);
				}
			}
			private function onOrderFinalSet(event:AsyncSQLEvent):void{
				var dao:OrderDAO=event.target as OrderDAO;
				if(dao) dao.removeEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onOrderCompleteSet);
				if(event.result==AsyncSQLEvent.RESULT_COMLETED){
					refresh();
				}else{
					Alert.show(event.error);
				}
			}
			*/
				
			private function onKey(e:KeyboardEvent):void{
				if(e.ctrlKey && e.keyCode==70){
					//order lookup
					var pop:OrderSearchPopup=new OrderSearchPopup();
					pop.open(null);
				}
			}

			private function filterOrdersList(item:Object):Boolean {
				if(!item || !item.id) return false;
				if(tiOrderFilter && tiOrderFilter.text && item.id.indexOf(tiOrderFilter.text)==-1) return false;
				return true;
			}

			private function applyOrdersFilter():void{
				listAC.refresh();
				if(dgMonitor){
					dgMonitor.clearSelection();
					dgMonitor.dispatchEvent(new FlexEvent(FlexEvent.VALUE_COMMIT));
				}
			}

		]]>
	</fx:Script>

	<s:VGroup id="gGrid" gap="5" top="0" left="0" right="0" bottom="0">
		<s:HGroup id="gFilters" width="900" gap="5" horizontalAlign="left" verticalAlign="baseline">
			<s:Label text="Фильтрация по №" fontWeight="bold"/>
			<s:TextInput id="tiOrderFilter" width="100" change="{applyOrdersFilter()}"/>
			<s:Spacer width="100%"/>
			<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refresh()}"
					  cornerRadius="4" width="22" height="22" baseline="4"/>
		</s:HGroup>
		<s:DataGrid id="dgMonitor" selectionMode="singleRow"
					width="900" height="100%" creationComplete="dgMonitor_creationCompleteHandler(event)"
					dataProvider="{listAC}" locale="ru_RU" columns="{gridColumnsAC}">
			<s:rowBackground>
				<fx:Component>
					<itemRenderer:TechMonitorDataGridRowBackground/>
				</fx:Component>
			</s:rowBackground>
		</s:DataGrid>
		<s:Button id="btAddOrder" label="Добавить" click="btAddOrder_clickHandler(event)" enabled="{manualAdd}"/>
	</s:VGroup>
	
</s:Group>
