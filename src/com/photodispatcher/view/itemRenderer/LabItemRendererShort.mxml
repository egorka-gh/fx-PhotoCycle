<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*"
				autoDrawBackground="true"
				enabled="{lab.enabled}"
				width="100%">

	<fx:Script>
		<![CDATA[
			import com.photodispatcher.print.LabGeneric;
			import com.photodispatcher.view.ErrorPopup;
			import com.photodispatcher.view.LabInfo;
			
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import spark.components.WindowedApplication;
			
			private static const ERR_TOOL_TIP_TIME:int=10000;
			
			[Bindable]
			private var lab:LabGeneric;
			override public function get data():Object{
				return super.data;
			}
			override public function set data(value:Object):void{
				super.data = value;
				if(lab) lab.removeEventListener(ErrorEvent.ERROR,labErrHandler);
				lab=value as LabGeneric;
				if(lab) lab.addEventListener(ErrorEvent.ERROR,labErrHandler);
			}
			
			
			
			private var errPopUp:ErrorPopup;
			private var timer:Timer;
			private function labErrHandler(e:ErrorEvent):void{
				//if (!this.selected) return;
				var txt:String='';
				if (errPopUp && errPopUp.isOpen) txt=errPopUp.alert+'\n';
				txt=txt+e.text;
				if (!errPopUp){
					errPopUp=new ErrorPopup();
				}
				if(!timer){
					timer=new Timer(ERR_TOOL_TIP_TIME,1);
					timer.addEventListener(TimerEvent.TIMER,destroyErrorTip);
					
				}else{
					timer.reset();
				}
				timer.start();
				errPopUp.alert=txt;
				errPopUp.show(true);
			}

			private function destroyErrorTip(e:Event=null):void {
				if (errPopUp) {
					errPopUp.close();
				}
			}
				
			protected function btLabInfo_clickHandler(event:MouseEvent):void{
				if(!lab) return;
				var pop:LabInfo= new LabInfo;
				pop.lab=lab;
				//pop.width=FlexGlobals.topLevelApplication.width-50;
				pop.height=FlexGlobals.topLevelApplication.height-70;
				PopUpManager.addPopUp(pop,FlexGlobals.topLevelApplication as WindowedApplication);
				PopUpManager.centerPopUp(pop);
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
	</s:states>
	
	<s:Rect radiusX="4" top="2" left="2" right="2" bottom="2">
		<s:stroke>
			<s:SolidColorStroke color="#cccccc" weight="2"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#ffffff" alpha="0.6"/>
		</s:fill>
	</s:Rect>

	<s:HGroup gap="0" verticalAlign="middle" top="6" left="6" right="6" bottom="6">
		<itemRenderer:LabStateIndicator state="{lab.onlineState}"/>
		<s:Spacer width="5"/>
		<s:Label text="{lab.name}" fontSize="12" fontWeight="bold" width="100%" maxDisplayedLines="1"/>
	</s:HGroup>

	<!--<s:VGroup gap="5" top="6" left="6" right="6" bottom="6">
		<s:HGroup gap="0" verticalAlign="middle" width="100%">
			<itemRenderer:LabStateIndicator state="{lab.onlineState}"/>
			<s:Spacer width="5"/>
			<s:Label text="{lab.name}" fontSize="12" fontWeight="bold" width="100%" maxDisplayedLines="1"/>
			<s:Image id="btLabInfo" source="assets/info.png" buttonMode="true" verticalCenter="-2" click="btLabInfo_clickHandler(event)"/>
		</s:HGroup>
		<s:HGroup gap="3" verticalAlign="baseline">
			<itemRenderer:SecondToMinuteRenderer seconds="{lab.printQueue.printQueueLen}"/>
			<s:Label text="({lab.printQueue.printQueueLenM}Ð¼)"/>
		</s:HGroup>
	</s:VGroup>-->
</s:ItemRenderer>
