<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 minWidth="600" minHeight="50">
	
	<fx:Metadata>
		[Event(name="ready", type="flash.events.Event")]
		[Event(name="complited", type="flash.events.Event")]
		[Event(name="cancel", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.StaffActivity;
			import com.photodispatcher.model.mysql.entities.StaffActivityType;
			import com.photodispatcher.model.mysql.services.StaffActivityService;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import org.granite.tide.Tide;
			
			[Bindable]
			public var activityGroup:int=0;
			[Bindable]
			public var pgId:String;
			
			public var staffActivity:StaffActivity;
			
			[Bindable]
			private var label:String;
			[Bindable]
			public var okLabel:String='Ok';
			
			[Bindable]
			private var activityTypeAC:ArrayCollection;
			[Bindable]
			private var staffAC:ArrayCollection;
			
			private var staffActivityService:StaffActivityService;
			
			public function reset():void{
				staffActivity=null;
				pgId='';
			}
			
			public function show(activityGroup:int, label:String='', pgId:String=''):void{
				if(activityGroup<=0) return;
				staffActivity=null;
				this.pgId=pgId;
				this.label=label;
				this.activityGroup=activityGroup;
				
				staffAC=Context.getAttribute('staffValueList') as ArrayCollection;
				staffActivityService=Tide.getInstance().getContext().byType(StaffActivityService,true) as StaffActivityService;
				loadStaffActivityTypes();
				/*
				this.open((FlexGlobals.topLevelApplication as DisplayObjectContainer),true);
				PopUpManager.centerPopUp(this);
				*/
			}
			
			public function createActivity():Boolean{
				var staff:int=0;
				var activityType:int=0;
				var remark:String=tiRemark.text;
				if(ddStaff && ddStaff.selectedIndex!=-1) staff=ddStaff.selectedItem.value;
				if(ddType && ddType.selectedIndex!=-1){
					var at:StaffActivityType= ddType.selectedItem as StaffActivityType;
					if(at) activityType=at.id;
				}
				
				//perfom checks
				if(staff==0){
					Alert.show("Не указан сотрудник");
					return false;
				}
				if(activityType==0 && ! remark){
					Alert.show("Необходимо указать причину или коментарий");
					return false;
				}
				
				staffActivity= new StaffActivity();
				staffActivity.log_date= new Date;
				staffActivity.remark=remark;
				staffActivity.sa_group=activityGroup;
				staffActivity.sa_type=activityType;
				staffActivity.staff=staff;
				if(pgId){
					staffActivity.order_id=PrintGroup.orderIdFromId(pgId);
					staffActivity.pg_id=pgId;
				}
				return true;
			}
			
			protected function btOk_clickHandler(event:MouseEvent):void{
				//close(true, staffActivity);
			 	if(createActivity()) dispatchEvent(new Event('complited'));
			}
			
			
			private function loadStaffActivityTypes():DbLatch{
				var latch:DbLatch= new DbLatch();
				latch.addEventListener(Event.COMPLETE, onStaffATLoad);
				latch.addLatch(staffActivityService.loadType(activityGroup));
				latch.start();
				return latch;
			}
			private function onStaffATLoad(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onStaffATLoad);
					if(latch.complite){
						activityTypeAC=latch.lastDataAC;
						
						//add default
						var it:StaffActivityType= new StaffActivityType();
						it.id=0;
						it.sa_group=0;
						it.name="";
						if(!activityTypeAC) activityTypeAC= new ArrayCollection();
						activityTypeAC.addItemAt(it,0);
						/*
						this.open((FlexGlobals.topLevelApplication as DisplayObjectContainer),true);
						PopUpManager.centerPopUp(this);
						*/
						dispatchEvent(new Event('ready'));
					}else{
						activityTypeAC=null;
					}
				}
			}
			
			
			protected function btCancel_clickHandler(event:MouseEvent):void{
				dispatchEvent(new Event('cancel'));
			}
			
			public function set popupMode(value:Boolean):void{
				if(value){
					currentState='popup';
				}else{
					currentState='component';
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="popup"/>
		<s:State name="component"/>
	</s:states>

	
	<s:Rect top="0" left="0" right="0" bottom="0" radiusX="4" includeIn="popup">
		<s:fill>
			<s:SolidColor color="#cccccc"/>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0" weight="1"/>
		</s:stroke>
	</s:Rect>
	<s:VGroup verticalAlign="middle"
			  gap="10" top="10" left="10" right="10" bottom="10"
			  gap.component="5" top.component="0" left.component="0" right.component="0" bottom.component="0"
			  >
		<s:Label text="{label}" width="100%" maxDisplayedLines="1"/>
		<s:HGroup width="100%" gap="5" verticalAlign="baseline">
			<s:Label text="Сотрудник"/>
			<s:DropDownList id="ddStaff" width="200" dataProvider="{staffAC}"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Причина"/>
			<s:DropDownList id="ddType" width="200" dataProvider="{activityTypeAC}" labelField="name"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Комментарий"/>
			<s:TextInput id="tiRemark" width="100%"/>
		</s:HGroup>
		<s:HGroup width="100%" horizontalAlign="right">
			<s:Button id="btOk" label="{okLabel}" click="btOk_clickHandler(event)"/>
			<s:Button id="btCancel" label="Отмена" click="btCancel_clickHandler(event)" includeIn="popup"/>
		</s:HGroup>
	</s:VGroup>
	
</s:Group>
