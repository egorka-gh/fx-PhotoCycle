<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:config="com.photodispatcher.view.config.*"
		 creationComplete="{init()}">
	
<fx:Script>
	<![CDATA[
		import com.photodispatcher.context.Context;
		import com.photodispatcher.event.AsyncSQLEvent;
		import com.photodispatcher.model.mysql.DbLatch;
		import com.photodispatcher.model.mysql.entities.BookPgAltPaper;
		import com.photodispatcher.model.mysql.entities.BookPgTemplate;
		import com.photodispatcher.model.mysql.entities.BookSynonym;
		import com.photodispatcher.model.mysql.entities.BookSynonymCompo;
		import com.photodispatcher.model.mysql.entities.SourceType;
		import com.photodispatcher.model.mysql.services.BookSynonymService;
		import com.photodispatcher.util.ArrayUtil;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.collections.ListCollectionView;
		import mx.controls.Alert;
		
		import org.granite.tide.Tide;
		
		private var tmp:BookSynonymCompo;
		
		[Bindable]
		private var currentList:ArrayCollection=new ArrayCollection();
		[Bindable]
		private var compoChildsAC:ArrayCollection=new ArrayCollection();
		[Bindable]
		private var bookTypeFilterList:ArrayCollection;
		[Bindable]
		private var synonymTypeFilterList:ArrayCollection;
		[Bindable]
		private var compoTypeFilterList:ArrayCollection;

		[Bindable]
		private var currentBook:BookSynonym;
		[Bindable]
		private var templatesList:ArrayCollection=new ArrayCollection();
		
		private var service:BookSynonymService;

		private function refresh():void{
			var latch:DbLatch= new DbLatch(false);
			latch.addEventListener(Event.COMPLETE, onLoad);
			latch.addLatch(service.loadAll(SourceType.SRC_FOTOKNIGA,0),'synonim');
			latch.start();
		}
		
		private function onLoad(event:Event):void{
			lockView=false;
			var latch:DbLatch= event.target as DbLatch;
			if(latch){
				latch.removeEventListener(Event.COMPLETE,onLoad);
				if(latch.complite){
					if(latch.lastToken.tag=='synonim'){
						currentList=latch.lastDataAC;
						currentList.filterFunction=gridFilter;
						currentList.refresh();
						
						compoChildsAC = new ArrayCollection(latch.lastDataAC.source);
						compoChildsAC.filterFunction = compoChildsFilter;
						compoChildsAC.refresh();
						
						currentState='list';
						//restore selection
						if(itemsGrid && lastSelectedBook){
							var selObj:Object;
							if(lastSelectedBook.id){
								selObj= ArrayUtil.searchItem('id',lastSelectedBook.id,currentList.source);
							}else if(lastSelectedBook.synonym){
								selObj= ArrayUtil.searchItem('synonym',lastSelectedBook.synonym,currentList.source);
							}
							if(selObj){
								itemsGrid.currentItem=selObj;
								itemsGrid.ensureSelectionVisible();
							}
							lastSelectedBook=null;
						}
					}else if(latch.lastToken.tag=='template'){
						if(latch.lastDataAC){
							templatesList=latch.lastDataAC;
						}else{
							templatesList= new ArrayCollection();
						}
						if (currentBook) currentBook.templates=templatesList;
						compoChildsAC.refresh();
						currentState='itemEdit';
					}else if(latch.lastToken.tag=='copy'){
						if(latch.resultCode!=0){
							//resultCode has inserted id
							lastSelectedBook= new Object();
							lastSelectedBook.id=latch.resultCode;
							refresh();
						}
					}else if(latch.lastToken.tag=='save'){
						refresh();
					}
				}else{
					currentList=null;
					templatesList=null;					
				}
			}
		}

		
		private function init():void{
			bookTypeFilterList=Context.getAttribute('book_typeList');
			synonymTypeFilterList=Context.getAttribute('synonym_typeList'); 
			compoTypeFilterList=Context.getAttribute('compo_typeList');
			service=Tide.getInstance().getContext().byType(BookSynonymService,true) as BookSynonymService;
			refresh();
		}

		private function addItem():void{
			if(currentState=='list'){
				var newPgs:BookSynonym= new BookSynonym();
				newPgs.src_type=SourceType.SRC_FOTOKNIGA;
				//fill vs filter vals
				if(tiSynonymFilter && tiSynonymFilter.text) newPgs.synonym=tiSynonymFilter.text;
				if(ddBookTypeFilter && ddBookTypeFilter.selectedIndex>0){
					newPgs.book_type=ddBookTypeFilter.selectedItem.value;
					newPgs.book_type_name=ddBookTypeFilter.selectedItem.label;
				}
				currentBook=newPgs;
				itemsGrid.addItem(newPgs);
			}else if(currentState=='itemEdit'){
				var newTemp:BookPgTemplate=new BookPgTemplate();
				newTemp.book=currentBook.id;
				tempGrid.addItem(newTemp);
			}
		}

		private function copyItem():void{
			if(currentState!='list') return;
			if(!itemsGrid || itemsGrid.currentIndex==-1) return;
			var item:BookSynonym = itemsGrid.currentItem as BookSynonym;
			if(!item || !item.loaded || item.id==0) return;
			var latch:DbLatch= new DbLatch(false);
			latch.addEventListener(Event.COMPLETE, onLoad);
			latch.addLatch(service.clone(item.id),'copy');
			latch.start();
		}

		[Bindable]
		private var lockView:Boolean=false;
		private var lastSelectedBook:Object;
		private function saveAll():void{
			if(!currentList) return;
			var item:BookSynonym;
			var temp:BookPgTemplate;
			var ap:BookPgAltPaper;
			var itemsToSave:ArrayCollection= new ArrayCollection(); 
			for each (item in currentList.source){
				if(item){
					if(!item.loaded || item.changed){
						itemsToSave.addItem(item);
					}else if(item.templates){
						for each(temp in item.templates){
							if(temp && (!temp.loaded || temp.changed)){
								itemsToSave.addItem(item);
								break;
							}
						}
					}
				}
			}
			if(itemsToSave.length!=0){
				if(!currentBook && itemsGrid && itemsGrid.currentItem) currentBook=itemsGrid.currentItem as BookSynonym;
				if(currentBook){
					lastSelectedBook= new Object();
					if(currentBook.loaded) lastSelectedBook.id=currentBook.id;
					lastSelectedBook.synonym=currentBook.synonym;
				}
				lockView=true;
				var latch:DbLatch= new DbLatch(false);
				latch.addEventListener(Event.COMPLETE, onLoad);
				latch.addLatch(service.persistBatch(itemsToSave),'save');
				latch.start();
			}
		}

		private function applyFilter():void{
			currentList.refresh();
		}

		private function gridFilter(item:Object):Boolean{
			var synonym:BookSynonym=item as BookSynonym;
			if(!synonym) return false;
			if(tiSynonymFilter && tiSynonymFilter.text && synonym.synonym.substr(0,tiSynonymFilter.text.length)!=tiSynonymFilter.text) return false;
			if(ddBookTypeFilter && ddBookTypeFilter.selectedIndex>0 && synonym.book_type!=ddBookTypeFilter.selectedItem.value) return false;
			if(ddCompoTypeFilter && ddCompoTypeFilter.selectedIndex>0 && synonym.compo_type!=ddCompoTypeFilter.selectedItem.value) return false;
			if(!ddSynonymTypeFilter || ddSynonymTypeFilter.selectedIndex<=0){
				//hide deleted
				if(synonym.synonym_type==-1) return false;
			}else{
				if(synonym.synonym_type!=ddSynonymTypeFilter.selectedItem.value) return false;
			}
			return true;
		}
		
		private function compoChildsFilter(item:Object):Boolean{
			var synonym:BookSynonym=item as BookSynonym;
			if(!synonym) return false;
			if(synonym.compo_type != BookSynonymCompo.COMPO_TYPE_CHILD) return false; 
			if(!currentBook) return false;
			if(!currentBook.compos || currentBook.compos.length==0) return true;
			for each (var it:BookSynonymCompo in currentBook.compos){
				if(it && !it.deleted && it.child == synonym.id) return false;
			}
			return  true;
		}

		private function compoDeletedChildsFilter(item:Object):Boolean{
			var c:BookSynonymCompo=item as BookSynonymCompo;
			if(!c) return false;
			return  !c.deleted;
		}

		protected function btEdit_clickHandler(event:MouseEvent):void{
			currentBook = itemsGrid.currentItem as BookSynonym;
			if(currentBook){
				if(!currentBook.loaded){
					Alert.show('Необходимо сохранить новую запись.');
					return;
				}
				var latch:DbLatch= new DbLatch(false);
				latch.addEventListener(Event.COMPLETE, onLoad);
				latch.addLatch(service.loadTemplates(currentBook.id),'template');
				latch.start();

				latch = new DbLatch(false);
				latch.addEventListener(Event.COMPLETE, onLoadCompo);
				latch.addLatch(service.loadCompo(currentBook.id));
				latch.start();
			}
		}
		private function onLoadCompo(event:Event):void{
			var latch:DbLatch= event.target as DbLatch;
			if(latch){
				latch.removeEventListener(Event.COMPLETE,onLoadCompo);
				if(latch.complite ){
					currentBook.compos = latch.lastDataAC; 
					currentBook.compos.filterFunction =compoDeletedChildsFilter;
					currentBook.compos.refresh();
				}
			}
			compoChildsAC.refresh();
		}
		
		protected function btTech_clickHandler(event:MouseEvent):void{
			if(!tempGrid || !tempGrid.currentItem) return;
			var templ:BookPgTemplate= tempGrid.currentItem as BookPgTemplate;
			if(!templ) return;
			var pop:TechConfigPopup= new TechConfigPopup();
			pop.show(templ);
		}
		
		protected function btAltPaper_clickHandler(event:MouseEvent):void{
			if(!tempGrid || !tempGrid.currentItem) return;
			var templ:BookPgTemplate= tempGrid.currentItem as BookPgTemplate;
			if(!templ) return;
			if(!templ.loaded){
				Alert.show('Необходимо сохранить новую запись.');
				return;
			}
			
			var pop:BookSynonymAltPaperPopup= new BookSynonymAltPaperPopup();
			pop.show(templ);
		}
		
		protected function btCompoAdd_clickHandler(event:MouseEvent):void{
			if (!currentBook || currentBook.compo_type != BookSynonymCompo.COMPO_TYPE_COMPO ) return;
			var s:BookSynonym = lstCompoChilds.selectedItem as BookSynonym;
			if(!s) return;
			var c:BookSynonymCompo = new BookSynonymCompo();
			c.parent = currentBook.id;
			c.child = s.id;
			c.childAlias = s.synonym;
			if(!currentBook.compos){
				currentBook.compos = new ArrayCollection();
				currentBook.compos.filterFunction = compoDeletedChildsFilter;
			}
			currentBook.compos.addItem(c);
			compoChildsAC.refresh();
		}
		
		protected function btComoDel_clickHandler(event:MouseEvent):void{
		 	var c:BookSynonymCompo = lstCompos.selectedItem as BookSynonymCompo;
			if(c) c.deleted = true;
			if(currentBook) currentBook.compos.refresh();
			compoChildsAC.refresh();
		}
		
	]]>
</fx:Script>
	<s:states>
		<s:State name="list"/>
		<s:State name="itemEdit"/>
	</s:states>
	
	<s:VGroup gap="10" width="100%" height="100%">
		<s:HGroup id="gFilters" width="100%" gap="5" horizontalAlign="left" verticalAlign="baseline" includeIn="list">
			<s:Label text="Фильтрация" fontWeight="bold"/>

			<s:Spacer width="5"/>
			<s:Label text="Имя алиаса"/>
			<s:TextInput id="tiSynonymFilter" width="300" change="{applyFilter()}"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Тип алиаса"/>
			<s:DropDownList id="ddSynonymTypeFilter" dataProvider="{synonymTypeFilterList}" change="{applyFilter()}"/>

			<s:Spacer width="5"/>
			<s:Label text="Комбо"/>
			<s:DropDownList id="ddCompoTypeFilter" dataProvider="{compoTypeFilterList}" change="{applyFilter()}"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Тип книги"/>
			<s:DropDownList id="ddBookTypeFilter" dataProvider="{bookTypeFilterList}" change="{applyFilter()}"/>
			
			<s:Spacer width="100%"/>
			<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refresh()}"
					  cornerRadius="4" width="22" height="22" baseline="4"/>
		</s:HGroup>
		<config:ItemsGrid id="itemsGrid" editable="true" includeIn="list"
						  currentData="{currentList}" currentColumns="{BookSynonym.gridColumns()}" 
						  width="100%" height="100%"/>
		<s:VGroup gap="10" width="100%" height="100%"
				  includeIn="itemEdit">
			<s:Label  text="{currentBook.synonym}" width="100%" fontWeight="bold"/>
			<s:Label  text="{currentBook.book_type_name}" width="100%"/>
			<s:VGroup gap="10" width="100%" height="100%" includeInLayout="{currentBook.compo_type == BookSynonymCompo.COMPO_TYPE_COMPO}" visible="{currentBook.compo_type == BookSynonymCompo.COMPO_TYPE_COMPO}">
				<s:Label  text="Комбинируется из алиасов" />
				<s:HGroup width="100%" height="100%" paddingLeft="20">
					<s:List id="lstCompos" width="300" height="100%"
							dataProvider="{currentBook.compos}" labelField="childAlias">
					</s:List>
					<s:VGroup paddingLeft="5" paddingRight="5" gap="20" height="100%" verticalAlign="middle">
						<s:Button id="btCompoAdd" label="◄" width="40" click="btCompoAdd_clickHandler(event)" />						
						<s:Button id="btComoDel" label="►" width="40" click="btComoDel_clickHandler(event)"/>						
					</s:VGroup>
					<s:List id="lstCompoChilds" width="300" height="100%"
							dataProvider="{compoChildsAC}" labelField="synonym">
					</s:List>
				</s:HGroup>
			</s:VGroup>
			<s:Label  text="Состав" />
			<config:ItemsGrid id="tempGrid" editable="true" 
							  currentData="{templatesList}" currentColumns="{BookPgTemplate.gridColumns()}" 
							  width="100%" height="100%"/>
		</s:VGroup>
		<s:HGroup gap="10" verticalAlign="baseline" width="100%" horizontalAlign="left">
			<!--TODO implement DELETE-->
			<s:Button id="btAdd" label="Добавить" click="{addItem()}"/>
			<s:Button id="btCopy" label="Копировать" enabled="true" enabled.itemEdit="false" click="{copyItem()}"/>
			<s:Spacer width="20"/>
			<s:Button id="btEdit" enabled="true" enabled.itemEdit="false" label="Состав книги" click="btEdit_clickHandler(event)"/>
			<s:Button id="btSave" label="Сохранить" click="{saveAll()}"/>
			<s:Button id="btCancel" label="Отмена" click="{currentState='list';refresh();}"/>
			<s:Spacer width="50"/>
			<s:Button id="btTech" label="Технологическая разметка" includeIn="itemEdit" click="btTech_clickHandler(event)"/>
			<s:Button id="btAltPaper" label="Бумага" includeIn="itemEdit" click="btAltPaper_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
