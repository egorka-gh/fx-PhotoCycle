<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:config="com.photodispatcher.view.config.*"
		 creationComplete="{init()}">

	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.AsyncSQLEvent;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.LabPrintCode;
			import com.photodispatcher.model.mysql.entities.SourceType;
			import com.photodispatcher.model.mysql.services.LabService;
			import com.photodispatcher.util.ArrayUtil;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;
			
			[Bindable]
			private var currentList:ArrayCollection=new ArrayCollection();
			[Bindable]
			private var labTypeList:ArrayCollection=new ArrayCollection();

			[Bindable]
			private var currentLabType:int;

			[Bindable]
			private var widthFilterList:ArrayCollection;
			[Bindable]
			private var heightFilterList:ArrayCollection;
			[Bindable]
			private var paperFilterList:ArrayCollection;
			[Bindable]
			private var frameFilterList:ArrayCollection;
			[Bindable]
			private var correctionFilterList:ArrayCollection;
			[Bindable]
			private var cuttingFilterList:ArrayCollection;

			private function copyItem():void{
				var citem:LabPrintCode=itemsGrid.currentItem as LabPrintCode;
				if(!citem) return;
				//not implemented
			}

			private function addItem():void{
				//get lab type
				var type:int=0;
				if(ddLabType && ddLabType.selectedIndex!=-1) type=ddLabType.selectedItem.value;
				if(type==0) return; 

				var newCode:LabPrintCode= new LabPrintCode();
				//fill vs default && filter vals
				newCode.paper=-1;
				newCode.frame=-1;
				newCode.correction=-1;
				newCode.cutting=-1;
				newCode.is_duplex=false;
				newCode.is_pdf=false;
				
				newCode.src_type=type;
				//newCode.is_pdf=type==SourceType.LAB_XEROX;
				if(tiWidthFilter && tiWidthFilter.text) newCode.width=int(tiWidthFilter.text);
				if(tiHeightFilter && tiHeightFilter.text) newCode.height=int(tiHeightFilter.text);
				if (type!=SourceType.LAB_NORITSU_NHF && type!=SourceType.LAB_PLOTTER){
					if(tiCodeFilter && tiCodeFilter.text) newCode.prt_code=tiCodeFilter.text;
				}
				if (type==SourceType.LAB_NORITSU_NHF) newCode.prt_code='nhf';
				if (type==SourceType.LAB_PLOTTER) newCode.prt_code='plotter';

				/*
				if (type!=SourceType.LAB_NORITSU_NHF){
					if(ddPaperFilter && ddPaperFilter.selectedIndex>0){
						newCode.paper=ddPaperFilter.selectedItem.value;
						newCode.paper_name=ddPaperFilter.selectedItem.label;
					}
					if (type!=SourceType.LAB_PLOTTER){
						if(tiCodeFilter && tiCodeFilter.text) newCode.prt_code=tiCodeFilter.text;
						if(ddCorrectionFilter && ddCorrectionFilter.selectedIndex>0){
							newCode.correction=ddCorrectionFilter.selectedItem.value;
							newCode.correction_name=ddCorrectionFilter.selectedItem.label;
						}
						if(ddCuttingFilter && ddCuttingFilter.selectedIndex>0){
							newCode.cutting=ddCuttingFilter.selectedItem.value;
							newCode.cutting_name=ddCuttingFilter.selectedItem.label;
						}
						if(ddFrameFilter && ddFrameFilter.selectedIndex>0){
							newCode.frame=ddFrameFilter.selectedItem.value;
							newCode.frame=ddFrameFilter.selectedItem.label;
						}
					}
				}
*/
				var paper:int=0; 
				var paper_name:String='';
				if(ddPaperFilter && ddPaperFilter.selectedIndex>0){
					paper=ddPaperFilter.selectedItem.value;
					paper_name=ddPaperFilter.selectedItem.label;
				}
				var frame:int=0; 
				var frame_name:String='';
				if(ddFrameFilter && ddFrameFilter.selectedIndex>0){
					frame=ddFrameFilter.selectedItem.value;
					frame_name=ddFrameFilter.selectedItem.label;
				}

				switch(type){
					case SourceType.LAB_FUJI:
						//result=sizeKey+'_'+paper.toString()+'_'+frame.toString(); 
						newCode.paper=paper; newCode.paper_name=paper_name; 
						newCode.frame=frame; newCode.frame_name=frame_name;
						break;
					case SourceType.LAB_PLOTTER:
						//result=sizeKey+'_'+paper.toString();
						newCode.paper=paper; newCode.paper_name=paper_name; 
						break;
					case SourceType.LAB_XEROX:
						//result=sizeKey+'_'+paper.toString()+'_'+is_duplex.toString(); 
						newCode.paper=paper; newCode.paper_name=paper_name;
						newCode.is_pdf=true;
						newCode.is_duplex=false;
						break;
					case SourceType.LAB_NORITSU_NHF:
						//include w/h
						newCode.frame=0;
						newCode.correction=0;
						break;
					default:
						//full key (SourceType.LAB_NORITSU or any)
						newCode.paper=paper; newCode.paper_name=paper_name; 
						newCode.frame=frame; newCode.frame_name=frame_name;
						newCode.correction=0;
						if(ddCorrectionFilter && ddCorrectionFilter.selectedIndex>0){
							newCode.correction=ddCorrectionFilter.selectedItem.value;
							newCode.correction_name=ddCorrectionFilter.selectedItem.label;
						}
						newCode.cutting=0;
						if(ddCuttingFilter && ddCuttingFilter.selectedIndex>0){
							newCode.cutting=ddCuttingFilter.selectedItem.value;
							newCode.cutting_name=ddCuttingFilter.selectedItem.label;
						}
						break;
				}

				itemsGrid.addItem(newCode);
			}
			
			[Bindable]
			private var lockView:Boolean=false;
			private var lastSelected:Object;
			private function saveAll():void{
				var item:LabPrintCode;
				var itemsToSave:ArrayCollection= new ArrayCollection(); 
				for each (item in currentList){
					if((!item.loaded || item.changed) && item.width && item.height) itemsToSave.addItem(item);
				}
				if(itemsToSave.length!=0){
					if(itemsGrid && itemsGrid.currentItem){
						item=itemsGrid.currentItem as LabPrintCode;
						if(item){
							lastSelected= new Object(); 
							if(item.loaded){
								lastSelected.id=item.id;
							}else{
								lastSelected.code=item.prt_code;
							}
						}
					}
					var service:LabService=Tide.getInstance().getContext().byType(LabService,true) as LabService;
					var latch:DbLatch= new DbLatch();
					latch.addEventListener(Event.COMPLETE, onSave);
					latch.addLatch(service.persistPrintCodes(itemsToSave));
					latch.start();
				}
			}
			private function onSave(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onSave);
					if(latch.complite){
						refresh();
					}
				}
			}

			private function refresh():void{
				var type:int=0;
				btAdd.enabled=false;
				btSave.enabled=false;
				if(ddLabType && ddLabType.selectedIndex!=-1) type=ddLabType.selectedItem.value;
				currentLabType=type;
				if(type<=0){
					currentList=null;
					return;
				}
				var service:LabService=Tide.getInstance().getContext().byType(LabService,true) as LabService;
				var latch:DbLatch= new DbLatch();
				latch.addEventListener(Event.COMPLETE, onLoad);
				latch.addLatch(service.loadPrintCode(type));
				latch.start();
			}
			private function onLoad(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onLoad);
					if(latch.complite){
						btAdd.enabled=currentLabType!=SourceType.LAB_VIRTUAL;
						btSave.enabled=currentLabType!=SourceType.LAB_VIRTUAL;
						currentList=latch.lastDataAC;
						currentList.filterFunction=gridFilter;
						applyFilter();
						if(lastSelected && itemsGrid){
							var item:LabPrintCode;
							if(lastSelected.id){
								item=ArrayUtil.searchItem('id',lastSelected.id,currentList.source) as LabPrintCode;
							}else if(lastSelected.code){
								item=ArrayUtil.searchItem('prt_code',lastSelected.code,currentList.source) as LabPrintCode;
							}
							if(item){
								itemsGrid.currentItem=item;
								itemsGrid.ensureSelectionVisible();
							}
							lastSelected=null;
						}
					}
				}
			}

			private function init():void{
				initCbLists();
				labTypeList=Context.getAttribute('lab_typeList');
				if(labTypeList && labTypeList.length>0){
					var a:Array=labTypeList.source.concat();
					//remove default '-'
					a.shift();
					labTypeList.source=a;
					if(ddLabType && ddLabType.dataProvider && a.length>0){
						ddLabType.selectedIndex=0;
					}
				}
				currentList.filterFunction=gridFilter;
				refresh();
			}
			
			private function initCbLists():void{
				paperFilterList=Context.getAttribute('paperList');
				frameFilterList=Context.getAttribute('frameList');
				correctionFilterList=Context.getAttribute('correctionList');
				cuttingFilterList=Context.getAttribute('cuttingList');
			}
			
			private function applyFilter():void{
				currentList.refresh();
			}
			
			private function gridFilter(item:Object):Boolean{
				var code:LabPrintCode=item as LabPrintCode;
				if(!code) return false;
				if(tiWidthFilter && tiWidthFilter.text && code.width.toString().substr(0,tiWidthFilter.text.length)!=tiWidthFilter.text) return false;
				if(tiHeightFilter && tiHeightFilter.text && code.height.toString().substr(0,tiHeightFilter.text.length)!=tiHeightFilter.text) return false;
				if(currentLabType== SourceType.LAB_NORITSU_NHF) return true;

				if(ddPaperFilter && ddPaperFilter.selectedIndex>0 && code.paper!=ddPaperFilter.selectedItem.value) return false;
				if(currentLabType== SourceType.LAB_PLOTTER) return true;

				if(tiCodeFilter && tiCodeFilter.text && code.prt_code.substr(0,tiCodeFilter.text.length)!=tiCodeFilter.text) return false;
				if(ddCorrectionFilter && ddCorrectionFilter.selectedIndex>0 && code.correction!=ddCorrectionFilter.selectedItem.value) return false;
				if(ddCuttingFilter && ddCuttingFilter.selectedIndex>0 && code.cutting!=ddCuttingFilter.selectedItem.value) return false;
				if(ddFrameFilter && ddFrameFilter.selectedIndex>0 && code.frame!=ddFrameFilter.selectedItem.value) return false;
				return true;
			}
			
			
			protected function ddLabType_creationCompleteHandler(event:FlexEvent):void{
				if(ddLabType.dataProvider && ddLabType.dataProvider.length>0){
					ddLabType.selectedIndex=0;
					currentLabType=ddLabType.selectedItem.value;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup gap="10" width="100%" height="100%">
		<s:HGroup width="100%" gap="5" horizontalAlign="left" verticalAlign="baseline">
			<s:Label text="Тип лаборатории"/>
			<s:DropDownList id="ddLabType" dataProvider="{labTypeList}" change="{refresh()}" creationComplete="ddLabType_creationCompleteHandler(event)"/>
		</s:HGroup>
		<s:HGroup id="gFilters" width="100%" gap="5" horizontalAlign="left" verticalAlign="baseline">
			<s:Label text="Фильтрация" fontWeight="bold"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Канал"/>
			<s:TextInput id="tiCodeFilter" width="100" change="{applyFilter()}" enabled="{!(currentLabType==SourceType.LAB_NORITSU_NHF || currentLabType==SourceType.LAB_PLOTTER)}"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Ширина"/>
			<s:TextInput id="tiWidthFilter" width="100" restrict="0123456789" change="{applyFilter()}"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Длина"/>
			<s:TextInput id="tiHeightFilter" width="100" restrict="0123456789" change="{applyFilter()}"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Бумага"/>
			<s:DropDownList id="ddPaperFilter" dataProvider="{paperFilterList}" change="{applyFilter()}" enabled="{currentLabType!=SourceType.LAB_NORITSU_NHF}"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Рамка"/>
			<s:DropDownList id="ddFrameFilter" dataProvider="{frameFilterList}" change="{applyFilter()}" enabled="{!(currentLabType==SourceType.LAB_NORITSU_NHF || currentLabType==SourceType.LAB_PLOTTER)}"/>
			<s:Spacer width="5"/>
			
			<s:Label text="Коррекция"/>
			<s:DropDownList id="ddCorrectionFilter" dataProvider="{correctionFilterList}" change="{applyFilter()}" enabled="{!(currentLabType==SourceType.LAB_NORITSU_NHF || currentLabType==SourceType.LAB_PLOTTER)}"/>
			
			<s:Spacer width="5"/>
			<s:Label text="Обрезка"/>
			<s:DropDownList id="ddCuttingFilter" dataProvider="{cuttingFilterList}" change="{applyFilter()}" enabled="{!(currentLabType==SourceType.LAB_NORITSU_NHF || currentLabType==SourceType.LAB_PLOTTER)}"/>
			
			<s:Spacer width="100%"/>
			<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refresh()}"
					  cornerRadius="4" width="22" height="22" baseline="4"/>
		</s:HGroup>
		<config:ItemsGrid id="itemsGrid" editable="true"
						  currentData="{currentList}" currentColumns="{LabPrintCode.gridColumns(currentLabType)}" 
						  width="100%" height="100%"/>
		<s:HGroup gap="10" verticalAlign="baseline" width="100%" horizontalAlign="left">
			<!--TODO implement DELETE-->
			<s:Button id="btAdd" label="Добавить" click="{addItem()}"/>
			<!--<s:Button id="btCopy" label="Дублировать" click="{copyItem()}"/>-->
			<s:Button id="btSave" label="Сохранить" click="{saveAll()}"/>
			<s:Button id="btCancel" label="Отмена" click="{refresh()}"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>

