<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:config="com.photodispatcher.view.config.*"
		 creationComplete="{init()}"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.AsyncSQLEvent;
			import com.photodispatcher.model.AttrType;
			import com.photodispatcher.model.Lab;
			import com.photodispatcher.model.LabPrintCode;
			import com.photodispatcher.model.SourceType;
			import com.photodispatcher.model.TechPoint;
			import com.photodispatcher.model.dao.AttrTypeDAO;
			import com.photodispatcher.model.dao.BaseDAO;
			import com.photodispatcher.model.dao.DictionaryDAO;
			import com.photodispatcher.model.dao.LabDAO;
			import com.photodispatcher.model.dao.LabPrintCodeDAO;
			import com.photodispatcher.model.dao.TechPointDAO;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.AbstractEntity;
			import com.photodispatcher.model.mysql.entities.DmlResult;
			import com.photodispatcher.model.mysql.entities.LabResize;
			import com.photodispatcher.model.mysql.entities.SelectResult;
			import com.photodispatcher.model.mysql.entities.Source;
			import com.photodispatcher.model.mysql.services.LabResizeService;
			import com.photodispatcher.model.mysql.services.SourceService;
			
			import flash.utils.getTimer;
			
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.ResultEvent;
			
			import org.granite.tide.Tide;

			[Bindable]
			private var currentList:ArrayCollection;
			[Bindable]
			private var currentColumns:IList;
			[Bindable]
			private var currentItem:Source;
			[Bindable]
			private var currentLab:Lab;
			[Bindable]
			private var gridEditable:Boolean=false;
			
			[Bindable]
			private var widthFilterList:ArrayCollection;
			[Bindable]
			private var heightFilterList:ArrayCollection;
			[Bindable]
			private var paperFilterList:ArrayCollection;
			[Bindable]
			private var frameFilterList:ArrayCollection;
			[Bindable]
			private var correctionFilterList:ArrayCollection;
			[Bindable]
			private var cuttingFilterList:ArrayCollection;
			
			private function init():void{
				Context.initAttributeLists();
			}

			private function detectState():void{
				var latch:DbLatch
				currentItem=null;
				gridEditable=false;
				switch(tbView.selectedIndex){
					case 0:
						currentState='common';
						break;
					case 1:
						currentState='sourceList';
						//dao= new SourcesDAO();
						//currentList=dao.findAll();
						currentColumns=Source.gridColumns();
						//currentList=new ArrayCollection(Context.getSources());
						currentList=null;
						var svc:SourceService=Tide.getInstance().getContext().byType(SourceService,true) as SourceService;
						latch=new DbLatch(false);
						latch.addEventListener(Event.COMPLETE, onNewCurrentList);
						latch.addLatch(svc.loadAll(Source.LOCATION_TYPE_SOURCE));
						latch.start();
						break;
					case 2:
						currentState='labList';
						var ldao:LabDAO= new LabDAO();
						currentList=ldao.findAll();
						currentColumns=Lab.gridColumns();
						/*
						dao= new SourcesDAO();
						currentList=dao.findAll(Source.LOCATION_TYPE_LAB);
						currentColumns=SourcesDAO.gridColumns(true);
						*/
						break;
					case 3:
						//gridEditable=true;
						//initCbLists();
						currentState='prtCodeList';
						//var ldao:LabPrintCodeDAO= new LabPrintCodeDAO();
						//Noritsu
						//currentList=ldao.findAll(SourceType.LAB_NORITSU);
						//currentList.filterFunction=gridFilter;
						//applyFilter();
						//currentColumns=LabPrintCodeDAO.gridColumns();
						break;
					case 4:
						gridEditable=true;
						currentState='prResizeList';
						currentColumns=LabResize.gridColumns();
						currentList=null;
						var svcLR:LabResizeService=Tide.getInstance().getContext().byType(LabResizeService,true) as LabResizeService;
						latch= new DbLatch(false);
						latch.addEventListener(Event.COMPLETE, onNewCurrentList);
						latch.addLatch(svcLR.loadAll());
						latch.start();
						break;
					case 5:
						currentState='bookSynonym';
						break;
					case 6:
						currentState='contentFilters';
						break;
					case 7:
						gridEditable=true;
						currentState='tech_point';
						var tpDao:TechPointDAO=new TechPointDAO();
						currentList=tpDao.findAll();
						currentColumns=TechPoint.gridColumns();
						break;
					case 8:
						currentState='tech_layers';
						break;
				}
			}
			private function onNewCurrentList(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onNewCurrentList);
					if(latch.complite) currentList=latch.lastDataAC;
				}
			}
			
			protected function btEdit_clickHandler(event:MouseEvent):void{
				if(currentState=='labList'){
					currentLab=itemsGrid.currentItem as Lab;
					if(!currentLab) return;
					currentState='lab';
				}else if(currentState=='sourceList'){
					currentItem=itemsGrid.currentItem as Source;
					if(!currentItem) return;
					currentState='source';
				}
			}

			protected function btAdd_clickHandler(event:MouseEvent):void{
				if(currentState=='prResizeList'){
					var r:LabResize= new LabResize();
					currentList.addItem(r);
					currentList.refresh();
					itemsGrid.dgItems.selectedItem=r;
					itemsGrid.ensureSelectionVisible();
				}else if(currentState=='tech_point'){
					var ti:TechPoint= new TechPoint();
					ti.name='Новая тех. точка';
					ti.tech_type=SourceType.TECH_PRINT;
					currentList.addItem(ti);
					currentList.refresh();
					itemsGrid.dgItems.selectedItem=ti;
					itemsGrid.ensureSelectionVisible();
					/*
					var ti:Source= new Source();
					ti.name='Новая тех. точка';
					ti.type_id=SourceType.TECH_PRINT;
					ti.loc_type=Source.LOCATION_TYPE_TECH_POINT;
					currentList.addItem(ti);
					currentList.refresh();
					itemsGrid.dgItems.selectedItem=ti;
					itemsGrid.ensureSelectionVisible();
					*/
				}else if(currentState=='labList'){
					var newLab:Lab=new Lab();
					newLab.name='Новая лаба';
					currentLab=newLab;
					currentState='lab';
				}else{
					var newItem:Source=new Source();
					newItem.loc_type=Source.LOCATION_TYPE_SOURCE;
					currentState='source';
					currentItem=newItem;
				}
			}
			
			protected function btSave_clickHandler(event:MouseEvent):void{
				if(currentState=='prResizeList'){
					saveResizes();
				}else if(currentState=='tech_point'){
					saveTechPoints();
				}else if(currentState=='lab'){
					saveLab();
				}else{
					if(!currentItem) return;
					if(!currentItem.loaded && !currentItem.type){
						Alert.show('Не указан тип');
						return;
					}
					if((!currentItem.loaded) || currentItem.changed 
						|| currentItem.webService.changed || currentItem.ftpService.changed || currentItem.fbookService.changed || currentItem.hotFolder.changed){
						var svc:SourceService=Tide.getInstance().getContext().byType(SourceService,true) as SourceService;
						var latch:DbLatch= new DbLatch(false);
						var tk:AsyncToken=svc.persist(currentItem as com.photodispatcher.model.mysql.entities.Source);
						if(!currentItem.loaded){
							var id:int=getTimer();
							currentItem.id=id;
							tk.add=true;
							tk.tag=id;
							//tk.addResponder(new AsyncResponder(onSourceAdd,null));
						}else{
							tk.add=false;
							tk.tag=currentItem.id;
						}
						latch.addLatch(tk);
						latch.addEventListener(Event.COMPLETE, onSourceSave);
						latch.start();
						//TODO lock interface
					}
					
				}
			}
			private function onSourceSave(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onSourceSave);
					if(latch.complite && latch.lastResult.complete){
						var tag:int=latch.lastToken.tag;
						if(tag && currentItem && currentItem.id==tag){
							if(latch.lastToken.add){
								currentItem.id=(latch.lastResult as DmlResult).lastId;
								currentItem.loaded=true;
								currentItem.edit();
								currentList.addItem(currentItem);
								//currentList.refresh();
							}else{
								//reset changed
								currentItem.loaded=true;
								currentItem.fbookService.loaded=true;
								currentItem.ftpService.loaded=true;
								currentItem.hotFolder.loaded=true;
								currentItem.webService.loaded=true;
							}
						}
					}
				}
			}

			private var itemsToSave:Array;

			private function saveResizes():void{
				var r:LabResize;
				var items:ArrayCollection= new ArrayCollection();
				for each (r in currentList){
					if (r.changed || !r.loaded) items.addItem(r);
				}
				if(items.length==0) return;
				var svcLR:LabResizeService=Tide.getInstance().getContext().byType(LabResizeService,true) as LabResizeService;
				var latch:DbLatch= new DbLatch(false);
				latch.addLatch(svcLR.persistBatch(items));
				latch.addEventListener(Event.COMPLETE, onRLSave);
				latch.start();
			}
			private function onRLSave(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onRLSave);
					if(latch.complite && latch.lastResult.complete){
						var r:LabResize;
						for each (r in currentList){
							if (r.changed || !r.loaded) r.loaded=true;
						}
					}
				}
			}

			private function saveTechPoints():void{
				var tp:TechPoint;
				itemsToSave=[];
				var sDao:TechPointDAO=new TechPointDAO();
				for each (var o:Object in currentList){
					tp=o as TechPoint;
					if(tp && (!tp.loaded || tp.changed)){
						itemsToSave.push({item:tp, dao:sDao});
					}
				}
				saveNext();
			}

			private function saveLab():void{
				if(!currentLab) return;
				var ldao:LabDAO=new LabDAO();
				if(!currentLab.loaded){
					ldao.addEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onSaveComplite);
					ldao.save(currentLab);
				}else{
					ldao.addEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onSaveComplite);
					ldao.update(currentLab);
				}
			}
			private function onSaveComplite(e:AsyncSQLEvent):void{
				var dao:BaseDAO=e.target as BaseDAO;
				if(dao) dao.removeEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onSaveComplite);
				if(e.result==AsyncSQLEvent.RESULT_COMLETED) detectState();;
			}

			private function saveNext():void{
				if(!itemsToSave || itemsToSave.length==0){
					//completed
					detectState();
					return;
				}
				var o:Object=itemsToSave.shift();
				var dao:BaseDAO=o.dao as BaseDAO;
				if(dao){
					dao.addEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onSave);
					dao.save(o.item);
				}
			}
			private function onSave(e:AsyncSQLEvent):void{
				var dao:BaseDAO=e.target as BaseDAO;
				if(dao) dao.removeEventListener(AsyncSQLEvent.ASYNC_SQL_EVENT, onSave);
				if(e.result==AsyncSQLEvent.RESULT_COMLETED) saveNext();
			}
			
			private function applyFilter():void{
				if(currentList) currentList.refresh();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:states>
		<s:State name="common"/>
		<s:State name="sourceList" stateGroups="list"/>
		<s:State name="labList" stateGroups="list"/>
		<!--<s:State name="prtCodeList" stateGroups="listEdit"/>-->
		<s:State name="prtCodeList"/>
		<s:State name="prResizeList" stateGroups="listEdit"/>
		<s:State name="bookSynonym"/>
		<s:State name="source" stateGroups="edit"/>
		<s:State name="lab"/>
		<s:State name="contentFilters"/>
		<s:State name="tech_point" stateGroups="listEdit"/>
		<s:State name="tech_layers"/>
	</s:states>

	<s:VGroup gap="10" width="100%" height="100%" paddingBottom="20">
		<s:TabBar id="tbView" top="0" left="0" height="20" change="{detectState()}">
			<mx:ArrayCollection>
				<fx:String>Общие настройки</fx:String> 
				<fx:String>Источники</fx:String> 
				<fx:String>Лабы</fx:String> 
				<fx:String>Каналы печати</fx:String> 
				<fx:String>Ресайз</fx:String> 
				<fx:String>Книги</fx:String> 
				<fx:String>Фильтры загрузки</fx:String> 
				<fx:String>Технологические точки</fx:String> 
				<fx:String>Листоподборка</fx:String> 
			</mx:ArrayCollection>
		</s:TabBar>
		<config:CommonConfig  includeIn="common" width="100%" height="100%"/>
		<config:BookSynonymView includeIn="bookSynonym" width="100%" height="100%"/>
		<config:LabPrintCodeView includeIn="prtCodeList" width="100%" height="100%"/>

		<config:ItemsGrid id="itemsGrid" includeIn="list,listEdit" editable="{gridEditable}"
						  currentData="{currentList}" currentColumns="{currentColumns}" 
						  width="100%" height="100%"/>
		<config:SourceEdit id="sourceEdit" includeIn="edit" currentItem="{currentItem}"
						   width="100%" height="100%"/>
		<config:LabEdit id="labEdit" includeIn="lab" currentItem="{currentLab}"
						width="100%" height="100%"/>
		<!--<config:TechConfig id="techConfig" includeIn="tech" width="100%" height="100%"/>-->
		<s:HGroup gap="10" includeIn="list, edit,listEdit,lab" 
				  verticalAlign="baseline" width="100%" horizontalAlign="left">
			<!--TODO implement DELETE-->
			<s:Button id="btEdit" label="Изменить" includeIn="list" enabled="{itemsGrid.currentItem}" click="btEdit_clickHandler(event)"/>
			<s:Button id="btAdd" label="Добавить" includeIn="list,listEdit" click="btAdd_clickHandler(event)"/>
			<s:Button id="btSave" label="Сохранить" includeIn="edit,listEdit,lab" click="btSave_clickHandler(event)"/>
			<s:Button id="btCancel" label="Отмена" includeIn="edit,listEdit,lab" click="{detectState()}"/>
		</s:HGroup>
		<config:TechLayerConfig includeIn="tech_layers" width="100%" height="100%"/>
		<config:ContentFilterConfig includeIn="contentFilters" width="100%" height="100%"/>
	</s:VGroup>
</s:Group>
