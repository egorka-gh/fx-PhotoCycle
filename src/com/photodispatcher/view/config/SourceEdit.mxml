<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:config="com.photodispatcher.view.config.*">

	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.DeliveryTypeDictionary;
			import com.photodispatcher.model.mysql.entities.Source;
			import com.photodispatcher.model.mysql.entities.SourceSvc;
			import com.photodispatcher.model.mysql.services.MailPackageService;
			import com.photodispatcher.util.ArrayUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			
			import org.granite.tide.Tide;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;

			[Bindable]
			private var deliveryTDAC:ArrayCollection;
			
			[Bindable]
			public var hideDelivery:Boolean=false;
			
			private var _currentItem:Source;
			[Bindable]
			public function get currentItem():Source{
				return _currentItem;
			}
			public function set currentItem(value:Source):void{
				_currentItem = value;
				typeListIdx=-1;
				if(_currentItem){
					_currentItem.edit();
					if(_currentItem.loc_type==Source.LOCATION_TYPE_SOURCE){
						currentState=hideDelivery?'noDelivery':'sourceFull';
					}else{
						currentState='lab';
					}
					typeList=Context.getAttribute('src_typeValueList') as ArrayCollection;
					typeListIdx=ArrayUtil.searchItemIdx('value',_currentItem.type,typeList.toArray());
					if(_currentItem.loc_type==Source.LOCATION_TYPE_SOURCE && !hideDelivery){
						//load delivery type dict
						var latch:DbLatch= new DbLatch();
						var service:MailPackageService=Tide.getInstance().getContext().byType(MailPackageService,true) as MailPackageService;
						latch.addEventListener(Event.COMPLETE, onDeliveryTDLoad);
						latch.addLatch(service.loadDeliveryTypeDictionar4Edit(_currentItem.id));
						latch.start();
					}
				}
			}
			private function onDeliveryTDLoad(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				deliveryTDAC=null;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onDeliveryTDLoad);
					if(latch.complite){
						deliveryTDAC=latch.lastDataAC;
					}
				}
			}

			
			[Bindable]
			private var typeList:IList;
			[Bindable]
			private var typeListIdx:int;

			protected function ddType_changeHandler(event:IndexChangeEvent):void{
				if(currentItem && ddType.selectedItem){
					currentItem.type=ddType.selectedItem.value;
					currentItem.changed=true;
				}
			}
			
			protected function tiCod_changeHandler(event:TextOperationEvent):void{
				if(currentItem.code.length>1) currentItem.code=currentItem.code.charAt(0);
				currentItem.changed=true
			}
			
			protected function btSaveDeliveryTD_clickHandler(event:MouseEvent):void{
				if(!deliveryTDAC) return;
				var items:ArrayCollection= new ArrayCollection();
				for each (var item:DeliveryTypeDictionary in deliveryTDAC){
					if(item && item.site_id>0) items.addItem(item);
				}
				if(items.length==0) return;
				var latch:DbLatch= new DbLatch();
				var service:MailPackageService=Tide.getInstance().getContext().byType(MailPackageService,true) as MailPackageService;
				latch.addLatch(service.persistsDeliveryTypeDictionaryBatch(items));
				latch.start();
			}
			
		]]>
	</fx:Script>

	<s:states>
		<s:State name="sourceFull" stateGroups="source"/>
		<s:State name="noDelivery" stateGroups="source"/>
		<s:State name="lab"/>
	</s:states>
	<s:VGroup width="100%" height="100%" gap="5">
		<s:Form height="100%">
			<s:layout>
				<s:FormLayout gap="-12"/>
			</s:layout>
			
			<s:FormItem label="Наименование">
				<s:TextInput id="tiName" text="@{currentItem.name}" change="{currentItem.changed=true}" width="200"/>
			</s:FormItem> 
			<s:FormItem label="Тип" required="true">
				<s:DropDownList id="ddType"  dataProvider="{typeList}" selectedIndex="{typeListIdx}" change="ddType_changeHandler(event)" width="200"/>
			</s:FormItem> 
			<s:FormItem label="Online">
				<s:CheckBox id="chbOnline" selected="@{currentItem.online}" change="{currentItem.changed=true}"/>
			</s:FormItem> 
			<s:FormItem label="Код" includeIn="source">
				<s:TextInput id="tiCod" text="@{currentItem.code}" change="tiCod_changeHandler(event)" width="20"/>
			</s:FormItem> 
			<s:FormItem label="Сайт" enabled="{currentItem.loaded}" includeIn="source">
				<config:SourceServiceEdit data="{currentItem.webService}"/>
			</s:FormItem> 
			<s:FormItem label="FTP" enabled="{currentItem.loaded}" includeIn="source">
				<config:SourceServiceEdit data="{currentItem.ftpService}"/>
			</s:FormItem> 
			<s:FormItem label="FBook" enabled="{currentItem.loaded}" includeIn="source">
				<config:SourceServiceEdit data="{currentItem.fbookService}"/>
			</s:FormItem> 
			<s:FormItem label="Hot folder" enabled="{currentItem.loaded}" includeIn="lab">
				<config:SourceServiceEdit data="{currentItem.hotFolder}"/>
			</s:FormItem> 
		</s:Form>

		<s:Label text="Типы доставки" includeIn="sourceFull"/>
		<config:ItemsGrid id="gDeliveryTD" editable="true"  includeIn="sourceFull"
						  currentData="{deliveryTDAC}"
						  currentColumns="{DeliveryTypeDictionary.gridColumns()}"
						  width="600"
						  height="100%"/>
		<s:HGroup width="600" horizontalAlign="right" includeIn="sourceFull">
			<s:Button id="btSaveDeliveryTD" label="Сохранить" click="btSaveDeliveryTD_clickHandler(event)"/>
		</s:HGroup>
		
	</s:VGroup>
</s:Group>
