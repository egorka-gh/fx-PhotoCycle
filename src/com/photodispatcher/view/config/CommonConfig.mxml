<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="group1_creationCompleteHandler(event)">

	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.IMRunerEvent;
			import com.photodispatcher.model.mysql.entities.AppConfig;
			import com.photodispatcher.model.mysql.entities.ContentFilter;
			import com.photodispatcher.model.mysql.entities.FieldValue;
			import com.photodispatcher.service.CleanService;
			import com.photodispatcher.shell.IMCommand;
			import com.photodispatcher.shell.IMRuner;
			import com.photodispatcher.shell.OORuner;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.util.StrUtil;
			import com.photodispatcher.view.CleanDatabasePopup;
			import com.photodispatcher.view.PasswPopup;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			import spark.events.TextOperationEvent;
			
			[Bindable]
			private var workFolder:String;
			[Bindable]
			private var prtPath:String;
			[Bindable]
			private var imPath:String;
			[Bindable]
			private var imRespond:String;
			[Bindable]
			private var imThreads:int=0;
			[Bindable]
			private var imPathValid:Boolean=false;
			[Bindable]
			private var forceStarHour:int=0;
			[Bindable]
			private var forceStarMinute:int=0;
			[Bindable]
			private var serverIP:String;
			[Bindable]
			private var bdServer:String;
			[Bindable]
			private var pdfPageLimit:int=100;
			//[Bindable]
			//private var pdfJpgQuality:int=100;
			[Bindable]
			private var reversPrint:Boolean=false;
			[Bindable]
			private var manualStart:Boolean=false;
			
			[Bindable]
			private var contentFiltersAC:ArrayCollection;
			//[Bindable]
			//private var currCFilter:ContentFilter;
			[Bindable]
			private var syncInterval:int;
			[Bindable]
			private var ftpConnectImeout:int;
			[Bindable]
			private var printRotated:Boolean;

			[Bindable]
			private var ooPathValid:Boolean;
			[Bindable]
			private var ooPath:String;
			[Bindable]
			private var printer:String;
			[Bindable]
			private var config:AppConfig;
			[Bindable]
			private var stateAc:ArrayCollection;
			[Bindable]
			private var cacheClipart:Boolean;

			[Bindable]
			public var altPDF:Boolean;

			public function setAltPDF(value:Boolean, silent:Boolean=false):Boolean{
				if(value){
					if(!imPath || !IMCommand.IM_CMD_JPG2PDF || !IMCommand.IM_CMD_PDF_TOOL){
						altPDF=false;
						if(tg_altPdf) tg_altPdf.selected=false;
						return false;
					}
					//check file exists
					var file:File=new File(imPath);
					if(!file.exists || !file.isDirectory){
						altPDF=false;
						if(tg_altPdf) tg_altPdf.selected=false;
						return false;
					}
					file=file.resolvePath(IMCommand.IM_CMD_JPG2PDF);
					if(!file.exists || file.isDirectory){
						if(!silent) Alert.show("Файл не найден. " +file.nativePath);
						altPDF=false;
						if(tg_altPdf) tg_altPdf.selected=false;
						return false;
					}
					file=file.parent.resolvePath(IMCommand.IM_CMD_PDF_TOOL);
					if(!file.exists || file.isDirectory){
						if(!silent) Alert.show("Файл не найден. " +file.nativePath);
						altPDF=false;
						if(tg_altPdf) tg_altPdf.selected=false;
						return false;
					}
				}
				
				altPDF = value;
				Context.setAttribute("altPDF", value);
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.altPDF = value;
				so.flush();
				
				return altPDF;
			}

			
			protected function group1_creationCompleteHandler(event:FlexEvent):void{
				
				imPath=Context.getAttribute('imPath');
				workFolder=Context.getAttribute('workFolder');
				prtPath=Context.getAttribute('prtPath');
				config=Context.config;
				
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				if (so.size>0){
					imThreads=so.data.imThreads;
					serverIP=so.data.serverIP;
					bdServer=so.data.bdServer;
				}

				if(!imThreads || imThreads<0) imThreads=0;
				setAltPDF(Boolean(so.data.altPDF),true);;
				pingIM();
				
				//so= SharedObject.getLocal('appProps','/');
				forceStarHour=so.data.forceStarHour;
				forceStarMinute=so.data.forceStarMinute;
				if(so.data.pdfPageLimit) pdfPageLimit=so.data.pdfPageLimit;
				if(!pdfPageLimit) pdfPageLimit=100;
				//if(so.data.pdfJpgQuality) pdfJpgQuality=so.data.pdfJpgQuality;
				//if(!pdfJpgQuality) pdfJpgQuality=100;
				reversPrint=so.data.reversPrint;
				manualStart=so.data.manualStart;
				//contentFiltersAC=new ArrayCollection(ContentFilter.filters);
				//currCFilter=Context.getAttribute('contentFilter') as ContentFilter;
				syncInterval=so.data.syncInterval;
				if(!syncInterval) syncInterval=10;

				ftpConnectImeout=so.data.ftpConnectImeout;
				if(!ftpConnectImeout) ftpConnectImeout=15;

				printRotated=Boolean(so.data.printRotated);
				cacheClipart=Boolean(so.data.cacheClipart);
				
				ooPath=so.data.ooPath;
				printer=so.data.printer;
				var oo:OORuner= new OORuner();
				ooPathValid=oo.check(ooPath);
				
				stateAc= Context.getAttribute('stateList');
				if(config && stateAc){
					var fv:FieldValue=ArrayUtil.searchItem('value',config.clean_fs_state,stateAc.source) as FieldValue;
					if(ddCleanFsState) ddCleanFsState.selectedItem=fv;
				}
				cleaner= new CleanService();
			}
			
			private function pingIM():void{
				if(imPath){
					var f:File=File.applicationStorageDirectory;
					//var im:IMRuner= new IMRuner(imPath,Context.getAttribute('workFolder'));
					var im:IMRuner= new IMRuner(imPath,f.nativePath);
					im.addEventListener(IMRunerEvent.IM_COMPLETED, onImPing);
					im.ping(imPath);
				}
			}
			private function onImPing(e:IMRunerEvent):void{
				var im:IMRuner=e.target as IMRuner;
				im.removeEventListener(IMRunerEvent.IM_COMPLETED, onImPing);
				imPathValid=!e.hasError;
				imRespond=e.error;
			}

			protected function btWrkFolder_clickHandler(event:MouseEvent):void{
				//browse
				var sPath:String='';
				var file:File = File.userDirectory;
				file.addEventListener(Event.SELECT,wrkFolderSet);
				file.browseForDirectory('Выбирите рабочую папку');
			}
			protected function wrkFolderSet(event:Event):void{
				var file:File = event.target as File;
				if(file){
					file.removeEventListener(Event.SELECT,wrkFolderSet);
					//conf.wrk_path=fl.nativePath;
					workFolder=file.nativePath;
					//save last selection
					var so:SharedObject = SharedObject.getLocal('appProps','/');
					so.data.workFolder = workFolder;
					so.flush();  
					Context.setAttribute("workFolder", workFolder);
				}
			}
			
			protected function btPrtFolder_clickHandler(event:MouseEvent):void{
				//browse
				var file:File = File.userDirectory;
				file.addEventListener(Event.SELECT,prtFolderSet);
				file.browseForDirectory('Выбирите папку для подготовленных заказов');
			}
			protected function prtFolderSet(event:Event):void{
				var file:File = event.target as File;
				if(file){
					file.removeEventListener(Event.SELECT,prtFolderSet);
					//conf.wrk_path=fl.nativePath;
					prtPath=file.nativePath;;
					//save last selection
					var so:SharedObject = SharedObject.getLocal('appProps','/');
					so.data.prtPath = prtPath;
					so.flush();  
					Context.setAttribute("prtPath", prtPath);
				}
			}

			
			protected function btIMFolder_clickHandler(event:MouseEvent):void{
				//browse
				var file:File = File.userDirectory;
				file.addEventListener(Event.SELECT,imFolderSet);
				file.browseForDirectory('Выбирите папку ImageMagick');
			}
			protected function imFolderSet(event:Event):void{
				imPathValid=false;
				var file:File = event.target as File;
				if(file){
					file.removeEventListener(Event.SELECT,imFolderSet);
					imPath=file.nativePath;

					//save last selection
					var so:SharedObject = SharedObject.getLocal('appProps','/');
					so.data.imPath = file.nativePath;
					so.flush();  
					Context.setAttribute("imPath", imPath);

					if(imPath) pingIM();
				}
			}
			
			protected function tiIMThreads_changeHandler(event:TextOperationEvent):void{
				imThreads=int(tiIMThreads.text);
				//save last selection
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.imThreads = imThreads;
				so.flush();  
				Context.setAttribute("imThreads", imThreads);
			}
			
			protected function btBdOptimize_clickHandler(event:MouseEvent):void{
				/*
				var dao:BaseDAO= new BaseDAO();
				dao.vacuumDatabase();
				dao.analyzeDatabase();
				*/
			}
			
			private static function leadingZero(value:Number):String{
				return StrUtil.lPad(value.toString(),2);
			}

			protected function setForceStart():void{
				//forceStarHour=nsForceStarHour.value;
				//forceStarMinute=nsForceStarMinute.value;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.forceStarHour = forceStarHour;
				so.data.forceStarMinute = forceStarMinute;
				Context.setAttribute("forceStarHour", forceStarHour);
				Context.setAttribute("forceStarMinute", forceStarMinute);
			}
			
			protected function tiServerIP_changeHandler(event:TextOperationEvent):void{
				//save last selection
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.serverIP = serverIP;
				so.flush();  
				Context.setAttribute("serverIP", serverIP);
			}
				
			protected function nsPdfPageLimit_changeHandler(event:Event):void{
				var newVal:int=nsPdfPageLimit.value;
				if(!newVal) return;
				pdfPageLimit=newVal;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.pdfPageLimit = pdfPageLimit;
				so.flush();  
				Context.setAttribute("pdfPageLimit", pdfPageLimit);
			}

			protected function tg_reversPrint_changeHandler(event:Event):void{
				reversPrint=tg_reversPrint.selected;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.reversPrint = reversPrint;
				so.flush();  
				Context.setAttribute('reversPrint', reversPrint);
			}
	
			/*
			protected function cbCFilter_changeHandler(event:IndexChangeEvent):void{
				currCFilter=cbCFilter.selectedItem as ContentFilter;
				if(currCFilter){
					var so:SharedObject = SharedObject.getLocal('appProps','/');
					so.data.cFilterId=currCFilter.id;
					so.flush();  
				}
				if(currCFilter){
					conf.content_filter=currCFilter.id;
				}else{
					conf.content_filter=0;
				}
				Context.setAttribute('contentFilter',currCFilter);
			}
			*/
			
			protected function btSetPass_clickHandler(event:MouseEvent):void{
				var passPop:PasswPopup= new PasswPopup();
				passPop.addEventListener(PopUpEvent.CLOSE, onCfgPass);
				passPop.show('',true);
			}
			protected function onCfgPass(event:PopUpEvent):void{
				var passPop:PasswPopup=event.target as PasswPopup;
				if(!passPop) return;
				passPop.removeEventListener(PopUpEvent.CLOSE, onCfgPass);
				if(event.commit){
					var newPass:String=passPop.pass;
					var so:SharedObject = SharedObject.getLocal('appProps','/');
					so.data.configPass = newPass;
					so.flush();  
					Context.setAttribute('configPass', newPass);
				}
			}

			protected function btOffPass_clickHandler(event:MouseEvent):void{
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.configPass = '';
				so.flush();  
				Context.setAttribute('configPass', '');
			}
			
			/*
			protected function btBdClean_clickHandler(event:MouseEvent):void{
				var popup:CleanDatabasePopup= new CleanDatabasePopup();
				popup.show();
			}
			*/
			
			protected function reconnectBdServer():void{
				if(bdServer){
					Alert.show('Перезапустите программу для подключения к серверу "'+bdServer+'"','Подключение к серверу',4,null,onReconnectBdServerAlert);
				}else{
					Alert.show('Не указан сервер базыданных');
				}
			}
			
			private function onReconnectBdServerAlert(e:CloseEvent):void{
				FlexGlobals.topLevelApplication.exit();
			}
			
			protected function tiBdServer_enterHandler(event:FlexEvent):void{
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				bdServer=tiBdServer.text;
				so.data.bdServer = bdServer;
				so.flush();  
				reconnectBdServer();
			}
			
			protected function tiSyncInterval_changeHandler(event:TextOperationEvent):void{
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				syncInterval=int(tiSyncInterval.text);
				if(syncInterval>0){
					Context.setAttribute('syncInterval', syncInterval);
					so.data.syncInterval = syncInterval;
					so.flush();  
				}
			}
			
			protected function tg_rotatePrint_changeHandler(event:Event):void{
				//printRotated =tg_rotatePrint.selected;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.printRotated = printRotated;
				so.flush();  
				Context.setAttribute('printRotated', printRotated);
			}
			
			protected function btOOFolder_clickHandler(event:MouseEvent):void{
				//browse
				var file:File = File.userDirectory;
				file.addEventListener(Event.SELECT,onOOFolderSet);
				file.browseForDirectory('Выбирите папку ImageMagick');
			}
			protected function onOOFolderSet(event:Event):void{
				ooPathValid=false;
				var file:File = event.target as File;
				if(file){
					file.removeEventListener(Event.SELECT,onOOFolderSet);
					ooPath=file.nativePath;
					var oo:OORuner= new OORuner();
					if(oo.check(ooPath)){
						ooPathValid=true;
						ooPath=oo.ooPath;
						//save last selection
						var so:SharedObject = SharedObject.getLocal('appProps','/');
						so.data.ooPath = ooPath;
						so.flush();  
					}
				}
			}
			
			protected function tiPrinter_changeHandler(event:TextOperationEvent):void{
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.printer = printer;
				so.flush();
				Context.setAttribute('printer',printer);
			}
			
			protected function btOOFolderClear_clickHandler(event:MouseEvent):void{
				//clear oo path
				ooPathValid=false;
				ooPath='';
				Context.setAttribute('ooPath','');
				//save last selection
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.ooPath = ooPath;
				so.flush();  
			}
			
			/*
			protected function nsJpgQuality_changeHandler(event:Event):void{
				var newVal:int=nsJpgQuality.value;
				if(!newVal) return;
				pdfJpgQuality=newVal;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.pdfJpgQuality = pdfJpgQuality;
				so.flush();  
				Context.setAttribute("pdfJpgQuality", pdfJpgQuality.toString());
			}
			*/
			
			protected function tiIMFolder_enterHandler(event:FlexEvent):void{
				imPathValid=false;
				imPath=tiIMFolder.text;
				//if(!imPath) return
				//save last selection
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.imPath = imPath;
				so.flush();  
				Context.setAttribute("imPath", imPath);
				
				if(imPath) pingIM();
			}
			
			protected function btSetTPass_clickHandler(event:MouseEvent):void{
				var passPop:PasswPopup= new PasswPopup();
				passPop.addEventListener(PopUpEvent.CLOSE, onTPass);
				passPop.show('',true);
			}
			protected function onTPass(event:PopUpEvent):void{
				var passPop:PasswPopup=event.target as PasswPopup;
				if(!passPop) return;
				passPop.removeEventListener(PopUpEvent.CLOSE, onTPass);
				if(event.commit){
					var newPass:String=passPop.pass;
					var so:SharedObject = SharedObject.getLocal('appProps','/');
					so.data.ticketPass = newPass;
					so.flush();  
					Context.setAttribute('ticketPass', newPass);
				}
			}
			
			protected function btOffTPass_clickHandler(event:MouseEvent):void{
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.ticketPass = '';
				so.flush();  
				Context.setAttribute('ticketPass', '');
			}
			
			protected function ddCleanFsState_changeHandler(event:IndexChangeEvent):void{
				var fv:FieldValue=ddCleanFsState.selectedItem as FieldValue;
				if(fv){
					config.clean_fs_state=fv.value;
				}
			}
			
			[Bindable]
			private var cleaner:CleanService;
			protected function btCleanFS_clickHandler(event:MouseEvent):void{
				if(CleanService.busy) return;
				cleaner.cleanFileSystem();
			}
			
			protected function tg_manualStart_changeHandler(event:Event):void{
				manualStart=tg_manualStart.selected;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.manualStart = manualStart;
				so.flush();  
				Context.setAttribute('manualStart', manualStart);
			}
			
			protected function tg_cacheClipart_changeHandler(event:Event):void{
				cacheClipart=tg_cacheClipart.selected;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.cacheClipart = cacheClipart;
				so.flush();  
				Context.setAttribute('cacheClipart', cacheClipart);
			}
			
			protected function nsftpConnectImeout_changeHandler(event:Event):void{
				if(ftpConnectImeout<15) ftpConnectImeout=15;
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.ftpConnectImeout = ftpConnectImeout;
				so.flush();  
				Context.setAttribute('ftpConnectImeout', ftpConnectImeout);
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup>
		<s:Form>
			<s:layout>
				<s:FormLayout gap="-9"/>
			</s:layout>

			<s:FormItem label="Сервер базы данных">
					<s:TextInput id="tiBdServer" text="{bdServer}" width="300" enter="tiBdServer_enterHandler(event)"/>
			</s:FormItem> 

			<s:FormItem label="Рабочая папка">
				<mx:HBox>
					<!--<s:TextInput id="tiWrkFolder" text="{conf.wrk_path}" editable="false" width="400"/>-->
					<s:TextInput id="tiWrkFolder" text="{workFolder}" editable="false" width="400"/>
					<s:Button id="btWrkFolder" label="..." click="btWrkFolder_clickHandler(event)"/>
				</mx:HBox>
			</s:FormItem> 

			<s:FormItem label="Папка подготовленных заказов">
				<mx:HBox>
					<s:TextInput id="tiPrtFolder" text="{prtPath}" editable="false" width="400"/>
					<s:Button id="btPrtFolder" label="..." click="btPrtFolder_clickHandler(event)"/>
				</mx:HBox>
			</s:FormItem> 
			
			<s:FormItem label="Очистка папок">
				<s:CheckBox id="tgCleanFS" selected="@{config.clean_fs}"/>
				<s:HGroup gap="5" enabled="{config.clean_fs}" verticalAlign="baseline">
					<s:Label text="Статус"/>
					<s:DropDownList id="ddCleanFsState" dataProvider="{stateAc}" change="ddCleanFsState_changeHandler(event)"/>
					
					<s:Spacer width="5"/>
					<s:Label text="Дней >"/>
					<s:NumericStepper value="@{config.clean_fs_days}" minimum="0" maximum="360"/>

					<s:Spacer width="5"/>
					<s:Label text="Норитсу дней >"/>
					<s:NumericStepper value="@{config.clean_nr_days}" minimum="0" maximum="360"/>

					<s:Spacer width="5"/>
					<s:Label text="Старт в"/>
					<s:NumericStepper value="@{config.clean_fs_hour}" minimum="0" maximum="23" width="40"/>
					<s:Label text="часов"/>
				
				</s:HGroup>
				<s:HGroup gap="10" enabled="{config.clean_fs}" verticalAlign="bottom">
					<s:Button id="btCleanFS" label="Выполнить" enabled="{!CleanService.busy}" click="btCleanFS_clickHandler(event)"/>
					<mx:ProgressBar label="" labelPlacement="right" labelWidth="0" horizontalGap="0" 
									mode="event" source="{cleaner}" width="200"/>
					<s:Label text="{cleaner.state}" width="250"/>
				</s:HGroup>
			</s:FormItem>

			<!--<s:FormItem label="Фильтр загрузки">
				<s:ComboBox id="cbCFilter" selectedItem="{currCFilter}" dataProvider="{contentFiltersAC}" labelField="name" change="cbCFilter_changeHandler(event)"/>
			</s:FormItem>--> 

			<!--<s:FormItem label="IP компьютера">
				<s:TextInput id="tiServerIP" text="@{serverIP}" editable="true"  width="300" change="tiServerIP_changeHandler(event)"/>
			</s:FormItem> -->

			<s:FormItem label="Интервал синхронизации (мин)">
				<s:TextInput id="tiSyncInterval" text="{syncInterval}"
							 restrict="0123456789"
							 change="tiSyncInterval_changeHandler(event)"
							 width="50"/>
			</s:FormItem> 
			<s:FormItem label="Ручной запуск сервисов">
				<s:HGroup gap="5" verticalAlign="baseline">
					<s:CheckBox id="tg_manualStart" selected="{manualStart}" change="tg_manualStart_changeHandler(event)"/>
					<s:Spacer width="5"/>
					<s:Label text="Таймаут подключения FTP (сек)"/>
					<s:NumericStepper id="nsftpConnectImeout" value="@{ftpConnectImeout}" minimum="15" maximum="90" change="nsftpConnectImeout_changeHandler(event)"/>	
				</s:HGroup>
			</s:FormItem>
			<!--<s:FormItem label="Таймаут подключения FTP (сек)">
				<s:NumericStepper id="nsftpConnectImeout" value="@{ftpConnectImeout}" minimum="15" maximum="90" change="nsftpConnectImeout_changeHandler(event)"/>
			</s:FormItem> -->

			<!--<s:FormItem label="Принудительный старт закачки после">
				<s:HGroup gap="3" verticalAlign="baseline">
					<s:NumericStepper id="nsForceStarHour" value="@{forceStarHour}" 
									  minimum="0" maximum="23" valueFormatFunction="{leadingZero}" width="40" change="{setForceStart()}"/>
					<s:Label text=":" fontWeight="bold"/>
					<s:NumericStepper id="nsForceStarMinute"  value="@{forceStarMinute}"
									  minimum="0" maximum="59" valueFormatFunction="{leadingZero}" width="40" change="{setForceStart()}"/>
				</s:HGroup>
			</s:FormItem> -->

			<s:FormItem label="Папка ImageMagick">
				<s:VGroup gap="3">
					<s:VGroup gap="3">
						<s:HGroup gap="5">
							<s:TextInput id="tiIMFolder" text="{imPath}" width="400" color="{imPathValid?0:0xff0000}" enter="tiIMFolder_enterHandler(event)"/>
							<s:Button id="btIMFolder" label="..." click="btIMFolder_clickHandler(event)"/>
						</s:HGroup>
						<s:Label text="{imRespond}" color="{imPathValid?0:0xff0000}"/>
					</s:VGroup>
					<s:HGroup gap="5" verticalAlign="baseline">
						<s:Label text="Кол потоков"/>
						<s:TextInput id="tiIMThreads" text="{imThreads.toString()}" restrict="0123456789" width="50" enabled="{imPathValid}"
									 change="tiIMThreads_changeHandler(event)"/>
					</s:HGroup>
				</s:VGroup>
			</s:FormItem> 

			<s:FormItem label="Кэшировать клипарт">
				<s:CheckBox id="tg_cacheClipart" selected="{cacheClipart}" change="tg_cacheClipart_changeHandler(event)"/>
			</s:FormItem> 

			<s:FormItem label="Альтернативная сборка в PDF" enabled="{Boolean(imPath)}">
				<s:CheckBox id="tg_altPdf" selected="{altPDF}" change="{setAltPDF(tg_altPdf.selected)}"/>
			</s:FormItem> 

			<s:FormItem label="Сжатие jpg в PDF файле">
				<!--<s:NumericStepper id="nsJpgQuality" value="@{pdfJpgQuality}" 
								  minimum="70" maximum="100" snapInterval="1" width="50" change="nsJpgQuality_changeHandler(event)"/>-->
				<s:NumericStepper id="nsJpgQuality" value="@{config.pdf_quality}" 
								  minimum="70" maximum="100" snapInterval="1" width="50"/>
			</s:FormItem> 

			<s:FormItem label="Кол-во страниц в PDF файле">
				<s:NumericStepper id="nsPdfPageLimit" value="@{pdfPageLimit}" 
								  minimum="0" maximum="10000" snapInterval="10" width="50" change="nsPdfPageLimit_changeHandler(event)"/>
			</s:FormItem> 

			<s:FormItem label="Реверсная печать">
				<s:CheckBox id="tg_reversPrint" selected="{reversPrint}" change="tg_reversPrint_changeHandler(event)"/>
			</s:FormItem> 

			<s:FormItem label="Переворачивать при печати на Noritsu">
				<s:CheckBox id="tg_rotatePrint" selected="@{printRotated}" change="tg_rotatePrint_changeHandler(event)"/>
			</s:FormItem> 

			<s:FormItem label="Параметры печати">
				<s:HGroup width="100%" gap="5" verticalAlign="baseline">
					<s:Label text="Путь к OpenOffice"/>
					<s:TextInput id="tiOOFolder" text="{ooPath}" editable="false" width="400" color="{ooPathValid?0:0xff0000}" textAlign="left"/>
					<s:Button id="btOOFolder" label="..." click="btOOFolder_clickHandler(event)"/>
					<s:Button id="btOOFolderClear" label="x" click="btOOFolderClear_clickHandler(event)"/>
				</s:HGroup>
				<s:HGroup width="100%" gap="5" verticalAlign="baseline">
					<s:Label text="Принтер (если не указан, используется принтер по умолчанию)"/>
					<s:TextInput id="tiPrinter" text="@{printer}" width="210" textAlign="left" change="tiPrinter_changeHandler(event)"/>
				</s:HGroup>
				
			</s:FormItem> 

			<s:FormItem label="Защита конфигурации">
				<s:HGroup gap="10">
					<s:Button id="btSetPass" label="Назначить пароль" click="btSetPass_clickHandler(event)"/>
					<s:Button id="btOffPass" label="Снять защиту" click="btOffPass_clickHandler(event)"/>
				</s:HGroup>
			</s:FormItem> 

			<s:FormItem label="Пароль тикета">
				<s:HGroup gap="10">
					<s:Button id="btSetTPass" label="Назначить пароль" click="btSetTPass_clickHandler(event)"/>
					<s:Button id="btOffTPass" label="Снять защиту" click="btOffTPass_clickHandler(event)"/>
				</s:HGroup>
			</s:FormItem> 

		</s:Form>
		<!--<s:DropDownList skinClass="com.photodispatcher.view.skins.ButtonDropDownListSkin" width="50"/>-->
		<s:HGroup gap="10" horizontalAlign="right" width="100%" paddingRight="10">
			<s:Button id="btSaveConfig" label="Сохранить" click="{Context.saveConfig()}"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
