<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="{init()}">
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.PrintEvent;
			import com.photodispatcher.factory.LabBuilder;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.Lab;
			import com.photodispatcher.model.mysql.entities.LabRoll;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.PrnStrategy;
			import com.photodispatcher.model.mysql.entities.Roll;
			import com.photodispatcher.model.mysql.entities.Source;
			import com.photodispatcher.model.mysql.services.LabService;
			import com.photodispatcher.model.mysql.services.PrintGroupService;
			import com.photodispatcher.print.LabGeneric;
			import com.photodispatcher.print.PrintQueueManager;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.view.menu.GridContexMenu;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			private var _currLab:LabGeneric;

			[Bindable]
			public function get currLab():LabGeneric{
				return _currLab;
			}

			public function set currLab(value:LabGeneric):void{
				_currLab = value;
				refresh();
			}
			
			[Bindable]
			private var queueList:ArrayCollection=new ArrayCollection();
			[Bindable]
			private var pgList:ArrayCollection=new ArrayCollection();
		
			[Bindable]
			private var printManager:PrintQueueManager;
			
			public function init():void{
				if(!printManager){
					printManager=PrintQueueManager.instance;
					//printManager.addEventListener(PrintEvent.MANAGER_ERROR_EVENT, onManagerError);
				}
				/* if(printManager && printManager.labs && printManager.labs.length>0) lstLabs.selectedItem=printManager.labs.getItemAt(0); */
				ddStrategy.dataProvider=Context.getAttribute('strategy_type_manualValueList') as ArrayCollection;
			}

			public function refresh():void{
				if(!printManager || !printManager.labs || printManager.labs.length==0 || !currLab || !strategyType) return;
				var onlyBooks:int=0;
				if(tgBooksOnly && tgBooksOnly.selected) onlyBooks=1;

				queueList=null;
				dgRolls.selectedItem=null;
				var svc:LabService=Tide.getInstance().getContext().byType(LabService,true) as LabService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onLoadQueueByLab);
				latch.addLatch(svc.loadQueueByLab(currLab.id, strategyType, onlyBooks,1));
				
				var svc2:PrintGroupService=Tide.getInstance().getContext().byType(PrintGroupService,true) as PrintGroupService;
				var latch2:DbLatch=new DbLatch();
				latch2.addEventListener(Event.COMPLETE,onLoadPgs);
				latch2.addLatch(svc2.loadByState(OrderState.PRN_WAITE,OrderState.PRN_WAITE+1));
				latch2.start();

				latch.join(latch2);
				latch.start();
			}
			private function onLoadPgs(evt:Event):void{
				var latch:DbLatch= evt.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onLoadPgs);
					if(!latch.complite) return;
					pgList=latch.lastDataAC;
					pgList.filterFunction=filterPGList;
					pgList.refresh();
				}
			}
			private function onLoadQueueByLab(evt:Event):void{
				var latch:DbLatch= evt.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onLoadQueueByLab);
					if(!latch.complite) return;
					queueList=latch.lastDataAC;
					if(queueList && queueList.length>0){
						dgRolls.selectedItem=queueList.getItemAt(0);
						//calc time
						var it:PrintGroup;
						if(currLab && currLab.soft_speed){
							for each(it in queueList){
								if(it && it.height) it.printQueueTime=it.height/(currLab.soft_speed*60);
							}
						}
					}
					applyFilter();
				}
			}
			
			private function filterPGList(item:Object):Boolean {
				var pg:PrintGroup=item as PrintGroup;
				if(!pg) return false;
				if(!dgRolls || !strategyType) return false;
				
				var fi:PrintGroup=dgRolls.selectedItem as PrintGroup;
				if(!fi) return false;
				
				if(tgBooksOnly && tgBooksOnly.selected && (pg.book_type<1 || pg.book_type>3)) return false;
				if(pg.is_reprint!=fi.is_reprint) return false;
				
				if(strategyType==PrnStrategy.STRATEGY_BYPART){
					if(pg.book_part!=fi.book_part || pg.sheet_num!=fi.sheet_num || pg.alias!=fi.alias) return false;
				}else if(strategyType==PrnStrategy.STRATEGY_BYROLL){
					if(pg.width!=fi.width || pg.paper!=fi.paper) return false;
				}else{
					return false;
				}
				
				return true;
			}

			private function applyFilter():void{
				pgList.refresh();
			}

			protected function lstLab_changeHandler(event:IndexChangeEvent):void{
				refresh();
			}
			
			protected function dgRolls_selectionChangeHandler(event:GridSelectionEvent):void{
				applyFilter();
			}

			[Bindable]
			private var strategyType:int=0;
			protected function ddStrategy_changeHandler(event:IndexChangeEvent):void{
				if(ddStrategy.selectedItem){
					strategyType=ddStrategy.selectedItem.value;
					refresh();
				}else{
					strategyType=0;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!--<s:ArrayCollection id="acLabRolls" source="{currLab.printQueue.rolls}"/>-->	
	</fx:Declarations>
	
	<s:VGroup gap="5" width="100%" height="100%">
		<s:HGroup width="100%" verticalAlign="baseline">
			<s:Label text="Очередь по"/>
			<s:DropDownList id="ddStrategy" change="ddStrategy_changeHandler(event)"/>
			<s:Spacer width="5"/>
			<s:Label text="Только книги"/>
			<s:CheckBox id="tgBooksOnly" selected="true"/>
			<s:Spacer width="20"/>
			<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refresh()}"
					  cornerRadius="4" width="22" height="22" baseline="4"/>
		</s:HGroup>
		<s:HGroup gap="10" width="100%" height="100%" verticalAlign="middle">
			<s:DataGrid id="dgRolls" width="100%" height="100%"
						dataProvider="{queueList}" 
						columns="{PrintGroup.printQueueStrategyColumns(strategyType)}"
						selectionMode="singleRow" locale="ru_RU"
						selectionChange="dgRolls_selectionChangeHandler(event)"/>
			<s:Button id="btCreateQueue" label="Печать" enabled="false"/>
		</s:HGroup>
		
		<s:Spacer height="5"/>
		<s:Label text="Группы печати"/>
		<s:DataGrid id="dgPGroups" selectionMode="multipleRows" width="100%" height="100%"
					dataProvider="{pgList}" locale="ru_RU" columns="{PrintGroup.gridColumns(true)}"/>
	</s:VGroup>
	
</s:Group>
