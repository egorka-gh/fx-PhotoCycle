<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="com.photodispatcher.interfaces.IMessageRecipient"
		 creationComplete="{init()}"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.PrintEvent;
			import com.photodispatcher.factory.LabBuilder;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.Lab;
			import com.photodispatcher.model.mysql.entities.LabRoll;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.PrnQueue;
			import com.photodispatcher.model.mysql.entities.PrnStrategy;
			import com.photodispatcher.model.mysql.entities.Roll;
			import com.photodispatcher.model.mysql.entities.Source;
			import com.photodispatcher.model.mysql.entities.messenger.CycleMessage;
			import com.photodispatcher.model.mysql.services.LabService;
			import com.photodispatcher.model.mysql.services.PrintGroupService;
			import com.photodispatcher.model.mysql.services.PrnStrategyService;
			import com.photodispatcher.print.LabGeneric;
			import com.photodispatcher.print.PrintQueueManager;
			import com.photodispatcher.service.messenger.MessengerGeneric;
			import com.photodispatcher.util.ArrayUtil;
			import com.photodispatcher.view.menu.GridContexMenu;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;

			
			protected function init():void{
				MessengerGeneric.subscribe(MessengerGeneric.TOPIC_PRNQUEUE,this);
			}

			private var _currLab:LabGeneric;
			[Bindable]
			public function get currLab():LabGeneric{
				return _currLab;
			}

			public function set currLab(value:LabGeneric):void{
				_currLab = value;
				refresh();
			}
			
			[Bindable]
			private var queueList:ArrayCollection=new ArrayCollection();
		
			public function refresh():void{
				if(!currLab) return;
				if(dgQueueComplited) dgQueueComplited.selectedItem=null;
				
				queueList=null;

				var svcs:PrnStrategyService=Tide.getInstance().getContext().byType(PrnStrategyService,true) as PrnStrategyService;
				var latch:DbLatch= new DbLatch();
				latch.addEventListener(Event.COMPLETE,onloadPrnQueues);
				latch.addLatch(svcs.loadQueues());
				latch.start();
			}
			private function onloadPrnQueues(evt:Event):void{
				var latch:DbLatch= evt.target as DbLatch;
				if(!latch) return;
				latch.removeEventListener(Event.COMPLETE,onloadPrnQueues);
				if(latch.complite){
					queueList=latch.lastDataAC;
					queueList.filterFunction=filterQueueList;
					applyFilter();
				}
			}
			
			
			private function filterQueueList(item:Object):Boolean {
				var it:PrnQueue=item as PrnQueue;
				if(!it || !currLab) return false;
				//check lab or lab type when lab not set
				if(it.lab!=currLab.id && !(it.lab==0 && it.lab_type==currLab.src_type)) return false;
				return true;
			}
			
			private function applyFilter():void{
				if(queueList) queueList.refresh();
			}
			
			protected function btDeleteQueue_clickHandler(event:MouseEvent):void{
				var it:PrnQueue=dgQueueComplited.selectedItem as PrnQueue;
				if(!it) return;
				PrintQueueManager.instance.deletePrnQueue(it.id);
			}
			
			public function getMessage(message:CycleMessage):void{
				if(message){
					if(message.command==MessengerGeneric.CMD_PRNQUEUE_REFRESH) refresh();
				}
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
			
	</fx:Declarations>
	
	<s:VGroup gap="5" width="100%" height="100%">
		<s:HGroup width="100%" verticalAlign="baseline">
			<s:Label text="Очереди"/>
			<s:Spacer width="20"/>
			<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refresh()}"
					  cornerRadius="4" width="22" height="22" baseline="4"/>
		</s:HGroup>
		<s:HGroup gap="10" width="100%" height="100%" verticalAlign="middle">
			<s:DataGrid id="dgQueueComplited" width="100%" height="100%"
						selectionMode="singleRow" locale="ru_RU"
						dataProvider="{queueList}"
						columns="{PrnQueue.gridColumns()}"/>
			<s:Button id="btDeleteQueue" label="Удалить" enabled="{dgQueueComplited.selectedItem}"
					  click="btDeleteQueue_clickHandler(event)"/>
		</s:HGroup>
		
		<s:Spacer height="5"/>
		<s:Label text="Группы печати"/>
		<s:DataGrid id="dgQueuePgComplited" width="100%" height="100%"
					selectionMode="singleRow" locale="ru_RU"
					dataProvider="{dgQueueComplited.selectedItem.printGroups}"
					columns="{PrintGroup.printQueueColumns()}"/>
	</s:VGroup>
	
</s:Group>
