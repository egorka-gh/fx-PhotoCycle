<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="{init()}"
		 minWidth="400" minHeight="300">
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.services.OrderService;
			import com.photodispatcher.model.mysql.services.PrintGroupService;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;
						
			private function init():void{
				refresh();
			}
			
			[Bindable]
			protected var waiteLimit:int;
			[Bindable]
			protected var candidatesAC:ArrayCollection;
			
			protected function createCompo():void{
				var latch:DbLatch=new DbLatch();
				var svc:OrderService =Tide.getInstance().getContext().byType(OrderService,true) as OrderService;
				latch.addEventListener(Event.COMPLETE,oncreateCompo);
				latch.addLatch(svc.createCompo(waiteLimit));
				latch.start();
			}
			private function oncreateCompo(evt:Event):void{
				var latch:DbLatch= evt.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,oncreateCompo);
					if(latch.complite){
						refresh();
					}
				}
			}
			protected function refresh():void{
				var svc:PrintGroupService=Tide.getInstance().getContext().byType(PrintGroupService,true) as PrintGroupService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onrefresh);
				latch.addLatch(svc.loadByState(OrderState.COMPO_WAITE,OrderState.COMPO_WAITE+1));
				latch.start();
			}
			private function onrefresh(evt:Event):void{
				var latch:DbLatch= evt.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onrefresh);
					if(latch.complite){
						candidatesAC = latch.lastDataAC;
					}
				}
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout gap="5"/>
	</s:layout>
	
			<s:HGroup width="100%" gap="7" verticalAlign="baseline">
				<s:Label text="Максимальное время ожидания (ч.)"/>
				<s:NumericStepper value="@{waiteLimit}" minimum="0" maximum="24"/>
				<s:Spacer width="100%"/>
				
				<s:Button id="btStart" icon="assets/play.png" click="{createCompo()}" 
						  toolTip="Собрать текущие комбо"
						  cornerRadius="3" width="30" height="30" baseline="4"/>
				<s:Spacer width="10"/>
				<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refresh()}"
						  cornerRadius="3" width="30" height="30" baseline="4"/>
			</s:HGroup>
			<s:DataGrid id="dgProcess" width="100%" height="100%"
						selectionMode="singleRow"  locale="ru_RU" 
						dataProvider="{candidatesAC}" columns="{PrintGroup.gridColumns()}"/>
</s:Group>
