<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Metadata>
		[Event(name="connect", type="flash.events.Event")]
		[Event(name="close", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.jxl.chat.vo.InstructionConstants;
			import com.jxl.chat.vo.messages.ChatMessageVO;
			import com.jxl.chatclient.events.ServiceEvent;
			import com.jxl.chatclient.mvcs.services.ChatService;
			import com.jxl.chatserver.vo.ClientVO;
			import com.photodispatcher.context.Context;
			
			import mx.collections.ArrayCollection;
			
			import spark.utils.TextFlowUtil;
			private static const SERVER_COLOR:String = "#660000";

			[Bindable]
			public var failMessage:String = "";
			[Bindable]
			public var chatText:String = "";
			[Bindable]
			public var users:ArrayCollection;

			private var _chatService:ChatService;
			[Bindable]
			public function get chatService():ChatService{
				return _chatService;
			}
			public function set chatService(value:ChatService):void{
				if(timer){
					timer.stop();
					timer.removeEventListener(TimerEvent.TIMER, onTick);
					timer=null;
				}
				if(_chatService){
					_chatService.removeEventListener(ServiceEvent.CHAT_MESSAGE, 			onChatMessage);
					//_chatService.removeEventListener(ServiceEvent.CONNECTED, 				onChatConnected);
					//_chatService.removeEventListener(ServiceEvent.DISCONNECTED, 			onChatDisconnected);
					_chatService.removeEventListener(ServiceEvent.ERROR, 					onChatError);
					//_chatService.removeEventListener(ServiceEvent.JOINED_CHAT, 				onJoinedChat);
					_chatService.removeEventListener(ServiceEvent.USER_LIST_UPDATED, 		onUserListUpdated);
					//_chatService.removeEventListener(ServiceEvent.USERNAME_TAKEN, 			onUsernameTaken);
					_chatService.removeEventListener(ServiceEvent.USER_JOINED_CHAT,			onUserJoinedChat);
					_chatService.removeEventListener(ServiceEvent.USER_LEFT_CHAT,			onUserLeftChat);
					if(_chatService.isConnected) _chatService.destroySocket();
				}
				_chatService = value;
				init();
			}

			
			//private var socket:Socket;
			private var timer:Timer;

			private function init():void{
				if(!chatService) return;
				chatService.addEventListener(ServiceEvent.CHAT_MESSAGE, 			onChatMessage);
				//chatService.addEventListener(ServiceEvent.CONNECTED, 				onChatConnected);
				//chatService.addEventListener(ServiceEvent.DISCONNECTED, 			onChatDisconnected);
				chatService.addEventListener(ServiceEvent.ERROR, 					onChatError);
				//chatService.addEventListener(ServiceEvent.JOINED_CHAT, 				onJoinedChat);
				chatService.addEventListener(ServiceEvent.USER_LIST_UPDATED, 		onUserListUpdated);
				//chatService.addEventListener(ServiceEvent.USERNAME_TAKEN, 			onUsernameTaken);
				chatService.addEventListener(ServiceEvent.USER_JOINED_CHAT,			onUserJoinedChat);
				chatService.addEventListener(ServiceEvent.USER_LEFT_CHAT,			onUserLeftChat);
				
				if(timer == null){
					timer = new Timer(500);
					timer.addEventListener(TimerEvent.TIMER, onTick);
				}				
				timer.reset();
				timer.start();
			}

			private function onTick(event:TimerEvent):void{
				//if(chatTextArea) this.chatTextArea.verticalScrollPosition = this.chatTextArea.maxVerticalScrollPosition;
			}

			private function onChatMessage(event:ServiceEvent):void{
				addChatMessage(event.chatMessage);
			}

			public function addChatMessage(chatMessage:ChatMessageVO):void{
				cutChatText();
				if(chatMessage.username.toLowerCase() != "server"){
					chatText += "<span color='#006600' fontWeight='bold'>" + chatMessage.username + ":</span>  " + chatMessage.message + "<br />";
				}else{
					chatText += "<span color='" + SERVER_COLOR + "' fontWeight='bold'>"+'§: '+chatMessage.message + "</span><br />";
				}
				try{
					chatTextArea.textFlow=TextFlowUtil.importFromString(chatText);
				}catch(error:Error){
					trace('Chat TextFlow err, txt: '+chatText);
					trace(error.message);
				}
				
			}
			public function addServerMessage(message:String):void{
				cutChatText();
				chatText += "<span color='" + SERVER_COLOR + "' fontWeight='bold'>"+'§: '+message + "</span><br />";
				try{
					chatTextArea.textFlow=TextFlowUtil.importFromString(chatText);
				}catch(error:Error){
					trace('Chat TextFlow err, txt: '+chatText);
					trace(error.message);
				}
			}

			private function cutChatText():void{
				var cutTxt:String='<br />';
				var newText:String;
				var idx:int;
				if(chatText.length>2500){
					idx=chatText.indexOf(cutTxt,chatText.length-2500);
					if(idx!=-1){
						newText=chatText.substr(idx+cutTxt.length);
					}else{
						newText='';
					}
					chatText=newText;
				}
			}
			/*
			private function onChatConnected(event:ServiceEvent):void{
				// kruft
			}
			private function onChatDisconnected(event:ServiceEvent):void{
				currentState = "offLine";
			}
			*/
			private function onChatError(event:ServiceEvent):void{
				currentState = "fail";
				failMessage = event.lastError;
			}
			/*
			private function onJoinedChat(event:ServiceEvent):void{
				currentState = "onLine";
			}
			*/
			private function onUserListUpdated(event:ServiceEvent):void{
				//DebugMax.log("ChatClientController::onUserListUpdated");
				users = new ArrayCollection(event.userList);
			}
			/*
			private function onUsernameTaken(event:ServiceEvent):void{
				usernameTaken();
			}
			public function usernameTaken():void{
				currentState = "configure_state";
				//usernameTextInput.errorString = "Username is taken.";
			}
			*/
			private function onUserJoinedChat(event:ServiceEvent):void{
				//DebugMax.log("ChatClientController::onUserJoinedChat");
				users.addItem(event.chatMessage.username);
				addServerMessage(event.chatMessage.username + " joined.");
			}
			private function onUserLeftChat(event:ServiceEvent):void{
				//DebugMax.log("ChatClientController::onUserLeftChat, message: " + event.chatMessage);
				//DebugMax.log("message: " + message);
				var index:int = users.getItemIndex(event.chatMessage.message);
				//DebugMax.log("index: " + index);
				if(index!=-1)users.removeItemAt(index);
				addServerMessage(event.chatMessage.message + " has left.");
			}

			/*
			//connect
			public function login():void{
				var serverIP:String=Context.getAttribute('serverIP');
				if(!serverIP) return;
				currentState='connecting';
				chatService.connect(serverIP, ChatService.DEFAULT_PORT, '',ClientVO.TYPE_BUILDER);
				//TODO implement get host port user from context & 
			}

			//disconnect
			private function logoff():void{
				chatService.destroySocket();
				currentState = "offLine";
			}
			*/

			protected function button1_clickHandler(event:MouseEvent):void{
				if(sayTextInput.text){
					chatService.sendChatMessage(InstructionConstants.CLIENT_CHAT_MESSAGE, sayTextInput.text);
					sayTextInput.text='';
				}
			}

			private function connectedText(isConnected:Boolean):String{
				if(isConnected){
					failMessage='';
					if(currentState!='onLine') currentState='onLine';
				}else{
					if(currentState=='onLine') currentState='offLine';
				}
				return isConnected?'Подключен':'Не подключен';
			}

		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="offLine" stateGroups="disconnected"/>
		<s:State name="fail"  stateGroups="disconnected"/>
		<!--<s:State name="connecting" stateGroups="disconnected"/>-->
		<s:State name="onLine"/>
	</s:states>
	
<!--	<s:VGroup includeIn="disconnected" width="100%" height="100%" gap="10">
		s:Label text="Подключение..." includeIn="connecting"/>
		<s:HGroup width="100%" verticalAlign="baseline" gap="5">
			<s:Button id="btnConnect" label="Connect" includeIn="offLine,fail" click="{login()}"/>
			<s:Label text="{failMessage}" color="#ff0000" includeIn="fail"/>
		</s:HGroup>
	</s:VGroup>-->

	<s:VGroup width="100%" height="100%" gap="5">
		<s:HGroup width="100%" verticalAlign="baseline" gap="5">
			<s:Label text="{connectedText(chatService.isConnected)}"/>
			<s:Label text="{failMessage}" color="#ff0000"/>
		</s:HGroup>
		<s:Label text="Пользователь: {chatService.username}"/>
		<s:VGroup includeIn="onLine" width="100%" height="100%" gap="5">
			<s:HGroup width="100%" height="100%" gap="10">
				<s:VGroup width="100%" height="100%" gap="5">
					<s:Label text="Чат"/>
					<s:TextArea id="chatTextArea" width="100%" height="100%" editable="false"
								valueCommit="chatTextArea.scroller.verticalScrollBar.value = chatTextArea.scroller.verticalScrollBar.maximum"/>
				</s:VGroup>
				<s:VGroup height="100%" gap="5">
					<s:Label text="Пользователи"/>
					<s:List height="100%" dataProvider="{users}"/>
					<!--<s:Button label="Disconnect" click="{logoff()}"/>-->
				</s:VGroup>
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="middle">
				<s:TextInput id="sayTextInput" width="100%" enter="{button1_clickHandler(null)}"/>
				<s:Button label="Отправить" click="button1_clickHandler(event)"/>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>

	
</s:Group>
