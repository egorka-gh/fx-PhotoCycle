<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="com.photodispatcher.interfaces.ISimpleLogger"
		 xmlns:config="com.photodispatcher.view.config.*" >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.LayerAllocation;
			import com.photodispatcher.model.mysql.entities.Layerset;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.service.barcode.SerialProxy;
			import com.photodispatcher.tech.GlueFeeder;
			import com.photodispatcher.tech.GlueStreamed;
			import com.photodispatcher.tech.register.TechBook;
			import com.photodispatcher.util.StrUtil;
			import com.photodispatcher.view.itemRenderer.TraySetDataGridRowBackground;
			
			import flash.globalization.DateTimeStyle;
			import flash.sampler.NewObjectSample;
			import flash.security.RevocationCheckSettings;
			
			import mx.controls.Alert;
			
			import org.granite.tide.Tide;
			
			import spark.events.IndexChangeEvent;
			import spark.formatters.DateTimeFormatter;
			
			public var glueType:int=0;
			public var techPoint:TechPoint;
			public var reversOrder:Boolean;
			public var turnInterval:int;
			public var feedDelay:int;
			public var pushDelay:int;
			public var engineOnStartOn:Boolean=false;
			public var vacuumOnStartOn:Boolean=false;
			public var engineOnErrOff:Boolean=false;
			public var vacuumOnErrOff:Boolean=false;

			public var stopOnComplite:Boolean=false;
			public var pauseOnComplite:Boolean=false;
			public var layerOnComplite:int=0;
			
			public var doubleSheetOff:Boolean=false;
			public var dataBaseOff:Boolean=false;
			public var altBarcode:Boolean=false;

			[Bindable]
			public var feedOn:Boolean=true;
			
			public var serialProxy:SerialProxy;
			
			private var sound:Sound;
			public function set alertSound(filepath:String):void{
				if(!filepath) return;
				var file:File= new File(filepath);
				if(!file.exists) return;
				sound= new Sound(new URLRequest(file.url));
			}
			protected function playAlertSound():void{
				if(!sound) return;
				try{
					sound.play();
				}catch(error:Error){}
			}
			
			[Bindable]
			private var logText:String = '';
			[Bindable]
			private var controllerlogText:String = '';
			
			private var dtFmt:DateTimeFormatter;

			public function log(mesage:String, level:int=0):void{
				var str:String;
				if(!dtFmt){
					dtFmt=new DateTimeFormatter();
					dtFmt.timeStyle=DateTimeStyle.LONG;
					dtFmt.dateTimePattern='dd.MM.yy HH:mm:ss';
				}
				str=dtFmt.format(new Date())+' '+ mesage+'\n';
				if(level==0){
					str=str+logText;
					if(!feedOn && str.length>6000){
						str=str.substr(0,5000)+'\n';
					}
					logText=str;
				}else{
					str=str+controllerlogText;
					if(!feedOn && str.length>6000){
						str=str.substr(0,5000)+'\n';
					}
					controllerlogText=str;
				}
			}
			public function clear():void{
				logText='';
			}
			
			private var techGroup:int;
			private function filterTemplates(item:Object):Boolean{
				var s:Layerset=item as Layerset;
				if(!s) return false;
				if(s.layerset_group != techGroup) return false;
				return true;
			}

			[Bindable]
			private var glue:GlueStreamed; //GlueFeeder;
			
			public function start():void{
				if(feedOn){
					glue= new GlueFeeder();
				}else{
					glue= new GlueStreamed();
				}
				
				glue.glueType=glueType;
				
				glue.serialProxy=serialProxy;
				glue.engineOnStartOn=engineOnStartOn;
				glue.vacuumOnStartOn=vacuumOnStartOn;
				glue.engineOnErrOff=engineOnErrOff;
				glue.vacuumOnErrOff=vacuumOnErrOff;
				glue.stopOnComplite=stopOnComplite;
				glue.pauseOnComplite=pauseOnComplite;
				glue.doubleSheetOff=doubleSheetOff;
				glue.reversOrder=reversOrder;
				glue.techPoint=techPoint;
				glue.feedDelay=feedDelay;
				glue.pushDelay=pushDelay;
				glue.logger=this;
				glue.dataBaseOff=dataBaseOff;
				glue.altBarcode=altBarcode;
				glue.init();
				
				glue.addEventListener(ErrorEvent.ERROR, onPickerErr);
				if(!feedOn){
					glue.start();
				}
			}

			public function stop():void{
				if(glue){
					glue.stop();
					glue.removeEventListener(ErrorEvent.ERROR, onPickerErr);
					glue.destroy();
					//techPicker=null;
				}
			}
			
			private function onPickerErr(event:ErrorEvent):void{
				log(event.text);
				if(feedOn){
					Alert.show(event.text);	
				}else{
					playAlertSound();
				}
			}
			
			protected function preventChanging(event:IndexChangeEvent):void{
				event.preventDefault();
			}
			
			protected function btPushBook_clickHandler(event:MouseEvent):void{
				if(glue && glue.glueHandler && !glue.glueHandler.isRunning) glue.glueHandler.removeBook(); 
			}
			
			public function blockLabelFunc(item:Object):String {
				var block:TechBook= item as TechBook;
				if(!block) return '';
				return block.printGroupId+': '+StrUtil.sheetName(block.book,block.sheetsTotal);
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection id="acLatches" source="{glue.latches}"/>
	</fx:Declarations>
	
	<s:VGroup gap="10" width="100%" height="100%">
		<s:HGroup gap="10" width="100%">
			<s:VGroup gap="10" width="100%">
				<s:HGroup gap="5" verticalAlign="baseline">
					<s:CheckBox id="tgSkipBookNumCheck" selected="@{glue.inexactBookSequence}"/>
					<s:Label text="Сборка брака"/>
					<s:Spacer width="20"/>
					<s:CheckBox id="tgDetectFirstBook" selected="@{glue.detectFirstBook}"/>
					<s:Label text="Не полный заказ"/>
				</s:HGroup>
				
				<s:HGroup gap="10" width="100%">
					<s:VGroup gap="5" width="100%">
						<s:HGroup gap="10" width="100%">
							<s:Label text="Заказ: {glue.currPgId}"/>
							<s:Label text="Тип книги: {glue.currBookTypeName}"/>
							<s:Label text="Книга: {glue.currBookIdx.toString()}({glue.currBookTot.toString()})"/>
							<s:Label text="Разворот: {glue.currSheetIdx.toString()}({glue.currSheetTot.toString()})"/>
						</s:HGroup>
					</s:VGroup>
				</s:HGroup>
			</s:VGroup>	
			<s:VGroup gap="12" paddingRight="10" enabled="{feedOn}">
				<!--<s:HGroup gap="5" enabled="{Boolean(techPicker.controller)}">
					<s:ToggleButton id="tgVacuum" label="Вакуум" change="{tgVacuum.selected?techPicker.controller.vacuumOn():techPicker.controller.vacuumOff()}"/>
					<s:ToggleButton id="tgEngine" label="Мотор" change="{tgEngine.selected?techPicker.controller.engineOn():techPicker.controller.engineOff()}"/>
				</s:HGroup>-->
				<s:HGroup gap="5" verticalAlign="baseline" width="150" >
					<s:Label text="Вакуум"/>
					<s:Spacer width="100%"/>
					<s:Button label="On" width="40" click="{glue.setVacuumOn()}"/>
					<s:Button label="Off" width="40" click="{glue.setVacuumOff()}"/>
				</s:HGroup>
				<s:HGroup gap="5" verticalAlign="baseline" width="150" >
					<s:Label text="Мотор"/>
					<s:Spacer width="100%"/>
					<s:Button label="On" width="40" click="{glue.setEngineOn()}"/>
					<s:Button label="Off" width="40" click="{glue.setEngineOff()}"/>
				</s:HGroup>
				<s:HGroup gap="10" >
					<s:Button id="btStart" label="Старт" enabled="{!glue.isRunning || glue.isPaused}" click="glue.start()"/>
					<!--<s:Button label="Перезапуск COM" enabled="{!glue.isRunning || glue.isPaused}" click="{serialProxy.restart()}"/>-->
				</s:HGroup>
				<s:HGroup gap="10" >
					<s:Button id="btPause" label="Пауза" enabled="{glue.isRunning}" click="glue.pauseRequest()"/>
					<s:Button id="btStop" label="Стоп" click="glue.stop()"/>
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>
		
		<s:HGroup gap="10" width="100%" height="100%">
			
<!--			<s:VGroup gap="5" width="100%" height="100%">
				<s:Label text="Лог"/>
				<s:TextArea id="logTextArea" text="{logText}" width="100%" height="100%" editable="false" />
			</s:VGroup>-->
			
			<s:VGroup gap="2" width="100%" height="100%">
				<s:TabBar id="tbLogView"  dataProvider="{vsLogViews}"/>
				<mx:ViewStack id="vsLogViews" borderStyle="none" backgroundAlpha="0" width="100%" height="100%">
					<s:NavigatorContent label="Лог" backgroundAlpha="0" width="100%" height="100%">
						<s:TextArea id="logTextArea" text="{logText}" width="100%" height="100%" editable="false"/>
					</s:NavigatorContent>
					<s:NavigatorContent label="Склейка" backgroundAlpha="0" width="100%" height="100%">
						<s:TextArea id="taControllerlog" text="{controllerlogText}" width="100%" height="100%"/>
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:VGroup>

			
			<s:VGroup gap="5" width="350" height="100%">
				<s:Label text="Блокировки подачи"/>
				<s:List id="lstLatches" dataProvider="{acLatches}" width="100%" changing="preventChanging(event)" 
						itemRenderer="com.photodispatcher.view.itemRenderer.PickerLatchRenderer">
					<s:layout>
						<s:VerticalLayout requestedRowCount="6" gap="0"/>
					</s:layout>
				</s:List>
				<s:Spacer height="5"/>
				<s:Label text="Склейка" fontWeight="bold"/>
				<s:Label text="Заказ: {glue.glueHandler.currentBookView.printGroupId}"/>
				<s:Label text="Книга: {glue.glueHandler.currentBookView.book}"/>
				<s:Label text="Листов всего: {glue.glueHandler.currentBookView.sheetsTotal}"/>
				<s:Label text="Листов подано: {glue.glueHandler.currentBookView.sheetsFeeded}"/>
				<s:Label text="Листов склеено: {glue.glueHandler.currentBookView.sheetsDone}"/>
				<s:Button id="btPushBook" label="Убрать книгу"
						  enabled="{!glue.glueHandler.isRunning}"
						  click="btPushBook_clickHandler(event)" />
				
<!--				<s:HGroup gap="5">
					<s:Button label="Emulate" click="{glue.barcodeEmulator.emulateNext();}"/>
					<s:Button label="Emulate wrong" click="{glue.barcodeEmulator.emulateNext(true);}"/>
				</s:HGroup>
-->				
				<s:Label text="Очередь"/>
				<s:List
					dataProvider="{glue.glueHandler.bookQueue}"
					labelFunction="blockLabelFunc"
					width="100%" height="100%"/>
			</s:VGroup>
		</s:HGroup>
	</s:VGroup>
	
</s:Group>
