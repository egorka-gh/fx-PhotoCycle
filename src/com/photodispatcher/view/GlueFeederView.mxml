<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="com.photodispatcher.interfaces.ISimpleLogger"
		 xmlns:config="com.photodispatcher.view.config.*"
		 xmlns:mdcomp="spark.material.components.*"
		 xmlns:mdskins="spark.material.skins.*"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.LayerAllocation;
			import com.photodispatcher.model.mysql.entities.Layerset;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.service.barcode.FeederController;
			import com.photodispatcher.service.barcode.SerialProxy;
			import com.photodispatcher.tech.GlueFeeder;
			import com.photodispatcher.tech.GlueHandlerMB;
			import com.photodispatcher.tech.GlueStreamed;
			import com.photodispatcher.tech.register.TechBook;
			import com.photodispatcher.util.StrUtil;
			import com.photodispatcher.view.itemRenderer.TraySetDataGridRowBackground;
			
			import flash.globalization.DateTimeStyle;
			import flash.sampler.NewObjectSample;
			import flash.security.RevocationCheckSettings;
			
			import mx.controls.Alert;
			
			import org.granite.tide.Tide;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			import spark.formatters.DateTimeFormatter;
			
			public var glueType:int=0;
			public var techPoint:TechPoint;
			public var reversOrder:Boolean;
			public var turnInterval:int;
			public var feedDelay:int;
			public var pushDelay:int;
			public var engineOnStartOn:Boolean=false;
			public var vacuumOnStartOn:Boolean=false;
			public var engineOnErrOff:Boolean=false;
			public var vacuumOnErrOff:Boolean=false;

			public var stopOnComplite:Boolean=false;
			public var pauseOnComplite:Boolean=false;
			public var layerOnComplite:int=0;
			
			public var doubleSheetOff:Boolean=false;
			public var dataBaseOff:Boolean=false;
			public var altBarcode:Boolean=false;

			[Bindable]
			public var feedOn:Boolean=true;
			
			[Bindable]
			public var debugBarReders:Boolean=false;
			
			[Bindable]
			protected var useServer:Boolean=false;
			
			public var serialProxy:SerialProxy;
			
			private var sound:Sound;
			public function set alertSound(filepath:String):void{
				if(!filepath) return;
				var file:File= new File(filepath);
				if(!file.exists) return;
				sound= new Sound(new URLRequest(file.url));
			}
			protected function playAlertSound():void{
				if(!sound) return;
				try{
					sound.play();
				}catch(error:Error){}
			}

			[Bindable]
			public var showAlarm:Boolean=false;
			
			[Bindable]
			private var logText:String = '';
			[Bindable]
			private var controllerlogText:String = '';
			[Bindable]
			private var barreaderlogText:String = '';
			[Bindable]
			private var serverlogText:String = '';

			[Bindable]
			private var laminatePapers:ArrayCollection;
			[Bindable]
			private var laminateRadius:Number;

			/*
			private var _statLaminatLen:Number = 0;
			[Bindable]
			public function get statLaminatLen():Number{
				return _statLaminatLen;
			}
			public function set statLaminatLen(val:Number):void{
				_statLaminatLen= val;
			}
			*/

			private var dtFmt:DateTimeFormatter;

			public function log(mesage:String, level:int=0):void{
				var str:String;
				if(!dtFmt){
					dtFmt=new DateTimeFormatter();
					dtFmt.timeStyle=DateTimeStyle.LONG;
					dtFmt.dateTimePattern='dd.MM.yy HH:mm:ss';
				}
				str=dtFmt.format(new Date())+' '+ mesage+'\n';
				if(level==0){
					str=str+logText;
					if(!feedOn && str.length>6000){
						str=str.substr(0,5000)+'\n';
					}
					logText=str;
				}else if(level==100){
					str=str+barreaderlogText;
					if(!feedOn && str.length>6000){
						str=str.substr(0,5000)+'\n';
					}
					barreaderlogText=str;
				}else if(level==101){
					str=str+serverlogText;
					if(!feedOn && str.length>6000){
						str=str.substr(0,5000)+'\n';
					}
					serverlogText=str;
				}else{
					str=str+controllerlogText;
					if(!feedOn && str.length>6000){
						str=str.substr(0,5000)+'\n';
					}
					controllerlogText=str;
				}
			}
			public function clear():void{
				logText='';
			}
			
			private var techGroup:int;
			private function filterTemplates(item:Object):Boolean{
				var s:Layerset=item as Layerset;
				if(!s) return false;
				if(s.layerset_group != techGroup) return false;
				return true;
			}

			[Bindable]
			private var glue:GlueStreamed; //GlueFeeder;
			
			public function start():void{
				debugBarReders= Context.getAttribute('debugBarReders');
				useServer= Context.getAttribute('useServer');

				var so:SharedObject = SharedObject.getLocal('appProps','/');
				var statLaminatLen:Number = so.data.statLaminatLen;
				if(!statLaminatLen) statLaminatLen = 0;
				
				laminatePapers = Context.getAttribute('laminatePapers');
				
				if(feedOn){
					glue= new GlueFeeder();
				}else{
					glue= new GlueStreamed();
				}
				
				glue.glueType=glueType;
				glue.inexactBookSequence=true;
				
				glue.serialProxy=serialProxy;
				glue.engineOnStartOn=engineOnStartOn;
				glue.vacuumOnStartOn=vacuumOnStartOn;
				glue.engineOnErrOff=engineOnErrOff;
				glue.vacuumOnErrOff=vacuumOnErrOff;
				glue.stopOnComplite=stopOnComplite;
				glue.pauseOnComplite=pauseOnComplite;
				glue.doubleSheetOff=doubleSheetOff;
				glue.reversOrder=reversOrder;
				glue.techPoint=techPoint;
				glue.feedDelay=feedDelay;
				glue.pushDelay=pushDelay;
				glue.logger=this;
				glue.dataBaseOff=dataBaseOff;
				glue.altBarcode=altBarcode;
				glue.statLaminatLen= statLaminatLen;
				onGlueStats(null);
				glue.init();
				
				//alert if statLaminatLen lesser then 5%
				var fullLength:Number = Context.getAttribute("laminateRollLen");
				if(fullLength && fullLength>0 && glue.statLaminatLen <= fullLength*0.05 ){
					//alert
					btSetLaminate_clickHandler(null);
				}
				
				glue.addEventListener(ErrorEvent.ERROR, onPickerErr);
				glue.addEventListener("stats", onGlueStats);
				if(!feedOn){
					glue.start();
				}
			}

			protected function onGlueStats(event:Event):void{
				var l:Number = Context.getAttribute("laminatePaperLen");
				if (!l || l==0) return;
				l =  Math.floor(glue.statLaminatLen*1000/l);
				if (l < 0) l = 0;
				
				for each (var obj:Object in laminatePapers){
					obj.height = Math.round(l*obj.thickness)/10;
				}
				
				var t:Number= Context.getAttribute("laminateThickness");
				var r:Number= Context.getAttribute("laminateInnerD");
				if(!t) t=0;
				if(!r) r=0;
				//laminateRadius = Math.round(Math.sqrt((glue.statLaminatLen*1000*t/1000)/Math.PI + r*r) - r);
				laminateRadius = Math.round(Math.sqrt((glue.statLaminatLen*t)/Math.PI + r*r) - r)/10;
			}

			public function stop():void{
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.statLaminatLen=glue.statLaminatLen;
				so.flush();

				if(glue){
					glue.stop();
					glue.removeEventListener(ErrorEvent.ERROR, onPickerErr);
					glue.destroy();
					//techPicker=null;
				}
			}
			
			private function showAlert(msg:String):void{
				var ap:AlertrPopup=new AlertrPopup();
				ap.show(msg, 0, 40);
			}
			
			private function onPickerErr(event:ErrorEvent):void{
				log(event.text);
				showAlert(event.text);
				if(feedOn){
					//Alert.show(event.text);
					if(event.errorID!=0){
						playAlertSound();
						showControllerAlarm();
					}
				}else{
					playAlertSound();
					showControllerAlarm();
				}
			}
			
			protected var alarmTimer:Timer;
			private function showControllerAlarm():void{
				if(!showAlarm) return;
				var showAlarmTime:int =0;
				if(Context.getAttribute("showAlarmTime")) showAlarmTime = Context.getAttribute("showAlarmTime");
				//if (showAlarmTime<1 ) showAlarmTime=10;
				showAlarmTime=showAlarmTime*1000;
				var gh:GlueHandlerMB= glue.glueHandler as GlueHandlerMB;
				if(gh && gh.controller && gh.controller.connected){
					gh.controller.setAlarmOn();
					if(showAlarmTime>0){
						if(!alarmTimer){
							alarmTimer= new Timer(showAlarmTime, 1);
							alarmTimer.addEventListener("timer", onAlarmTimer);
						}else{
							alarmTimer.reset();
							alarmTimer.delay=showAlarmTime;
						}
						alarmTimer.start();
					}
				}
			}
			protected function onAlarmTimer(event:TimerEvent):void {
				var gh:GlueHandlerMB= glue.glueHandler as GlueHandlerMB;
				if(gh && gh.controller){
					gh.controller.setAlarmOff();
				}
			}
			
			
			protected function preventChanging(event:IndexChangeEvent):void{
				event.preventDefault();
			}
			
			protected function btPushBook_clickHandler(event:MouseEvent):void{
				if(glue && glue.glueHandler) glue.glueHandler.removeBook(); 
			}
			
			public function blockLabelFunc(item:Object):String {
				var block:TechBook= item as TechBook;
				if(!block) return '';
				return block.printGroupId+': '+StrUtil.sheetName(block.book,block.sheetsTotal);
			}

			public function bookLabelFunc(item:Object):String {
				var block:TechBook= item as TechBook;
				if(!block) return '';
				return block.printGroupId+': '+StrUtil.lPad(block.book.toString(),3);
			}

			protected function reamColor(reamState:int):uint{
				if(!reamState || reamState==FeederController.REAM_STATE_UNKNOWN) return btStart.getStyle('chromeColor');
				if(reamState==FeederController.REAM_STATE_EMPTY) return 0xff4444;
				if(reamState==FeederController.REAM_STATE_FILLED) return 0x44ff44;
				if(reamState==FeederController.REAM_STATE_COUNTDOWN) return 0xffff44;
				return btStart.getStyle('chromeColor');
			}
			
			protected function btReam_clickHandler(event:MouseEvent):void{
				if((glue is GlueFeeder) && (glue as GlueFeeder).feederController) (glue as GlueFeeder).feederController.checkReam();
			}
			
			protected function btStateToggle_clickHandler(event:MouseEvent):void{
				if (currentState == "normal"){
					currentState = "operator";
				}else{
					currentState = "normal";
				}
			}
			
			protected function btSetLaminate_clickHandler(event:MouseEvent):void{
				var pp:LaminatLenthPopup = new LaminatLenthPopup();
				pp.addEventListener(PopUpEvent.CLOSE, onLaminatLenthPopup);
				pp.show();
			}
			
			private function onLaminatLenthPopup(evt:PopUpEvent):void{
				if(!evt.commit) return;
				glue.statLaminatLen = Context.getAttribute("statLaminatLen");
				var so:SharedObject = SharedObject.getLocal('appProps','/');
				so.data.statLaminatLen=glue.statLaminatLen;
				so.flush();
				onGlueStats(null);
			}
			
			protected function btStart_clickHandler(event:MouseEvent):void{
				//alert if statLaminatLen lesser then 5%
				var fullLength:Number = Context.getAttribute("laminateRollLen");
				if(fullLength && fullLength>0 && glue.statLaminatLen <= fullLength*0.05 ){
					//alert
					btSetLaminate_clickHandler(null);
				}
				glue.start()
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection id="acLatches" source="{glue.latches}"/>
		<s:NumberFormatter fractionalDigits="1" useGrouping="false" id="numFormatter" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="operator"/>
	</s:states>

	<s:transitions>
		<s:Transition fromState="normal" toState="operator">
			<s:Sequence>
				<s:Fade target="{toolsGroup}" duration="250" />
				<s:Parallel targets="{[btStateToggle, buttonGroup]}" >
					<s:Rotate target="{btStateToggle}" duration="300" />
					<s:Resize target="{buttonGroup}" duration="300"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="operator" toState="normal">
			<s:Sequence>
				<s:Parallel targets="{[btStateToggle, buttonGroup]}" >
					<s:Rotate target="{btStateToggle}" duration="300" />
					<s:Resize target="{buttonGroup}" duration="300"/>
				</s:Parallel>
				<s:Fade target="{toolsGroup}" duration="300" />
			</s:Sequence>
		</s:Transition>
	</s:transitions>
	
		<s:VGroup gap="10" width="100%" height="100%" paddingLeft="10">
			<!--top panel-->
			<s:HGroup gap="10" width="100%" paddingRight="20">
				<s:VGroup gap="10" >
					<s:Label text="Статистика: {glue.statString}"/>
					<s:Label text="{glue.statStringD}"/>
					<s:HGroup gap="5" verticalAlign="middle">
						<mdcomp:Switch id="tgSkipBookNumCheck" selected="@{glue.inexactBookSequence}"/>
						<s:Label text="Сборка брака"/>
						<s:Spacer width="20"/>
						<mdcomp:Switch id="tgDetectFirstBook" selected="@{glue.detectFirstBook}"/>
						<s:Label text="Не полный заказ"/>
					</s:HGroup>
					
						<s:VGroup  width="100%">
							<s:HGroup gap="10" width="100%">
								<s:Label text="Заказ: {glue.currPgId}"/>
								<s:Label text="Тип книги: {glue.currBookTypeName}"/>
							</s:HGroup>
						</s:VGroup>
				</s:VGroup>	

				<s:VGroup width="100%" height="100%">
					<s:VGroup id="bookGroup" width="100%" height="100%" verticalAlign="middle">
						<s:HGroup  gap="10" width="100%"  verticalAlign="baseline" horizontalAlign="center">
							<s:Label text="Книга:"
									 color="#455a64" fontSize="{bookGroup.height*0.4}"
									 fontFamily="Roboto" fontWeight="bold"/>
							<s:Label text="{glue.currBookIdx.toString()}({glue.currBookTot.toString()})"
									 color="#455a64" fontSize="{bookGroup.height*0.6}"
									 fontFamily="Roboto" fontWeight="bold"/>
							<s:Label text="Разворот: {glue.currSheetIdx.toString()}({glue.currSheetTot.toString()})"
									 color="#455a64" fontSize="{bookGroup.height*0.4}"
									 fontFamily="Roboto" fontWeight="bold"/>
						</s:HGroup>
					</s:VGroup>
					<s:HGroup width="100%" gap="10" verticalAlign="baseline" horizontalAlign="right">
						<s:Label text="Ламинат" color="#455a64" fontFamily="Roboto" />
						<s:Label text="Длина:{numFormatter.format(glue.statLaminatLen)}м"
								 color="#455a64" fontFamily="Roboto"/>
						<s:Label text="Радиус:{numFormatter.format(laminateRadius)}см"
								 color="#455a64" fontFamily="Roboto"/>
					</s:HGroup>
				</s:VGroup> 

			</s:HGroup>

			<!--laminate-->
			<s:HGroup width="100%" paddingRight="20">
				<s:Group id="laminateGroup" width="100%"
						 height="40" height.operator="200">
					
					<s:DataGroup top="0" left="0" right="0" bottom="0"
								 dataProvider="{laminatePapers}"
								 itemRenderer="com.photodispatcher.view.itemRenderer.PaperStackRenderer">
						<s:layout>
							<s:TileLayout   horizontalGap="20" verticalGap="0"
											paddingLeft="20"  paddingRight="20" 
											requestedRowCount="1" requestedColumnCount="2"
											requestedRowCount.operator="2" requestedColumnCount.operator="1"
											rowAlign="justifyUsingHeight" columnAlign="justifyUsingWidth"
											/>
						</s:layout>
						
					</s:DataGroup>
				</s:Group>
				<mdcomp:ButtonIcon id="btSetLaminate" label="Рулон" iconFont="\uf01e" 
								   click="btSetLaminate_clickHandler(event)"
								   styleName="primary" skinClass="spark.material.skins.ButtonIconVSkin"
								   height="100%"/>
			</s:HGroup>
			
			<!--buttons-->
			<s:Group id="buttonGroup" width="100%" height="60" height.operator="100%">

				<mdcomp:FloatingActionButton id="btStateToggle" radius="25" iconFont="\uf0ad"   left="-10" bottom="-10" 
											 rotation.normal="-45" rotation.operator="45" click="btStateToggle_clickHandler(event)" />
				
				<s:Group id="bttGroup" width="100%"  height="100%" minHeight="60" maxHeight="200" maxWidth="960" verticalCenter="0" horizontalCenter="0" >
					<s:layout>
						<s:TileLayout   horizontalGap="20" horizontalGap.operator="40" 
										paddingLeft="60" paddingLeft.operator="20" paddingRight="20" 
										requestedRowCount="1" requestedColumnCount="3"
										rowAlign="justifyUsingHeight" columnAlign="justifyUsingWidth"
										/>
					</s:layout>
					<mdcomp:ButtonIcon id="btStart" label="Старт" iconFont="\uf04b" styleName="primary" skinClass="spark.material.skins.ButtonIconVSkin"
									   enabled="{!glue.isRunning || glue.isPaused}" click="btStart_clickHandler(event)"/>
					<mdcomp:ButtonIcon id="btPause" label="Пауза" iconFont="\uf04c" styleName="light"  skinClass="spark.material.skins.ButtonIconVSkin"
									   enabled="{glue.isRunning}" click="glue.pauseRequest()"/>
					<mdcomp:ButtonIcon id="btStop" label="Стоп" iconFont="\uf04d" styleName="primary"  skinClass="spark.material.skins.ButtonIconVSkin"
									   click="glue.stop()"/>
<!--					<mdcomp:ButtonIcon id="btReam" label="Лоток" styleName="light" skinClass="spark.material.skins.ButtonIconVSkin" 
									   enabled="{!glue.isRunning || glue.isPaused}" 
									   chromeColor="{reamColor(glue.feederReamState)}" click="btReam_clickHandler(event)"/>-->
				</s:Group>
				
			</s:Group>

			<s:HGroup id="toolsGroup" gap="10" width="100%" height="100%" paddingLeft="15" visible.operator="false" excludeFrom="operator" >
				<!--left panel (logs)-->
				<s:VGroup gap="2" width="100%" height="100%">
					<s:TabBar id="tbLogView"  dataProvider="{vsLogViews}"/>
					<mx:ViewStack id="vsLogViews" borderStyle="none" backgroundAlpha="0" width="100%" height="100%">
						<s:NavigatorContent label="Лог" backgroundAlpha="0" width="100%" height="100%">
							<s:TextArea id="logTextArea" text="{logText}" width="100%" height="100%" editable="false"/>
						</s:NavigatorContent>
						<s:NavigatorContent label="Склейка" backgroundAlpha="0" width="100%" height="100%">
							<s:TextArea id="taControllerlog" text="{controllerlogText}" width="100%" height="100%"/>
						</s:NavigatorContent>
						<s:NavigatorContent label="Сканеры" backgroundAlpha="0" width="100%" height="100%" enabled="{debugBarReders}" >
							<s:TextArea  text="{barreaderlogText}" width="100%" height="100%"/>
						</s:NavigatorContent>
						<s:NavigatorContent label="Сервер" backgroundAlpha="0" width="100%" height="100%" enabled="{useServer}" >
							<s:TextArea  text="{serverlogText}" width="100%" height="100%"/>
						</s:NavigatorContent>
						<s:NavigatorContent label="Бракованные книги" backgroundAlpha="0" width="100%" height="100%" >
							<s:VGroup width="100%" height="100%">
								<s:List
									dataProvider="{glue.errBooks}"
									labelFunction="bookLabelFunc"
									width="100%" height="100%"/>
								<s:HGroup width="100%" horizontalAlign="right">
									<mdcomp:Button label="Очистить" click="{glue.errBooks = new ArrayCollection();}"/>
								</s:HGroup>
							</s:VGroup>
						</s:NavigatorContent>
					</mx:ViewStack>
				</s:VGroup>

				<!--right panel-->
				<s:VGroup gap="10" paddingRight="7" height="100%">
					<s:Spacer height="12"/>
					
					<mdcomp:Button id="btReam" label="Проверить лоток" width="100%" visible="{feedOn}" includeInLayout="{feedOn}"
								   enabled="{!glue.isRunning || glue.isPaused}" 
								   chromeColor="{reamColor(glue.feederReamState)}" click="btReam_clickHandler(event)"/>
					
						<s:VGroup gap="12" paddingRight="20" width="100%" visible="{feedOn}" includeInLayout="{feedOn}" >
							<s:HGroup gap="10"  width="100%" verticalAlign="baseline" >
								<s:Label text="Вакуум"/>
								<s:Spacer width="100%"/>
								<mdcomp:Button label="On" width="40" click="{glue.setVacuumOn()}"/>
								<mdcomp:Button label="Off" width="40" click="{glue.setVacuumOff()}"/>
							</s:HGroup>
							<s:HGroup gap="10"  width="100%" verticalAlign="baseline">
								<s:Label text="Мотор"/>
								<s:Spacer width="100%"/>
								<mdcomp:Button label="On" width="40" click="{glue.setEngineOn()}"/>
								<mdcomp:Button label="Off" width="40" click="{glue.setEngineOff()}"/>
							</s:HGroup>
						</s:VGroup>

					<s:VGroup gap="5" width="100%" visible="{feedOn}" includeInLayout="{feedOn}">
						<s:Label text="Блокировки подачи"/>
						<s:List id="lstLatches" dataProvider="{acLatches}" width="100%" changing="preventChanging(event)" 
								itemRenderer="com.photodispatcher.view.itemRenderer.PickerLatchRenderer">
							<s:layout>
								<s:VerticalLayout requestedRowCount="7" gap="0"/>
							</s:layout>
						</s:List>
					</s:VGroup>

					<mdcomp:Button label="Отключить сигнализацию" styleName="primary" visible="{showAlarm &amp;&amp; !feedOn}" includeInLayout="{showAlarm &amp;&amp; !feedOn}"
								   height="50" width="100%" 
								   click="{onAlarmTimer(null); if(alarmTimer) alarmTimer.stop(); }"/>

					<s:VGroup gap="5" width="100%" height="100%">
						<s:Label text="Склейка" fontFamily="Roboto" fontWeight="bold"/>
						<s:Label text="Заказ: {glue.glueHandler.currentBookView.printGroupId}"/>
						<s:Label text="Книга: {glue.glueHandler.currentBookView.book}"/>
						<s:Label text="Листов всего: {glue.glueHandler.currentBookView.sheetsTotal}"/>
						<s:Label text="Листов подано: {glue.glueHandler.currentBookView.sheetsFeeded}"/>
						<s:Label text="Листов склеено: {glue.glueHandler.currentBookView.sheetsDone}"/>
						<s:HGroup gap="10">
							<mdcomp:Button id="btPushBook" label="Убрать книгу"
									  click="btPushBook_clickHandler(event)" />
							<mdcomp:Button label="Сбросить" click="{glue.glueHandler.reset()}"/>
						</s:HGroup>
						
						<s:Label text="Очередь"/>
						<s:List
							dataProvider="{glue.glueHandler.bookQueue}"
							labelFunction="blockLabelFunc"
							width="100%" height="100%"/>
					</s:VGroup>
				</s:VGroup>
				
			</s:HGroup>

		</s:VGroup>

</s:Group>
