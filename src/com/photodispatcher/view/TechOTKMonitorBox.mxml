<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:view="com.photodispatcher.view.*"
		 xmlns:itemRenderer="com.photodispatcher.view.itemRenderer.*"
		 
		 creationComplete="{init()}"
		 >

	<fx:Script>
		<![CDATA[
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.MailPackage;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.RackSpace;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.model.mysql.services.MailPackageService;
			import com.photodispatcher.model.mysql.services.OrderService;
			import com.photodispatcher.model.mysql.services.OrderStateService;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.view.menu.GridContexMenu;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;
			
			import spark.events.PopUpEvent;

			[Bindable]
			public var techPoint:TechPoint;
			public var isActive:Boolean;


			private function init():void{
				//refresh();
			}
			
			[Bindable]
			private var mode:int;
			public function setMode(newMode:int):void{
				mode = newMode;
				currentState = 'grid';
				if (vInfo) vInfo.setMode(mode);
				refresh();
			}
			
			private var _barcodeReader:ComReader;
			public function get barcodeReader():ComReader{
				return _barcodeReader;
			}
			public function set barcodeReader(value:ComReader):void{
				if(_barcodeReader){
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
				}
				_barcodeReader = value;
				if(_barcodeReader){
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
				}
			}
			
			private var lastScanId:String; //last pg id
			private var lastBook:int;
			[Bindable]
			private var lastBox:MailPackage;
			private var newScanId:String;
			
			private function get mpService(): MailPackageService{
				return Tide.getInstance().getContext().byType(MailPackageService,true) as MailPackageService;
			}
			
			private function onBarCode(event:BarCodeEvent):void{
				if(!isActive) return;
				var barcode:String=event.barcode;
				var newBook:int;
				if(newScanId) return; //previouse scan incomplite
				newScanId=PrintGroup.idFromBookBarcode(barcode);
				newBook=PrintGroup.bookFromBookBarcode(barcode);
				if(!newScanId){
					Alert.show('Не верный ШК: "'+barcode+'".');
					return;
				}
				
				
				//check if same box
				if(lastBox){
					if(lastBox.isValidBook(newScanId, newBook)){
						//show
						lastBook=newBook;
						newScanId='';
						showBox(true);
						return;
					}
					if (mode == OrderState.TECH_OTK && currentState=='book'){
						Alert.show('Книга не из этой коробки: '+newScanId+'/'+newBook);
						newScanId='';
						lastBook=0;
						return;
					}
					//TODO ask to change box in TECH_OTK_PICKING?
				}

				//load box
				lastBook=newBook;
				var latch:DbLatch= new DbLatch();
				latch.addEventListener(Event.COMPLETE,onBoxLoad);
				latch.addLatch(mpService.loadBoxByPG(newScanId,newBook));
				latch.start();
			}
			private function onBoxLoad(e:Event):void{
				var latch:DbLatch=e.target as DbLatch;
				var resList:ArrayCollection;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onBoxLoad);
					if(latch.complite){
						resList=latch.lastDataAC;
					}
				}
				if(!resList || resList.length!=1){
					lastScanId='';
					newScanId='';
					lastBox = null;
					Alert.show('Ошибка загрузки коробки для "'+newScanId+'"/'+lastBook.toString());
					return;
				}
				lastScanId=newScanId;
				lastBox = resList.getItemAt(0) as MailPackage;
				newScanId='';

				if(lastScanId){
					//start group, box, box item
					// && start order extra state
					latch= new DbLatch();
					//latch.addEventListener(Event.COMPLETE,onBoxLoad);
					latch.addLatch(mpService.BoxStartOTK(lastBox.boxID, lastScanId));
					latch.start();
				}
				
				if (!lastBox.rackSpace){
					addBox();
					return;
				}
				showBox();
			}

			private function addBox():void{
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onAddBox);
				latch.addLatch(mpService.getBoxSpace(lastBox.source,lastBox.id, lastBox.boxID, techPoint.id));
				latch.start();
			}
			private function onAddBox(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onAddBox);
					if(latch.complite && latch.lastDataAC && latch.lastDataAC.length>0){
						lastBox.rackSpace = latch.lastDataAC.getItemAt(0) as RackSpace;
						showBox();
					}else{
						lastBox=null;
						lastScanId='';
					}
				}
			}

			private function showBox(checkClose:Boolean=false):void{
				if(!lastBox) return;
				currentState='book';
				if(vInfo){
					vInfo.setMode(mode);
					vInfo.show(lastScanId, lastBook,checkClose);
				}
			}
			
			[Bindable]
			private var usedSpacesListAC:ArrayCollection;
			
			private function refresh():void{
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onRefresh);
				latch.addLatch(mpService.usedSpaces(techPoint.id, mode));
				latch.start();
			}
			private function onRefresh(event:Event):void{
				var latch:DbLatch= event.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onRefresh);
					if(latch.complite){
						usedSpacesListAC=latch.lastDataAC;
					}
				}
			}

			public function stop():void{
			}

			private var ordersGridMenu:GridContexMenu;
			protected function dgMonitor_creationCompleteHandler(event:FlexEvent):void{
				ordersGridMenu= new GridContexMenu(dgMonitor); 
				ordersGridMenu.addItem('Открыть',openCallBack);
				
			}
			private function openCallBack(grid:DataGrid,param:int):void{
				var onItem:RackSpace=grid.selectedItem as RackSpace;
				if(onItem){
					lastBook=0;
					lastScanId='';
					var latch:DbLatch= new DbLatch();
					latch.addEventListener(Event.COMPLETE,onBoxLoad);
					latch.addLatch(mpService.loadBox(onItem.source, onItem.packageID, onItem.boxID ));
					latch.start();
				}
			}
			protected function dgMonitor_doubleClickHandler(event:MouseEvent):void{
				openCallBack(dgMonitor,0);
			}

			protected function orderinfootk1_closeHandler(event:Event):void{
				refresh();
				currentState='grid';
				vInfo.setMode(mode);
			}
			
			protected function btAddManual_clickHandler(event:MouseEvent):void{
				var pg:String=tiAddPgId.text;
				var b:int = int(tiAddBook.text);
				if(!pg || b<=0) return;
				var bar:String = PrintGroup.bookBarcodeManual(pg,b);
				onBarCode( new BarCodeEvent(BarCodeEvent.BARCODE_READED,bar));
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="grid"/>
		<s:State name="book"/>
	</s:states>
	<s:VGroup gap="10" top="0" left="0" right="0" bottom="0">
		<s:HGroup width="100%" horizontalAlign="right" verticalAlign="baseline">
			<s:Label fontWeight="bold" fontSize="14" text="{mode == OrderState.TECH_OTK_PICKING? 'ОТК':'Упаковка'}"/>
			<s:Spacer width="100%"/>
			<s:Button id="btRefresh" icon="assets/icon-refresh.gif" click="{refresh()}"
					  cornerRadius="4" width="22" height="22" baseline="4"/>

		</s:HGroup>
		<s:DataGrid id="dgMonitor" selectionMode="singleRow" includeIn="grid" 
					fontSize="14" width="100%" height="100%"
					creationComplete="dgMonitor_creationCompleteHandler(event)"
					doubleClickEnabled="true" doubleClick="dgMonitor_doubleClickHandler(event)"
					dataProvider="{usedSpacesListAC}" locale="ru_RU" columns="{RackSpace.gridColumnsUsed()}">
		</s:DataGrid>
		<s:HGroup width="100%" gap="10" horizontalAlign="right">
			<s:Label text="print group"/>
			<s:TextInput id="tiAddPgId"/>
			<s:Label text="book"/>
			<s:TextInput id="tiAddBook"/>
			<s:Button id="btAddManual" label="Add" click="btAddManual_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
	
	<view:BoxInfoOTK id="vInfo" top="0" left="0" right="0" bottom="0" includeIn="book"
					   close="orderinfootk1_closeHandler(event)"  
					   techPoint="{techPoint}" currBox="{lastBox}" />
	
</s:Group>
