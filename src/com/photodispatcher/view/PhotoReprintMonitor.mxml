<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view="com.photodispatcher.view.*"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.photodispatcher.context.Context;
			import com.photodispatcher.event.BarCodeEvent;
			import com.photodispatcher.model.mysql.DbLatch;
			import com.photodispatcher.model.mysql.entities.BookSynonym;
			import com.photodispatcher.model.mysql.entities.Order;
			import com.photodispatcher.model.mysql.entities.OrderState;
			import com.photodispatcher.model.mysql.entities.PrintGroup;
			import com.photodispatcher.model.mysql.entities.SourceType;
			import com.photodispatcher.model.mysql.entities.StaffActivityGroup;
			import com.photodispatcher.model.mysql.entities.SubOrder;
			import com.photodispatcher.model.mysql.entities.TechPoint;
			import com.photodispatcher.model.mysql.entities.TechReject;
			import com.photodispatcher.model.mysql.entities.TechRejectItem;
			import com.photodispatcher.model.mysql.services.OrderService;
			import com.photodispatcher.model.mysql.services.OrderStateService;
			import com.photodispatcher.model.mysql.services.TechRejecService;
			import com.photodispatcher.service.barcode.ComReader;
			import com.photodispatcher.util.StrUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ISort;
			import mx.collections.ISortField;
			import mx.events.FlexEvent;
			
			import org.granite.tide.Tide;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.gridClasses.GridColumn;
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			import spark.events.TextOperationEvent;
			import spark.formatters.DateTimeFormatter;
			import spark.utils.TextFlowUtil;
		
			
			
			public var techPoint:TechPoint;
			[Bindable]
			public var order:Order;
			[Bindable]
			public var reject:TechReject;

			[Bindable]
			private var labelWidth:int=100;
			[Bindable]
			private var valueWidth:int=150;

			private var _barcodeReader:ComReader;
			public function get barcodeReader():ComReader{
				return _barcodeReader;
			}
			public function set barcodeReader(value:ComReader):void{
				if(_barcodeReader){
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_ERR, onError);
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_CONNECTED, onReaderConnect);
					_barcodeReader.removeEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onBarDisconnect);
				}
				_barcodeReader = value;
				if(_barcodeReader){
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_READED,onBarCode);
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_ERR, onError);
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_CONNECTED, onReaderConnect);
					_barcodeReader.addEventListener(BarCodeEvent.BARCODE_DISCONNECTED, onBarDisconnect);
				}
			}

			private function get rejectService():TechRejecService{
				return Tide.getInstance().getContext().byType(TechRejecService,true) as TechRejecService;
			}

			private function onError(event:BarCodeEvent):void{
				log('Ошибка: '+event.error+'; ШК:'+event.barcode, true);
			}

			private function onBarDisconnect(event:BarCodeEvent):void{
				log('Отключен '+event.barcode, true);
			}
			private function onReaderConnect(event:BarCodeEvent):void{
				log('Сканер ШК подключен '+event.barcode);
			}

			private var barPG:String;
			private var barOrdId:String;
			private var barBook:int;
			private var barSheet:int;
			private var lastBarCode:String;
			
			private function onBarCode(event:BarCodeEvent):void{
				var barcode:String=event.barcode;
				log('ШК:'+event.barcode);
				lastBarCode=barcode;
				
				if(tbView) tbView.selectedIndex=0;
				
				//parce barcode
				
				if(!PrintGroup.isTechBarcode(barcode)){
					log('Не верный штрих код: '+barcode, true);
					return;
				}
				
				barBook=PrintGroup.bookFromTechBarcode(barcode);
				barSheet=PrintGroup.sheetFromTechBarcode(barcode);
				barOrdId=PrintGroup.orderIdFromTechBarcode(barcode);
				barPG=PrintGroup.idFromDigitId(PrintGroup.digitIdFromTechBarcode(barcode));
				if(!barOrdId){
					log('Не верный штрих код (id заказа): '+barcode, true);
					return;
				}
				
				if(order && order.id==barOrdId){
					applyBarData();
					return;
				}
				
				loadOrder(barOrdId);
			}
			

			public function log(mesage:String, isErr:Boolean=false):void{
				lbLog.text=mesage;
				if(isErr){
					lbLog.setStyle('backgroundAlpha',0.5);
				}else{
					lbLog.setStyle('backgroundAlpha',0);
				}
			}

			public function start():void{
				if(!techPoint){
					//TODO rise err or log in screen
					log('Не задана технологическая точка',true);
				}
				if(barcodeReader) barcodeReader.start();
			}


			public function stop():void{
				if(barcodeReader) barcodeReader.stop();
			}
			
			private function resetOrder(keepBarData:Boolean=false):void{
				if(!keepBarData){
					barPG="";
					barOrdId="";
					barBook=-1;
					barSheet=-1;
				}
				resetBook();
				if(ddSubOrder) ddSubOrder.selectedItem=null;
				if(ddPG) ddPG.selectedItem=null;
				order=null;
				reject=null;
				if(staffActivityView) staffActivityView.reset();
			}

			private function resetBook():void{
				if(nsBook){
					nsBook.minimum=-1;
					nsBook.value=-1;
					nsBook.maximum=-1;
				}
				if(nsSheet){
					nsSheet.minimum=-1;
					nsSheet.value=-1;
					nsSheet.maximum=-1;
				}
			}
			
			private function setRejectUnit(unit:int):void{
				if(ddRejectUnit){
					var item:Object=null;
					for each(var it:Object in ddRejectUnit.dataProvider){
						if(it.hasOwnProperty('value') && it.value==unit){
							item=it;
							break;
						}
					}
					ddRejectUnit.selectedItem=item;
				}
				ddRejectUnit_changeHandler(null);
			}
			
			protected function btAddManual_clickHandler(event:MouseEvent):void{
				lastBarCode='';
				var pop:OrderSearchPopup= new OrderSearchPopup();
				pop.findeMode=true
				pop.addEventListener(PopUpEvent.CLOSE,onPopup);
				pop.open(null);
				resetOrder();
				setRejectUnit(TechReject.UNIT_SHEET);
			}
			private function onPopup(event:PopUpEvent):void{
				var pop:OrderSearchPopup=event.target as OrderSearchPopup;
				if(!pop) return;
				pop.removeEventListener(PopUpEvent.CLOSE,onPopup);
				if(event.commit && pop.lastOrder){
					loadOrder(pop.lastOrder.id);
				}
			}
			
			private function loadOrder(orderId:String):void{
				if(!orderId) return;
				var svc:OrderService=Tide.getInstance().getContext().byType(OrderService,true) as OrderService;
				var latch:DbLatch=new DbLatch();
				latch.addEventListener(Event.COMPLETE,onOrderLoad);
				latch.addLatch(svc.loadOrderFull(orderId));
				latch.start();
			}
			private function onOrderLoad(e:Event):void{
				var latch:DbLatch=e.target as DbLatch;
				var bar:String='';
				if(lastBarCode) bar ='; ШК:'+lastBarCode;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onOrderLoad);
					if(!latch.complite) return;
					order=latch.lastDataItem as Order;
				}
				if(!order){
					log('Заказ не найден'+bar,true);
					return;
				}
				
				if(!order.printGroups){
					log('Заказ '+order.id+'. Нет групп печати',true);
					return;
				}

				ddSubOrder.enabled=order.hasSuborders;
				order.printGroups.filterFunction=filterPG;
				order.printGroups.refresh();
				
				//create reject
				reject= new TechReject();
				reject.order_id=order.id;
				reject.state=OrderState.REPRINT_WAITE;
				reject.items=new ArrayCollection;
				var sort:ISort = new Sort();
				var sfarr:Array=[];
				var sortfield:ISortField
				sortfield = new SortField("pg_src",false,false);
				sfarr.push(sortfield);
				sortfield = new SortField("thech_unit",false,true);
				sfarr.push(sortfield);
				sortfield = new SortField("book",false,true);
				sfarr.push(sortfield);
				sortfield = new SortField("sheet",false,true);
				sfarr.push(sortfield);
				sort.fields=sfarr;
				reject.items.sort=sort;
				
				//apply barcode data
				applyBarData();
			}

			private function applyBarData():void{
				if(!order || !order.printGroups) return;
				if(!barOrdId || !barPG) return;
				if(barOrdId!=order.id) return;
				
				//look for pg
				var p:PrintGroup;
				var pg:PrintGroup;
				var pgs:Array=(order.printGroups as ArrayCollection).source;
				for each(p in pgs){
					if(p.id==barPG){
						pg=p;
						break;
					}
				}
				if(!pg) return;
				
				//check if reprint
				if(pg.is_reprint){
					var pgId:String=pg.reprint_id;
					pg=null;
					if(pgId){
						for each(p in pgs){
							if(p.id==pgId){
								pg=p;
								break;
							}
						}
					}
				}
				if(!pg) return;
				
				var so:SubOrder;
				if(pg.sub_id && order.hasSuborders){
					//look for suborder
					for each(var o:SubOrder in order.suborders){
						if(o.sub_id==pg.sub_id){
							so=o;
							break;
						}
					}
				}
				
				ddSubOrder.selectedItem=so;
				order.printGroups.refresh();
				ddPG.selectedItem=pg;
				ddPG_changeHandler(null);
				
				if(pg.book_type==0) return;
				
				if(pg.book_part==BookSynonym.BOOK_PART_BLOCK){
					setRejectUnit(TechReject.UNIT_BLOCK);
				}else if(pg.book_part==BookSynonym.BOOK_PART_COVER){
					setRejectUnit(TechReject.UNIT_COVER);
				}else if(pg.book_part==BookSynonym.BOOK_PART_BLOCKCOVER){
					setRejectUnit(TechReject.UNIT_BOOK);
				}
				
				//set barcode book & sheet
				if(barBook) nsBook.value=barBook;
				nsSheet.value=barSheet; 
			}
			
			private function filterPG(item:Object):Boolean{
				var pg:PrintGroup=item as PrintGroup;
				if(!pg) return false;
				if(pg.is_reprint) return false;
				if(ddSubOrder && ddSubOrder.dataProvider && ddSubOrder.dataProvider.length>0 && !ddSubOrder.selectedItem) return false;
				if(ddSubOrder && ddSubOrder.selectedItem && ddSubOrder.selectedItem.sub_id != pg.sub_id) return false;
				return true;
			}
			
			protected function ddSubOrder_changeHandler(event:IndexChangeEvent):void{
				resetBook();
				ddPG.selectedItem= null;
				if(order){
					order.printGroups.refresh();
				}
			}
			
			protected function ddPG_changeHandler(event:IndexChangeEvent):void{
				resetBook();
				var pg:PrintGroup=ddPG.selectedItem as PrintGroup;
				if(pg && pg.book_type>0){
					nsBook.minimum=1;
					nsBook.value=1;
					nsBook.maximum=pg.book_num;
					
					if(pg.book_part==BookSynonym.BOOK_PART_BLOCK){
						nsSheet.minimum=1;
						nsSheet.value=1;
					}else{
						nsSheet.minimum=0;
						nsSheet.value=0;
					}
					
					nsSheet.maximum=pg.sheet_num;
				}
			}
			
			protected function ddRejectUnit_changeHandler(event:IndexChangeEvent):void{
				if(!ddRejectUnit || !ddRejectUnit.selectedItem) return;
				var unit:int=ddRejectUnit.selectedItem.value;
				nsBook.enabled=true;
				nsSheet.enabled=true;
				switch(unit){
					case TechReject.UNIT_BLOCK:
					case TechReject.UNIT_COVER:
					case TechReject.UNIT_BOOK:
						nsSheet.enabled=false;
						nsSheet.value=nsSheet.minimum;
						break;
					case TechReject.UNIT_ALL:
						nsBook.enabled=false;
						nsSheet.enabled=false;
						break;
					default:
						break;
				}
			}
			
			protected function btAddItem_clickHandler(event:MouseEvent):void{
				if(!reject) return;
				if(!ddRejectUnit.selectedItem) return; 
				var pg:PrintGroup=ddPG.selectedItem as PrintGroup;
				var unit:int=ddRejectUnit.selectedItem.value;
				if(!pg) return;
				
				var item:TechRejectItem= new TechRejectItem();
				item.pg_src=pg.id;
				item.thech_unit=unit;
				item.thech_unit_name=ddRejectUnit.selectedItem.label;
				item.book=nsBook.value;
				item.sheet=nsSheet.value;
				item.qty=1;
				
				reject.items.addItem(item);
				reject.items.refresh();
				
			}
			
			protected function btDelItem_clickHandler(event:MouseEvent):void{
				if(!reject) return;
				if(!dgItems || dgItems.selectedIndex==-1) return;
				dgItems.dataProvider.removeItemAt(dgItems.selectedIndex);
				dgItems.selectedIndex=-1;
				reject.items.refresh();
			}
			
			protected function btClearItems_clickHandler(event:MouseEvent):void{
				if(!reject) return;
				reject.items.removeAll();
				reject.items.refresh();
			}
			
			protected function staffActivityView_creationCompleteHandler(event:FlexEvent):void{
				staffActivityView.show(StaffActivityGroup.REPRINT,'Причина перепечатки');
			}
			
			protected function staffActivityView_complitedHandler(event:Event):void{
				if(!reject || reject.items.length==0) return;
				reject.created=new Date();
				reject.state_date=reject.created;
				if(reject.items.length==1){
					var item:TechRejectItem=reject.items.getItemAt(0) as TechRejectItem;
					if(item){
						reject.reject_unit=item.thech_unit;
						reject.book=item.book;
					}
				}else{
					reject.reject_unit=TechReject.UNIT_PART;
				}
				reject.activityObj=staffActivityView.staffActivity;
				if(reject.activityObj){
					reject.activityObj.order_id=reject.order_id;
					reject.activityObj.log_date=reject.created;
				}
				
				//save
				//var svc:TechRejecService=Tide.getInstance().getContext().byType(TechRejecService,true) as TechRejecService;
				var latch:DbLatch= new DbLatch();
				//latch.addEventListener(Event.COMPLETE, onStaffATLoad);
				latch.addLatch(rejectService.create(reject));
				latch.start();

				//reset
				resetOrder();
			}
			
			protected function btOpenOrder_clickHandler(event:MouseEvent):void{
				if(order && order.id){
					var pop:OrderInfoPopup=new OrderInfoPopup();
					pop.reprintDisabled=true;
					pop.show(order.id);
				}
			}
			
			protected function btLoadRejects_clickHandler(event:MouseEvent):void{
				var latch:DbLatch= new DbLatch();
				latch.addEventListener(Event.COMPLETE, onLoadRejects);
				latch.addLatch(rejectService.loadByState(OrderState.REPRINT_WAITE,OrderState.REPRINT_CAPTURED));
				latch.start();
			}
			
			[Bindable]
			private var rejectsAC:ArrayCollection;
			
			private function onLoadRejects(e:Event):void{
				var latch:DbLatch=e.target as DbLatch;
				if(latch){
					latch.removeEventListener(Event.COMPLETE,onLoadRejects);
					if(!latch.complite) return;
					rejectsAC=latch.lastDataAC;
				}
			}

			
			/*
			protected function tiBarEmul_changeHandler(event:TextOperationEvent):void{
				if(!tiBarEmul.text) return;
				var ev:BarCodeEvent= new BarCodeEvent(BarCodeEvent.BARCODE_READED,tiBarEmul.text);
				onBarCode(ev);
			}
			*/
			
		]]>
	</fx:Script>
	
	<s:VGroup gap="0" width="100%" height="100%" horizontalAlign="right" 
			  paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
		<s:HGroup gap="5" width="100%" >
			<s:Label id="lbLog" maxDisplayedLines="1" backgroundColor="#FF0000" backgroundAlpha="0" />
		</s:HGroup>
		<s:TabBar id="tbView"  dataProvider="{vsSubInfo}" width="100%"/>
		<mx:ViewStack id="vsSubInfo" borderStyle="solid" borderColor="0" backgroundAlpha="0"
					  paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5" 
					  width="100%" height="100%">
			<s:NavigatorContent label="Создание" backgroundAlpha="0" width="100%" height="100%">
				<s:VGroup gap="5" width="100%" height="100%">
					<s:HGroup gap="5" width="100%" verticalAlign="baseline">
						<s:Label text="Источник" width="{labelWidth}"/>
						<s:TextInput editable="false" text="{order.source_name}"/>
						<!--<s:TextInput id="tiBarEmul" change="tiBarEmul_changeHandler(event)"/>-->
					</s:HGroup>
					<s:HGroup gap="5" width="100%" verticalAlign="baseline">
						<s:Label text="Заказ" width="{labelWidth}"/>
						<s:TextInput editable="false" text="{order.id}"/>
						<s:Label text="Статус"/>
						<s:TextInput editable="false" text="{order.state_name}"/>
						<!--<s:Spacer width="5"/>
						<s:Button id="btOpenOrder" label="Открыть" click="btOpenOrder_clickHandler(event)"/>-->
						<s:Spacer width="5"/>
						<s:Button id="btAddManual" label="Найти" click="btAddManual_clickHandler(event)"/>
					</s:HGroup>
					
					
					<s:HGroup gap="5" width="100%" verticalAlign="baseline">
						<s:Label text="Подзаказ" width="{labelWidth}"/>
						<s:DropDownList id="ddSubOrder" dataProvider="{order.suborders}" labelField="sub_id"
										change="ddSubOrder_changeHandler(event)"
										width="{valueWidth}"/>
					</s:HGroup>
					
					<s:HGroup gap="5" width="100%" verticalAlign="baseline">
						<s:Label text="Группа печати" width="{labelWidth}"/>
						<s:DropDownList id="ddPG" dataProvider="{order.printGroups}" labelField="id"
										change="ddPG_changeHandler(event)"
										width="{valueWidth}"/>
					</s:HGroup>
					
					<s:HGroup gap="5" width="100%" verticalAlign="baseline">
						<s:Label text="Перепечатать" width="{labelWidth}"/>
						<s:DropDownList id="ddRejectUnit" dataProvider="{Context.getAttribute('reject_unitValueList')}"
										change="ddRejectUnit_changeHandler(event)"
										width="{valueWidth}"/>
					</s:HGroup>
					
					<s:HGroup gap="5" width="100%" verticalAlign="baseline">
						<s:Label text="Книга" width="{labelWidth}"/>
						<s:NumericStepper id="nsBook" minimum="0" maximum="10" stepSize="1" width="50"/>
						<s:Spacer width="5"/>
						<s:Label text="Разворот"/>
						<s:NumericStepper id="nsSheet" minimum="0" maximum="10" stepSize="1" width="50"/>
						<s:Spacer width="5"/>
						<s:Button id="btAddItem" label="Добавить" click="btAddItem_clickHandler(event)"/>
					</s:HGroup>
					
					<s:Spacer height="5"/>
					<s:Label text="К перепечатке"/>
					<s:DataGrid id="dgItems" width="100%" height="100%"
								selectionMode="singleRow"  locale="ru_RU" 
								dataProvider="{reject.items}" columns="{TechRejectItem.gridColumns()}"/>
					<s:HGroup gap="5" width="100%" horizontalAlign="right">
						<s:Button id="btDelItem" label="Удалить" click="btDelItem_clickHandler(event)"/>
						<s:Button id="btClearItems" label="Удалить все" click="btClearItems_clickHandler(event)"/>
					</s:HGroup>
					
					<s:Spacer height="5"/>
					<view:StaffActivityView id="staffActivityView" popupMode="false" okLabel="Сформировать"
											creationComplete="staffActivityView_creationCompleteHandler(event)"
											complited="staffActivityView_complitedHandler(event)"
											width="100%"/>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent label="Просмотр" backgroundAlpha="0" width="100%" height="100%">
				<s:VGroup gap="5" width="100%" height="100%">
					<s:HGroup width="100%" verticalAlign="baseline">
						<s:Label text="Перепечатки"/>
						<s:Spacer width="100%"/>
						<s:Button id="btLoadRejects" 
								  icon="assets/icon-refresh.gif" 
								  click="btLoadRejects_clickHandler(event)" 
								  cornerRadius="4" width="22" height="22" baseline="4"/>
					</s:HGroup>
					<s:DataGrid id="dgRejects" width="100%" height="60%"
								selectionMode="singleRow" locale="ru_RU"
								dataProvider="{rejectsAC}"
								columns="{TechReject.gridColumns()}"/>
					<s:Label text="Элементы"/>
					<s:DataGrid id="dgRejectsItems" width="100%" height="40%"
								selectionMode="singleRow" locale="ru_RU"
								dataProvider="{dgRejects.selectedItem.items}"
								columns="{TechRejectItem.gridColumns()}"/>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
		

		<!--<s:HGroup gap="5" width="100%">
			<s:Button id="btAddManual" label="Найти заказ" click="btAddManual_clickHandler(event)"/>
			<s:Spacer width="100%"/>
		</s:HGroup> -->
	</s:VGroup>
	
</s:Group>
